
RX_F303RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005988  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e4  08005b28  08005b28  00015b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800610c  0800610c  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  0800610c  0800610c  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800610c  0800610c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800610c  0800610c  0001610c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006110  08006110  00016110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08006114  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00000364  20000068  20000068  00020068  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200003cc  200003cc  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000c2df  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001bd3  00000000  00000000  0002c3b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000a38  00000000  00000000  0002df90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000007da  00000000  00000000  0002e9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020475  00000000  00000000  0002f1a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000d3b1  00000000  00000000  0004f617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c283d  00000000  00000000  0005c9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002ed0  00000000  00000000  0011f208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000044  00000000  00000000  001220d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005b10 	.word	0x08005b10

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08005b10 	.word	0x08005b10

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000290:	b480      	push	{r7}
 8000292:	b085      	sub	sp, #20
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 800029c:	4b0b      	ldr	r3, [pc, #44]	; (80002cc <NRF24_DelayMicroSeconds+0x3c>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a0b      	ldr	r2, [pc, #44]	; (80002d0 <NRF24_DelayMicroSeconds+0x40>)
 80002a2:	fba2 2303 	umull	r2, r3, r2, r3
 80002a6:	0c9a      	lsrs	r2, r3, #18
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	fb02 f303 	mul.w	r3, r2, r3
 80002ae:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80002b0:	bf00      	nop
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	1e5a      	subs	r2, r3, #1
 80002b6:	60fa      	str	r2, [r7, #12]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d1fa      	bne.n	80002b2 <NRF24_DelayMicroSeconds+0x22>
}
 80002bc:	bf00      	nop
 80002be:	bf00      	nop
 80002c0:	3714      	adds	r7, #20
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	20000008 	.word	0x20000008
 80002d0:	165e9f81 	.word	0x165e9f81

080002d4 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d008      	beq.n	80002f4 <NRF24_csn+0x20>
 80002e2:	4b0a      	ldr	r3, [pc, #40]	; (800030c <NRF24_csn+0x38>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	4a0a      	ldr	r2, [pc, #40]	; (8000310 <NRF24_csn+0x3c>)
 80002e8:	8811      	ldrh	r1, [r2, #0]
 80002ea:	2201      	movs	r2, #1
 80002ec:	4618      	mov	r0, r3
 80002ee:	f001 fe7f 	bl	8001ff0 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 80002f2:	e007      	b.n	8000304 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80002f4:	4b05      	ldr	r3, [pc, #20]	; (800030c <NRF24_csn+0x38>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a05      	ldr	r2, [pc, #20]	; (8000310 <NRF24_csn+0x3c>)
 80002fa:	8811      	ldrh	r1, [r2, #0]
 80002fc:	2200      	movs	r2, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f001 fe76 	bl	8001ff0 <HAL_GPIO_WritePin>
}
 8000304:	bf00      	nop
 8000306:	3708      	adds	r7, #8
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	20000094 	.word	0x20000094
 8000310:	20000098 	.word	0x20000098

08000314 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	2b00      	cmp	r3, #0
 8000320:	d008      	beq.n	8000334 <NRF24_ce+0x20>
 8000322:	4b0a      	ldr	r3, [pc, #40]	; (800034c <NRF24_ce+0x38>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	4a0a      	ldr	r2, [pc, #40]	; (8000350 <NRF24_ce+0x3c>)
 8000328:	8811      	ldrh	r1, [r2, #0]
 800032a:	2201      	movs	r2, #1
 800032c:	4618      	mov	r0, r3
 800032e:	f001 fe5f 	bl	8001ff0 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000332:	e007      	b.n	8000344 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000334:	4b05      	ldr	r3, [pc, #20]	; (800034c <NRF24_ce+0x38>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a05      	ldr	r2, [pc, #20]	; (8000350 <NRF24_ce+0x3c>)
 800033a:	8811      	ldrh	r1, [r2, #0]
 800033c:	2200      	movs	r2, #0
 800033e:	4618      	mov	r0, r3
 8000340:	f001 fe56 	bl	8001ff0 <HAL_GPIO_WritePin>
}
 8000344:	bf00      	nop
 8000346:	3708      	adds	r7, #8
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}
 800034c:	20000094 	.word	0x20000094
 8000350:	2000009a 	.word	0x2000009a

08000354 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b084      	sub	sp, #16
 8000358:	af00      	add	r7, sp, #0
 800035a:	4603      	mov	r3, r0
 800035c:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800035e:	2000      	movs	r0, #0
 8000360:	f7ff ffb8 	bl	80002d4 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000364:	79fb      	ldrb	r3, [r7, #7]
 8000366:	f003 031f 	and.w	r3, r3, #31
 800036a:	b2db      	uxtb	r3, r3
 800036c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800036e:	f107 010c 	add.w	r1, r7, #12
 8000372:	2364      	movs	r3, #100	; 0x64
 8000374:	2201      	movs	r2, #1
 8000376:	480a      	ldr	r0, [pc, #40]	; (80003a0 <NRF24_read_register+0x4c>)
 8000378:	f003 fba5 	bl	8003ac6 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 800037c:	f107 030c 	add.w	r3, r7, #12
 8000380:	1c59      	adds	r1, r3, #1
 8000382:	2364      	movs	r3, #100	; 0x64
 8000384:	2201      	movs	r2, #1
 8000386:	4806      	ldr	r0, [pc, #24]	; (80003a0 <NRF24_read_register+0x4c>)
 8000388:	f003 fd12 	bl	8003db0 <HAL_SPI_Receive>
	retData = spiBuf[1];
 800038c:	7b7b      	ldrb	r3, [r7, #13]
 800038e:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8000390:	2001      	movs	r0, #1
 8000392:	f7ff ff9f 	bl	80002d4 <NRF24_csn>
	return retData;
 8000396:	7bfb      	ldrb	r3, [r7, #15]
}
 8000398:	4618      	mov	r0, r3
 800039a:	3710      	adds	r7, #16
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	2000009c 	.word	0x2000009c

080003a4 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b084      	sub	sp, #16
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	4603      	mov	r3, r0
 80003ac:	6039      	str	r1, [r7, #0]
 80003ae:	71fb      	strb	r3, [r7, #7]
 80003b0:	4613      	mov	r3, r2
 80003b2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80003b4:	2000      	movs	r0, #0
 80003b6:	f7ff ff8d 	bl	80002d4 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80003ba:	79fb      	ldrb	r3, [r7, #7]
 80003bc:	f003 031f 	and.w	r3, r3, #31
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80003c4:	f107 010c 	add.w	r1, r7, #12
 80003c8:	2364      	movs	r3, #100	; 0x64
 80003ca:	2201      	movs	r2, #1
 80003cc:	4808      	ldr	r0, [pc, #32]	; (80003f0 <NRF24_read_registerN+0x4c>)
 80003ce:	f003 fb7a 	bl	8003ac6 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 80003d2:	79bb      	ldrb	r3, [r7, #6]
 80003d4:	b29a      	uxth	r2, r3
 80003d6:	2364      	movs	r3, #100	; 0x64
 80003d8:	6839      	ldr	r1, [r7, #0]
 80003da:	4805      	ldr	r0, [pc, #20]	; (80003f0 <NRF24_read_registerN+0x4c>)
 80003dc:	f003 fce8 	bl	8003db0 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 80003e0:	2001      	movs	r0, #1
 80003e2:	f7ff ff77 	bl	80002d4 <NRF24_csn>
}
 80003e6:	bf00      	nop
 80003e8:	3710      	adds	r7, #16
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	2000009c 	.word	0x2000009c

080003f4 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	4603      	mov	r3, r0
 80003fc:	460a      	mov	r2, r1
 80003fe:	71fb      	strb	r3, [r7, #7]
 8000400:	4613      	mov	r3, r2
 8000402:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000404:	2000      	movs	r0, #0
 8000406:	f7ff ff65 	bl	80002d4 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	f043 0320 	orr.w	r3, r3, #32
 8000410:	b2db      	uxtb	r3, r3
 8000412:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000414:	79bb      	ldrb	r3, [r7, #6]
 8000416:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000418:	f107 010c 	add.w	r1, r7, #12
 800041c:	2364      	movs	r3, #100	; 0x64
 800041e:	2202      	movs	r2, #2
 8000420:	4804      	ldr	r0, [pc, #16]	; (8000434 <NRF24_write_register+0x40>)
 8000422:	f003 fb50 	bl	8003ac6 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000426:	2001      	movs	r0, #1
 8000428:	f7ff ff54 	bl	80002d4 <NRF24_csn>
}
 800042c:	bf00      	nop
 800042e:	3710      	adds	r7, #16
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	2000009c 	.word	0x2000009c

08000438 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0
 800043e:	4603      	mov	r3, r0
 8000440:	6039      	str	r1, [r7, #0]
 8000442:	71fb      	strb	r3, [r7, #7]
 8000444:	4613      	mov	r3, r2
 8000446:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000448:	2000      	movs	r0, #0
 800044a:	f7ff ff43 	bl	80002d4 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800044e:	79fb      	ldrb	r3, [r7, #7]
 8000450:	f043 0320 	orr.w	r3, r3, #32
 8000454:	b2db      	uxtb	r3, r3
 8000456:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000458:	f107 010c 	add.w	r1, r7, #12
 800045c:	2364      	movs	r3, #100	; 0x64
 800045e:	2201      	movs	r2, #1
 8000460:	4808      	ldr	r0, [pc, #32]	; (8000484 <NRF24_write_registerN+0x4c>)
 8000462:	f003 fb30 	bl	8003ac6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000466:	79bb      	ldrb	r3, [r7, #6]
 8000468:	b29a      	uxth	r2, r3
 800046a:	2364      	movs	r3, #100	; 0x64
 800046c:	6839      	ldr	r1, [r7, #0]
 800046e:	4805      	ldr	r0, [pc, #20]	; (8000484 <NRF24_write_registerN+0x4c>)
 8000470:	f003 fb29 	bl	8003ac6 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000474:	2001      	movs	r0, #1
 8000476:	f7ff ff2d 	bl	80002d4 <NRF24_csn>
}
 800047a:	bf00      	nop
 800047c:	3710      	adds	r7, #16
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	2000009c 	.word	0x2000009c

08000488 <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b084      	sub	sp, #16
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
 8000490:	460b      	mov	r3, r1
 8000492:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8000494:	f000 fa0a 	bl	80008ac <NRF24_getPayloadSize>
 8000498:	4603      	mov	r3, r0
 800049a:	461a      	mov	r2, r3
 800049c:	78fb      	ldrb	r3, [r7, #3]
 800049e:	4293      	cmp	r3, r2
 80004a0:	d303      	bcc.n	80004aa <NRF24_read_payload+0x22>
 80004a2:	f000 fa03 	bl	80008ac <NRF24_getPayloadSize>
 80004a6:	4603      	mov	r3, r0
 80004a8:	e000      	b.n	80004ac <NRF24_read_payload+0x24>
 80004aa:	78fb      	ldrb	r3, [r7, #3]
 80004ac:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80004ae:	2000      	movs	r0, #0
 80004b0:	f7ff ff10 	bl	80002d4 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 80004b4:	2361      	movs	r3, #97	; 0x61
 80004b6:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 80004b8:	f107 010e 	add.w	r1, r7, #14
 80004bc:	2364      	movs	r3, #100	; 0x64
 80004be:	2201      	movs	r2, #1
 80004c0:	4808      	ldr	r0, [pc, #32]	; (80004e4 <NRF24_read_payload+0x5c>)
 80004c2:	f003 fb00 	bl	8003ac6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 80004c6:	7bfb      	ldrb	r3, [r7, #15]
 80004c8:	b29a      	uxth	r2, r3
 80004ca:	2364      	movs	r3, #100	; 0x64
 80004cc:	6879      	ldr	r1, [r7, #4]
 80004ce:	4805      	ldr	r0, [pc, #20]	; (80004e4 <NRF24_read_payload+0x5c>)
 80004d0:	f003 fc6e 	bl	8003db0 <HAL_SPI_Receive>
	NRF24_csn(1);
 80004d4:	2001      	movs	r0, #1
 80004d6:	f7ff fefd 	bl	80002d4 <NRF24_csn>
}
 80004da:	bf00      	nop
 80004dc:	3710      	adds	r7, #16
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	2000009c 	.word	0x2000009c

080004e8 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80004ec:	21ff      	movs	r1, #255	; 0xff
 80004ee:	20e1      	movs	r0, #225	; 0xe1
 80004f0:	f7ff ff80 	bl	80003f4 <NRF24_write_register>
}
 80004f4:	bf00      	nop
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 80004fc:	21ff      	movs	r1, #255	; 0xff
 80004fe:	20e2      	movs	r0, #226	; 0xe2
 8000500:	f7ff ff78 	bl	80003f4 <NRF24_write_register>
}
 8000504:	bf00      	nop
 8000506:	bd80      	pop	{r7, pc}

08000508 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 800050e:	2007      	movs	r0, #7
 8000510:	f7ff ff20 	bl	8000354 <NRF24_read_register>
 8000514:	4603      	mov	r3, r0
 8000516:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000518:	79fb      	ldrb	r3, [r7, #7]
}
 800051a:	4618      	mov	r0, r3
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
	...

08000524 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000524:	b082      	sub	sp, #8
 8000526:	b580      	push	{r7, lr}
 8000528:	b084      	sub	sp, #16
 800052a:	af00      	add	r7, sp, #0
 800052c:	6078      	str	r0, [r7, #4]
 800052e:	61fb      	str	r3, [r7, #28]
 8000530:	460b      	mov	r3, r1
 8000532:	807b      	strh	r3, [r7, #2]
 8000534:	4613      	mov	r3, r2
 8000536:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000538:	4b66      	ldr	r3, [pc, #408]	; (80006d4 <NRF24_begin+0x1b0>)
 800053a:	4618      	mov	r0, r3
 800053c:	f107 031c 	add.w	r3, r7, #28
 8000540:	2264      	movs	r2, #100	; 0x64
 8000542:	4619      	mov	r1, r3
 8000544:	f004 fe94 	bl	8005270 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000548:	4a63      	ldr	r2, [pc, #396]	; (80006d8 <NRF24_begin+0x1b4>)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 800054e:	4a63      	ldr	r2, [pc, #396]	; (80006dc <NRF24_begin+0x1b8>)
 8000550:	887b      	ldrh	r3, [r7, #2]
 8000552:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000554:	4a62      	ldr	r2, [pc, #392]	; (80006e0 <NRF24_begin+0x1bc>)
 8000556:	883b      	ldrh	r3, [r7, #0]
 8000558:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 800055a:	2001      	movs	r0, #1
 800055c:	f7ff feba 	bl	80002d4 <NRF24_csn>
	NRF24_ce(0);
 8000560:	2000      	movs	r0, #0
 8000562:	f7ff fed7 	bl	8000314 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000566:	2005      	movs	r0, #5
 8000568:	f001 faae 	bl	8001ac8 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 800056c:	2108      	movs	r1, #8
 800056e:	2000      	movs	r0, #0
 8000570:	f7ff ff40 	bl	80003f4 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000574:	213f      	movs	r1, #63	; 0x3f
 8000576:	2001      	movs	r0, #1
 8000578:	f7ff ff3c 	bl	80003f4 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 800057c:	2103      	movs	r1, #3
 800057e:	2002      	movs	r0, #2
 8000580:	f7ff ff38 	bl	80003f4 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000584:	2103      	movs	r1, #3
 8000586:	2003      	movs	r0, #3
 8000588:	f7ff ff34 	bl	80003f4 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 800058c:	2103      	movs	r1, #3
 800058e:	2004      	movs	r0, #4
 8000590:	f7ff ff30 	bl	80003f4 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000594:	2102      	movs	r1, #2
 8000596:	2005      	movs	r0, #5
 8000598:	f7ff ff2c 	bl	80003f4 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 800059c:	210f      	movs	r1, #15
 800059e:	2006      	movs	r0, #6
 80005a0:	f7ff ff28 	bl	80003f4 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 80005a4:	210e      	movs	r1, #14
 80005a6:	2007      	movs	r0, #7
 80005a8:	f7ff ff24 	bl	80003f4 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 80005ac:	2100      	movs	r1, #0
 80005ae:	2008      	movs	r0, #8
 80005b0:	f7ff ff20 	bl	80003f4 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 80005b4:	2100      	movs	r1, #0
 80005b6:	2009      	movs	r0, #9
 80005b8:	f7ff ff1c 	bl	80003f4 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 80005bc:	23e7      	movs	r3, #231	; 0xe7
 80005be:	733b      	strb	r3, [r7, #12]
 80005c0:	23e7      	movs	r3, #231	; 0xe7
 80005c2:	72fb      	strb	r3, [r7, #11]
 80005c4:	23e7      	movs	r3, #231	; 0xe7
 80005c6:	72bb      	strb	r3, [r7, #10]
 80005c8:	23e7      	movs	r3, #231	; 0xe7
 80005ca:	727b      	strb	r3, [r7, #9]
 80005cc:	23e7      	movs	r3, #231	; 0xe7
 80005ce:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80005d0:	f107 0308 	add.w	r3, r7, #8
 80005d4:	2205      	movs	r2, #5
 80005d6:	4619      	mov	r1, r3
 80005d8:	200a      	movs	r0, #10
 80005da:	f7ff ff2d 	bl	8000438 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 80005de:	23c2      	movs	r3, #194	; 0xc2
 80005e0:	733b      	strb	r3, [r7, #12]
 80005e2:	23c2      	movs	r3, #194	; 0xc2
 80005e4:	72fb      	strb	r3, [r7, #11]
 80005e6:	23c2      	movs	r3, #194	; 0xc2
 80005e8:	72bb      	strb	r3, [r7, #10]
 80005ea:	23c2      	movs	r3, #194	; 0xc2
 80005ec:	727b      	strb	r3, [r7, #9]
 80005ee:	23c2      	movs	r3, #194	; 0xc2
 80005f0:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80005f2:	f107 0308 	add.w	r3, r7, #8
 80005f6:	2205      	movs	r2, #5
 80005f8:	4619      	mov	r1, r3
 80005fa:	200b      	movs	r0, #11
 80005fc:	f7ff ff1c 	bl	8000438 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000600:	21c3      	movs	r1, #195	; 0xc3
 8000602:	200c      	movs	r0, #12
 8000604:	f7ff fef6 	bl	80003f4 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000608:	21c4      	movs	r1, #196	; 0xc4
 800060a:	200d      	movs	r0, #13
 800060c:	f7ff fef2 	bl	80003f4 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000610:	21c5      	movs	r1, #197	; 0xc5
 8000612:	200e      	movs	r0, #14
 8000614:	f7ff feee 	bl	80003f4 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000618:	21c6      	movs	r1, #198	; 0xc6
 800061a:	200f      	movs	r0, #15
 800061c:	f7ff feea 	bl	80003f4 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000620:	23e7      	movs	r3, #231	; 0xe7
 8000622:	733b      	strb	r3, [r7, #12]
 8000624:	23e7      	movs	r3, #231	; 0xe7
 8000626:	72fb      	strb	r3, [r7, #11]
 8000628:	23e7      	movs	r3, #231	; 0xe7
 800062a:	72bb      	strb	r3, [r7, #10]
 800062c:	23e7      	movs	r3, #231	; 0xe7
 800062e:	727b      	strb	r3, [r7, #9]
 8000630:	23e7      	movs	r3, #231	; 0xe7
 8000632:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000634:	f107 0308 	add.w	r3, r7, #8
 8000638:	2205      	movs	r2, #5
 800063a:	4619      	mov	r1, r3
 800063c:	2010      	movs	r0, #16
 800063e:	f7ff fefb 	bl	8000438 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000642:	2100      	movs	r1, #0
 8000644:	2011      	movs	r0, #17
 8000646:	f7ff fed5 	bl	80003f4 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 800064a:	2100      	movs	r1, #0
 800064c:	2012      	movs	r0, #18
 800064e:	f7ff fed1 	bl	80003f4 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000652:	2100      	movs	r1, #0
 8000654:	2013      	movs	r0, #19
 8000656:	f7ff fecd 	bl	80003f4 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 800065a:	2100      	movs	r1, #0
 800065c:	2014      	movs	r0, #20
 800065e:	f7ff fec9 	bl	80003f4 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000662:	2100      	movs	r1, #0
 8000664:	2015      	movs	r0, #21
 8000666:	f7ff fec5 	bl	80003f4 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 800066a:	2100      	movs	r1, #0
 800066c:	2016      	movs	r0, #22
 800066e:	f7ff fec1 	bl	80003f4 <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 8000672:	f000 fa7d 	bl	8000b70 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000676:	2100      	movs	r1, #0
 8000678:	201c      	movs	r0, #28
 800067a:	f7ff febb 	bl	80003f4 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 800067e:	2100      	movs	r1, #0
 8000680:	201d      	movs	r0, #29
 8000682:	f7ff feb7 	bl	80003f4 <NRF24_write_register>
	printRadioSettings();
 8000686:	f000 fa8d 	bl	8000ba4 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 800068a:	210f      	movs	r1, #15
 800068c:	200f      	movs	r0, #15
 800068e:	f000 f8c5 	bl	800081c <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000692:	2003      	movs	r0, #3
 8000694:	f000 f97d 	bl	8000992 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000698:	2001      	movs	r0, #1
 800069a:	f000 f9b3 	bl	8000a04 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 800069e:	2002      	movs	r0, #2
 80006a0:	f000 f9f6 	bl	8000a90 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 80006a4:	f000 f948 	bl	8000938 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 80006a8:	2020      	movs	r0, #32
 80006aa:	f000 f8e7 	bl	800087c <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 80006ae:	f000 fa56 	bl	8000b5e <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 80006b2:	204c      	movs	r0, #76	; 0x4c
 80006b4:	f000 f8cd 	bl	8000852 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 80006b8:	f7ff ff16 	bl	80004e8 <NRF24_flush_tx>
	NRF24_flush_rx();
 80006bc:	f7ff ff1c 	bl	80004f8 <NRF24_flush_rx>
	
	NRF24_powerDown();
 80006c0:	f000 fa0e 	bl	8000ae0 <NRF24_powerDown>
	
}
 80006c4:	bf00      	nop
 80006c6:	3710      	adds	r7, #16
 80006c8:	46bd      	mov	sp, r7
 80006ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006ce:	b002      	add	sp, #8
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	2000009c 	.word	0x2000009c
 80006d8:	20000094 	.word	0x20000094
 80006dc:	20000098 	.word	0x20000098
 80006e0:	2000009a 	.word	0x2000009a

080006e4 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 80006e8:	2000      	movs	r0, #0
 80006ea:	f7ff fe33 	bl	8000354 <NRF24_read_register>
 80006ee:	4603      	mov	r3, r0
 80006f0:	f043 0303 	orr.w	r3, r3, #3
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	4619      	mov	r1, r3
 80006f8:	2000      	movs	r0, #0
 80006fa:	f7ff fe7b 	bl	80003f4 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <NRF24_startListening+0x48>)
 8000700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000704:	4313      	orrs	r3, r2
 8000706:	d004      	beq.n	8000712 <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8000708:	2205      	movs	r2, #5
 800070a:	4908      	ldr	r1, [pc, #32]	; (800072c <NRF24_startListening+0x48>)
 800070c:	200a      	movs	r0, #10
 800070e:	f7ff fe93 	bl	8000438 <NRF24_write_registerN>
	
	//Flush buffers
	NRF24_flush_tx();
 8000712:	f7ff fee9 	bl	80004e8 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000716:	f7ff feef 	bl	80004f8 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 800071a:	2001      	movs	r0, #1
 800071c:	f7ff fdfa 	bl	8000314 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8000720:	2096      	movs	r0, #150	; 0x96
 8000722:	f7ff fdb5 	bl	8000290 <NRF24_DelayMicroSeconds>
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000088 	.word	0x20000088

08000730 <NRF24_available>:
	NRF24_flush_tx();
	return retStatus;
}
//16. Check for available data to read
bool NRF24_available(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000734:	2000      	movs	r0, #0
 8000736:	f000 f9e2 	bl	8000afe <NRF24_availablePipe>
 800073a:	4603      	mov	r3, r0
}
 800073c:	4618      	mov	r0, r3
 800073e:	bd80      	pop	{r7, pc}

08000740 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	460b      	mov	r3, r1
 800074a:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 800074c:	78fb      	ldrb	r3, [r7, #3]
 800074e:	4619      	mov	r1, r3
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f7ff fe99 	bl	8000488 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8000756:	2017      	movs	r0, #23
 8000758:	f7ff fdfc 	bl	8000354 <NRF24_read_register>
 800075c:	4603      	mov	r3, r0
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8000764:	f7ff fec8 	bl	80004f8 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8000768:	f000 f8ac 	bl	80008c4 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 800076c:	7bfb      	ldrb	r3, [r7, #15]
 800076e:	2b00      	cmp	r3, #0
 8000770:	bf14      	ite	ne
 8000772:	2301      	movne	r3, #1
 8000774:	2300      	moveq	r3, #0
 8000776:	b2db      	uxtb	r3, r3
}
 8000778:	4618      	mov	r0, r3
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	4601      	mov	r1, r0
 8000788:	e9c7 2300 	strd	r2, r3, [r7]
 800078c:	460b      	mov	r3, r1
 800078e:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8000790:	7bfb      	ldrb	r3, [r7, #15]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d104      	bne.n	80007a0 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8000796:	e9d7 2300 	ldrd	r2, r3, [r7]
 800079a:	491c      	ldr	r1, [pc, #112]	; (800080c <NRF24_openReadingPipe+0x8c>)
 800079c:	e9c1 2300 	strd	r2, r3, [r1]
	
	if(number <= 6)
 80007a0:	7bfb      	ldrb	r3, [r7, #15]
 80007a2:	2b06      	cmp	r3, #6
 80007a4:	d82d      	bhi.n	8000802 <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 80007a6:	7bfb      	ldrb	r3, [r7, #15]
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d808      	bhi.n	80007be <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	4a18      	ldr	r2, [pc, #96]	; (8000810 <NRF24_openReadingPipe+0x90>)
 80007b0:	5cd3      	ldrb	r3, [r2, r3]
 80007b2:	4639      	mov	r1, r7
 80007b4:	2205      	movs	r2, #5
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff fe3e 	bl	8000438 <NRF24_write_registerN>
 80007bc:	e007      	b.n	80007ce <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 80007be:	7bfb      	ldrb	r3, [r7, #15]
 80007c0:	4a13      	ldr	r2, [pc, #76]	; (8000810 <NRF24_openReadingPipe+0x90>)
 80007c2:	5cd3      	ldrb	r3, [r2, r3]
 80007c4:	4639      	mov	r1, r7
 80007c6:	2201      	movs	r2, #1
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff fe35 	bl	8000438 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	4a10      	ldr	r2, [pc, #64]	; (8000814 <NRF24_openReadingPipe+0x94>)
 80007d2:	5cd3      	ldrb	r3, [r2, r3]
 80007d4:	4a10      	ldr	r2, [pc, #64]	; (8000818 <NRF24_openReadingPipe+0x98>)
 80007d6:	7812      	ldrb	r2, [r2, #0]
 80007d8:	4611      	mov	r1, r2
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff fe0a 	bl	80003f4 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 80007e0:	2002      	movs	r0, #2
 80007e2:	f7ff fdb7 	bl	8000354 <NRF24_read_register>
 80007e6:	4603      	mov	r3, r0
 80007e8:	b25a      	sxtb	r2, r3
 80007ea:	7bfb      	ldrb	r3, [r7, #15]
 80007ec:	2101      	movs	r1, #1
 80007ee:	fa01 f303 	lsl.w	r3, r1, r3
 80007f2:	b25b      	sxtb	r3, r3
 80007f4:	4313      	orrs	r3, r2
 80007f6:	b25b      	sxtb	r3, r3
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	4619      	mov	r1, r3
 80007fc:	2002      	movs	r0, #2
 80007fe:	f7ff fdf9 	bl	80003f4 <NRF24_write_register>
	}
	
}
 8000802:	bf00      	nop
 8000804:	3710      	adds	r7, #16
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000088 	.word	0x20000088
 8000810:	08006090 	.word	0x08006090
 8000814:	08006098 	.word	0x08006098
 8000818:	20000090 	.word	0x20000090

0800081c <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	460a      	mov	r2, r1
 8000826:	71fb      	strb	r3, [r7, #7]
 8000828:	4613      	mov	r3, r2
 800082a:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	011b      	lsls	r3, r3, #4
 8000830:	b25a      	sxtb	r2, r3
 8000832:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000836:	f003 030f 	and.w	r3, r3, #15
 800083a:	b25b      	sxtb	r3, r3
 800083c:	4313      	orrs	r3, r2
 800083e:	b25b      	sxtb	r3, r3
 8000840:	b2db      	uxtb	r3, r3
 8000842:	4619      	mov	r1, r3
 8000844:	2004      	movs	r0, #4
 8000846:	f7ff fdd5 	bl	80003f4 <NRF24_write_register>
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b084      	sub	sp, #16
 8000856:	af00      	add	r7, sp, #0
 8000858:	4603      	mov	r3, r0
 800085a:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 800085c:	237f      	movs	r3, #127	; 0x7f
 800085e:	73fb      	strb	r3, [r7, #15]
	NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000860:	7bfa      	ldrb	r2, [r7, #15]
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	4293      	cmp	r3, r2
 8000866:	bf28      	it	cs
 8000868:	4613      	movcs	r3, r2
 800086a:	b2db      	uxtb	r3, r3
 800086c:	4619      	mov	r1, r3
 800086e:	2005      	movs	r0, #5
 8000870:	f7ff fdc0 	bl	80003f4 <NRF24_write_register>
}
 8000874:	bf00      	nop
 8000876:	3710      	adds	r7, #16
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000886:	2320      	movs	r3, #32
 8000888:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 800088a:	7bfa      	ldrb	r2, [r7, #15]
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	4293      	cmp	r3, r2
 8000890:	bf28      	it	cs
 8000892:	4613      	movcs	r3, r2
 8000894:	b2da      	uxtb	r2, r3
 8000896:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <NRF24_setPayloadSize+0x2c>)
 8000898:	701a      	strb	r2, [r3, #0]
}
 800089a:	bf00      	nop
 800089c:	3714      	adds	r7, #20
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	20000090 	.word	0x20000090

080008ac <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
	return payload_size;
 80008b0:	4b03      	ldr	r3, [pc, #12]	; (80008c0 <NRF24_getPayloadSize+0x14>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	20000090 	.word	0x20000090

080008c4 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 80008c8:	2060      	movs	r0, #96	; 0x60
 80008ca:	f7ff fd43 	bl	8000354 <NRF24_read_register>
 80008ce:	4603      	mov	r3, r0
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <NRF24_enableDynamicPayloads>:
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
}
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 80008d8:	201d      	movs	r0, #29
 80008da:	f7ff fd3b 	bl	8000354 <NRF24_read_register>
 80008de:	4603      	mov	r3, r0
 80008e0:	f043 0304 	orr.w	r3, r3, #4
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	4619      	mov	r1, r3
 80008e8:	201d      	movs	r0, #29
 80008ea:	f7ff fd83 	bl	80003f4 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 80008ee:	201d      	movs	r0, #29
 80008f0:	f7ff fd30 	bl	8000354 <NRF24_read_register>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d10c      	bne.n	8000914 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 80008fa:	f000 f939 	bl	8000b70 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 80008fe:	201d      	movs	r0, #29
 8000900:	f7ff fd28 	bl	8000354 <NRF24_read_register>
 8000904:	4603      	mov	r3, r0
 8000906:	f043 0304 	orr.w	r3, r3, #4
 800090a:	b2db      	uxtb	r3, r3
 800090c:	4619      	mov	r1, r3
 800090e:	201d      	movs	r0, #29
 8000910:	f7ff fd70 	bl	80003f4 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8000914:	201c      	movs	r0, #28
 8000916:	f7ff fd1d 	bl	8000354 <NRF24_read_register>
 800091a:	4603      	mov	r3, r0
 800091c:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000920:	b2db      	uxtb	r3, r3
 8000922:	4619      	mov	r1, r3
 8000924:	201c      	movs	r0, #28
 8000926:	f7ff fd65 	bl	80003f4 <NRF24_write_register>
  dynamic_payloads_enabled = true;
 800092a:	4b02      	ldr	r3, [pc, #8]	; (8000934 <NRF24_enableDynamicPayloads+0x60>)
 800092c:	2201      	movs	r2, #1
 800092e:	701a      	strb	r2, [r3, #0]
	
}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000091 	.word	0x20000091

08000938 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 800093c:	201d      	movs	r0, #29
 800093e:	f7ff fd09 	bl	8000354 <NRF24_read_register>
 8000942:	4603      	mov	r3, r0
 8000944:	f023 0304 	bic.w	r3, r3, #4
 8000948:	b2db      	uxtb	r3, r3
 800094a:	4619      	mov	r1, r3
 800094c:	201d      	movs	r0, #29
 800094e:	f7ff fd51 	bl	80003f4 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8000952:	2100      	movs	r1, #0
 8000954:	201c      	movs	r0, #28
 8000956:	f7ff fd4d 	bl	80003f4 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 800095a:	4b02      	ldr	r3, [pc, #8]	; (8000964 <NRF24_disableDynamicPayloads+0x2c>)
 800095c:	2200      	movs	r2, #0
 800095e:	701a      	strb	r2, [r3, #0]
}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20000091 	.word	0x20000091

08000968 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d004      	beq.n	8000982 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000978:	213f      	movs	r1, #63	; 0x3f
 800097a:	2001      	movs	r0, #1
 800097c:	f7ff fd3a 	bl	80003f4 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000980:	e003      	b.n	800098a <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000982:	2100      	movs	r1, #0
 8000984:	2001      	movs	r0, #1
 8000986:	f7ff fd35 	bl	80003f4 <NRF24_write_register>
}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000992:	b580      	push	{r7, lr}
 8000994:	b084      	sub	sp, #16
 8000996:	af00      	add	r7, sp, #0
 8000998:	4603      	mov	r3, r0
 800099a:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 800099c:	2006      	movs	r0, #6
 800099e:	f7ff fcd9 	bl	8000354 <NRF24_read_register>
 80009a2:	4603      	mov	r3, r0
 80009a4:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80009a6:	7bfb      	ldrb	r3, [r7, #15]
 80009a8:	f023 0306 	bic.w	r3, r3, #6
 80009ac:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	2b03      	cmp	r3, #3
 80009b2:	d104      	bne.n	80009be <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80009b4:	7bfb      	ldrb	r3, [r7, #15]
 80009b6:	f043 0306 	orr.w	r3, r3, #6
 80009ba:	73fb      	strb	r3, [r7, #15]
 80009bc:	e019      	b.n	80009f2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	2b02      	cmp	r3, #2
 80009c2:	d104      	bne.n	80009ce <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 80009c4:	7bfb      	ldrb	r3, [r7, #15]
 80009c6:	f043 0304 	orr.w	r3, r3, #4
 80009ca:	73fb      	strb	r3, [r7, #15]
 80009cc:	e011      	b.n	80009f2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d104      	bne.n	80009de <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 80009d4:	7bfb      	ldrb	r3, [r7, #15]
 80009d6:	f043 0302 	orr.w	r3, r3, #2
 80009da:	73fb      	strb	r3, [r7, #15]
 80009dc:	e009      	b.n	80009f2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d006      	beq.n	80009f2 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	2b04      	cmp	r3, #4
 80009e8:	d103      	bne.n	80009f2 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80009ea:	7bfb      	ldrb	r3, [r7, #15]
 80009ec:	f043 0306 	orr.w	r3, r3, #6
 80009f0:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 80009f2:	7bfb      	ldrb	r3, [r7, #15]
 80009f4:	4619      	mov	r1, r3
 80009f6:	2006      	movs	r0, #6
 80009f8:	f7ff fcfc 	bl	80003f4 <NRF24_write_register>
}
 80009fc:	bf00      	nop
 80009fe:	3710      	adds	r7, #16
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000a12:	2006      	movs	r0, #6
 8000a14:	f7ff fc9e 	bl	8000354 <NRF24_read_register>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000a1c:	4b1b      	ldr	r3, [pc, #108]	; (8000a8c <NRF24_setDataRate+0x88>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000a22:	7bbb      	ldrb	r3, [r7, #14]
 8000a24:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000a28:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	2b02      	cmp	r3, #2
 8000a2e:	d107      	bne.n	8000a40 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000a30:	4b16      	ldr	r3, [pc, #88]	; (8000a8c <NRF24_setDataRate+0x88>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000a36:	7bbb      	ldrb	r3, [r7, #14]
 8000a38:	f043 0320 	orr.w	r3, r3, #32
 8000a3c:	73bb      	strb	r3, [r7, #14]
 8000a3e:	e00d      	b.n	8000a5c <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d107      	bne.n	8000a56 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000a46:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <NRF24_setDataRate+0x88>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000a4c:	7bbb      	ldrb	r3, [r7, #14]
 8000a4e:	f043 0308 	orr.w	r3, r3, #8
 8000a52:	73bb      	strb	r3, [r7, #14]
 8000a54:	e002      	b.n	8000a5c <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000a56:	4b0d      	ldr	r3, [pc, #52]	; (8000a8c <NRF24_setDataRate+0x88>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000a5c:	7bbb      	ldrb	r3, [r7, #14]
 8000a5e:	4619      	mov	r1, r3
 8000a60:	2006      	movs	r0, #6
 8000a62:	f7ff fcc7 	bl	80003f4 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000a66:	2006      	movs	r0, #6
 8000a68:	f7ff fc74 	bl	8000354 <NRF24_read_register>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	461a      	mov	r2, r3
 8000a70:	7bbb      	ldrb	r3, [r7, #14]
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d102      	bne.n	8000a7c <NRF24_setDataRate+0x78>
  {
    result = true;
 8000a76:	2301      	movs	r3, #1
 8000a78:	73fb      	strb	r3, [r7, #15]
 8000a7a:	e002      	b.n	8000a82 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000a7c:	4b03      	ldr	r3, [pc, #12]	; (8000a8c <NRF24_setDataRate+0x88>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3710      	adds	r7, #16
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000092 	.word	0x20000092

08000a90 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	f7ff fc5a 	bl	8000354 <NRF24_read_register>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	f023 030c 	bic.w	r3, r3, #12
 8000aa6:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d00f      	beq.n	8000ace <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d104      	bne.n	8000abe <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000ab4:	7bfb      	ldrb	r3, [r7, #15]
 8000ab6:	f043 0308 	orr.w	r3, r3, #8
 8000aba:	73fb      	strb	r3, [r7, #15]
 8000abc:	e007      	b.n	8000ace <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000abe:	7bfb      	ldrb	r3, [r7, #15]
 8000ac0:	f043 0308 	orr.w	r3, r3, #8
 8000ac4:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000ac6:	7bfb      	ldrb	r3, [r7, #15]
 8000ac8:	f043 0304 	orr.w	r3, r3, #4
 8000acc:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000ace:	7bfb      	ldrb	r3, [r7, #15]
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	f7ff fc8e 	bl	80003f4 <NRF24_write_register>
}
 8000ad8:	bf00      	nop
 8000ada:	3710      	adds	r7, #16
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	f7ff fc35 	bl	8000354 <NRF24_read_register>
 8000aea:	4603      	mov	r3, r0
 8000aec:	f023 0302 	bic.w	r3, r3, #2
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	4619      	mov	r1, r3
 8000af4:	2000      	movs	r0, #0
 8000af6:	f7ff fc7d 	bl	80003f4 <NRF24_write_register>
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}

08000afe <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b084      	sub	sp, #16
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000b06:	f7ff fcff 	bl	8000508 <NRF24_get_status>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8000b0e:	7bfb      	ldrb	r3, [r7, #15]
 8000b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	bf14      	ite	ne
 8000b18:	2301      	movne	r3, #1
 8000b1a:	2300      	moveq	r3, #0
 8000b1c:	73bb      	strb	r3, [r7, #14]

  if (result)
 8000b1e:	7bbb      	ldrb	r3, [r7, #14]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d017      	beq.n	8000b54 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d007      	beq.n	8000b3a <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8000b2a:	7bfb      	ldrb	r3, [r7, #15]
 8000b2c:	085b      	lsrs	r3, r3, #1
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	f003 0307 	and.w	r3, r3, #7
 8000b34:	b2da      	uxtb	r2, r3
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8000b3a:	2140      	movs	r1, #64	; 0x40
 8000b3c:	2007      	movs	r0, #7
 8000b3e:	f7ff fc59 	bl	80003f4 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8000b42:	7bfb      	ldrb	r3, [r7, #15]
 8000b44:	f003 0320 	and.w	r3, r3, #32
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d003      	beq.n	8000b54 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8000b4c:	2120      	movs	r1, #32
 8000b4e:	2007      	movs	r0, #7
 8000b50:	f7ff fc50 	bl	80003f4 <NRF24_write_register>
    }
  }
  return result;
 8000b54:	7bbb      	ldrb	r3, [r7, #14]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000b62:	2170      	movs	r1, #112	; 0x70
 8000b64:	2007      	movs	r0, #7
 8000b66:	f7ff fc45 	bl	80003f4 <NRF24_write_register>
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
	...

08000b70 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000b76:	2000      	movs	r0, #0
 8000b78:	f7ff fbac 	bl	80002d4 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8000b7c:	2350      	movs	r3, #80	; 0x50
 8000b7e:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8000b80:	2373      	movs	r3, #115	; 0x73
 8000b82:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8000b84:	1d39      	adds	r1, r7, #4
 8000b86:	2364      	movs	r3, #100	; 0x64
 8000b88:	2202      	movs	r2, #2
 8000b8a:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <NRF24_ACTIVATE_cmd+0x30>)
 8000b8c:	f002 ff9b 	bl	8003ac6 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8000b90:	2001      	movs	r0, #1
 8000b92:	f7ff fb9f 	bl	80002d4 <NRF24_csn>
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	2000009c 	.word	0x2000009c

08000ba4 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8000ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ba6:	b0a1      	sub	sp, #132	; 0x84
 8000ba8:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8000baa:	f107 0308 	add.w	r3, r7, #8
 8000bae:	49c3      	ldr	r1, [pc, #780]	; (8000ebc <printRadioSettings+0x318>)
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f004 fb09 	bl	80051c8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000bb6:	f107 0308 	add.w	r3, r7, #8
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fb10 	bl	80001e0 <strlen>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	b29a      	uxth	r2, r3
 8000bc4:	f107 0108 	add.w	r1, r7, #8
 8000bc8:	230a      	movs	r3, #10
 8000bca:	48bd      	ldr	r0, [pc, #756]	; (8000ec0 <printRadioSettings+0x31c>)
 8000bcc:	f003 fe54 	bl	8004878 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	f7ff fbbf 	bl	8000354 <NRF24_read_register>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8000bdc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000be0:	f003 0308 	and.w	r3, r3, #8
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d013      	beq.n	8000c10 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8000be8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000bec:	f003 0304 	and.w	r3, r3, #4
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d006      	beq.n	8000c02 <printRadioSettings+0x5e>
 8000bf4:	f107 0308 	add.w	r3, r7, #8
 8000bf8:	49b2      	ldr	r1, [pc, #712]	; (8000ec4 <printRadioSettings+0x320>)
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f004 fae4 	bl	80051c8 <siprintf>
 8000c00:	e00c      	b.n	8000c1c <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 8000c02:	f107 0308 	add.w	r3, r7, #8
 8000c06:	49b0      	ldr	r1, [pc, #704]	; (8000ec8 <printRadioSettings+0x324>)
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f004 fadd 	bl	80051c8 <siprintf>
 8000c0e:	e005      	b.n	8000c1c <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8000c10:	f107 0308 	add.w	r3, r7, #8
 8000c14:	49ad      	ldr	r1, [pc, #692]	; (8000ecc <printRadioSettings+0x328>)
 8000c16:	4618      	mov	r0, r3
 8000c18:	f004 fad6 	bl	80051c8 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000c1c:	f107 0308 	add.w	r3, r7, #8
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff fadd 	bl	80001e0 <strlen>
 8000c26:	4603      	mov	r3, r0
 8000c28:	b29a      	uxth	r2, r3
 8000c2a:	f107 0108 	add.w	r1, r7, #8
 8000c2e:	230a      	movs	r3, #10
 8000c30:	48a3      	ldr	r0, [pc, #652]	; (8000ec0 <printRadioSettings+0x31c>)
 8000c32:	f003 fe21 	bl	8004878 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8000c36:	2001      	movs	r0, #1
 8000c38:	f7ff fb8c 	bl	8000354 <NRF24_read_register>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000c42:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c46:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	bfcc      	ite	gt
 8000c4e:	2301      	movgt	r3, #1
 8000c50:	2300      	movle	r3, #0
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000c56:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c5a:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	bfcc      	ite	gt
 8000c62:	2301      	movgt	r3, #1
 8000c64:	2300      	movle	r3, #0
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000c6a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c6e:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	bfcc      	ite	gt
 8000c76:	2301      	movgt	r3, #1
 8000c78:	2300      	movle	r3, #0
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000c7e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c82:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	bfcc      	ite	gt
 8000c8a:	2301      	movgt	r3, #1
 8000c8c:	2300      	movle	r3, #0
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000c92:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c96:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	bfcc      	ite	gt
 8000c9e:	2301      	movgt	r3, #1
 8000ca0:	2300      	movle	r3, #0
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000ca6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000caa:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	bfcc      	ite	gt
 8000cb2:	2301      	movgt	r3, #1
 8000cb4:	2300      	movle	r3, #0
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	f107 0008 	add.w	r0, r7, #8
 8000cbc:	9303      	str	r3, [sp, #12]
 8000cbe:	9402      	str	r4, [sp, #8]
 8000cc0:	9101      	str	r1, [sp, #4]
 8000cc2:	9200      	str	r2, [sp, #0]
 8000cc4:	4633      	mov	r3, r6
 8000cc6:	462a      	mov	r2, r5
 8000cc8:	4981      	ldr	r1, [pc, #516]	; (8000ed0 <printRadioSettings+0x32c>)
 8000cca:	f004 fa7d 	bl	80051c8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000cce:	f107 0308 	add.w	r3, r7, #8
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff fa84 	bl	80001e0 <strlen>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	f107 0108 	add.w	r1, r7, #8
 8000ce0:	230a      	movs	r3, #10
 8000ce2:	4877      	ldr	r0, [pc, #476]	; (8000ec0 <printRadioSettings+0x31c>)
 8000ce4:	f003 fdc8 	bl	8004878 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8000ce8:	2002      	movs	r0, #2
 8000cea:	f7ff fb33 	bl	8000354 <NRF24_read_register>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000cf4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000cf8:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	bfcc      	ite	gt
 8000d00:	2301      	movgt	r3, #1
 8000d02:	2300      	movle	r3, #0
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d08:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d0c:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	bfcc      	ite	gt
 8000d14:	2301      	movgt	r3, #1
 8000d16:	2300      	movle	r3, #0
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d1c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d20:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	bfcc      	ite	gt
 8000d28:	2301      	movgt	r3, #1
 8000d2a:	2300      	movle	r3, #0
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d30:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d34:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	bfcc      	ite	gt
 8000d3c:	2301      	movgt	r3, #1
 8000d3e:	2300      	movle	r3, #0
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d44:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d48:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	bfcc      	ite	gt
 8000d50:	2301      	movgt	r3, #1
 8000d52:	2300      	movle	r3, #0
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d58:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d5c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	bfcc      	ite	gt
 8000d64:	2301      	movgt	r3, #1
 8000d66:	2300      	movle	r3, #0
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	f107 0008 	add.w	r0, r7, #8
 8000d6e:	9303      	str	r3, [sp, #12]
 8000d70:	9402      	str	r4, [sp, #8]
 8000d72:	9101      	str	r1, [sp, #4]
 8000d74:	9200      	str	r2, [sp, #0]
 8000d76:	4633      	mov	r3, r6
 8000d78:	462a      	mov	r2, r5
 8000d7a:	4956      	ldr	r1, [pc, #344]	; (8000ed4 <printRadioSettings+0x330>)
 8000d7c:	f004 fa24 	bl	80051c8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000d80:	f107 0308 	add.w	r3, r7, #8
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff fa2b 	bl	80001e0 <strlen>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	b29a      	uxth	r2, r3
 8000d8e:	f107 0108 	add.w	r1, r7, #8
 8000d92:	230a      	movs	r3, #10
 8000d94:	484a      	ldr	r0, [pc, #296]	; (8000ec0 <printRadioSettings+0x31c>)
 8000d96:	f003 fd6f 	bl	8004878 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8000d9a:	2003      	movs	r0, #3
 8000d9c:	f7ff fada 	bl	8000354 <NRF24_read_register>
 8000da0:	4603      	mov	r3, r0
 8000da2:	f003 0303 	and.w	r3, r3, #3
 8000da6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8000daa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000dae:	3302      	adds	r3, #2
 8000db0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8000db4:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000db8:	f107 0308 	add.w	r3, r7, #8
 8000dbc:	4946      	ldr	r1, [pc, #280]	; (8000ed8 <printRadioSettings+0x334>)
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f004 fa02 	bl	80051c8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000dc4:	f107 0308 	add.w	r3, r7, #8
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff fa09 	bl	80001e0 <strlen>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	b29a      	uxth	r2, r3
 8000dd2:	f107 0108 	add.w	r1, r7, #8
 8000dd6:	230a      	movs	r3, #10
 8000dd8:	4839      	ldr	r0, [pc, #228]	; (8000ec0 <printRadioSettings+0x31c>)
 8000dda:	f003 fd4d 	bl	8004878 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8000dde:	2005      	movs	r0, #5
 8000de0:	f7ff fab8 	bl	8000354 <NRF24_read_register>
 8000de4:	4603      	mov	r3, r0
 8000de6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8000dea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000dee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000df2:	f107 0308 	add.w	r3, r7, #8
 8000df6:	4939      	ldr	r1, [pc, #228]	; (8000edc <printRadioSettings+0x338>)
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f004 f9e5 	bl	80051c8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000dfe:	f107 0308 	add.w	r3, r7, #8
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff f9ec 	bl	80001e0 <strlen>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	f107 0108 	add.w	r1, r7, #8
 8000e10:	230a      	movs	r3, #10
 8000e12:	482b      	ldr	r0, [pc, #172]	; (8000ec0 <printRadioSettings+0x31c>)
 8000e14:	f003 fd30 	bl	8004878 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8000e18:	2006      	movs	r0, #6
 8000e1a:	f7ff fa9b 	bl	8000354 <NRF24_read_register>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8000e24:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e28:	f003 0308 	and.w	r3, r3, #8
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d006      	beq.n	8000e3e <printRadioSettings+0x29a>
 8000e30:	f107 0308 	add.w	r3, r7, #8
 8000e34:	492a      	ldr	r1, [pc, #168]	; (8000ee0 <printRadioSettings+0x33c>)
 8000e36:	4618      	mov	r0, r3
 8000e38:	f004 f9c6 	bl	80051c8 <siprintf>
 8000e3c:	e005      	b.n	8000e4a <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8000e3e:	f107 0308 	add.w	r3, r7, #8
 8000e42:	4928      	ldr	r1, [pc, #160]	; (8000ee4 <printRadioSettings+0x340>)
 8000e44:	4618      	mov	r0, r3
 8000e46:	f004 f9bf 	bl	80051c8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000e4a:	f107 0308 	add.w	r3, r7, #8
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff f9c6 	bl	80001e0 <strlen>
 8000e54:	4603      	mov	r3, r0
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	f107 0108 	add.w	r1, r7, #8
 8000e5c:	230a      	movs	r3, #10
 8000e5e:	4818      	ldr	r0, [pc, #96]	; (8000ec0 <printRadioSettings+0x31c>)
 8000e60:	f003 fd0a 	bl	8004878 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8000e64:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e68:	f003 0306 	and.w	r3, r3, #6
 8000e6c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8000e70:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e74:	085b      	lsrs	r3, r3, #1
 8000e76:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8000e7a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d106      	bne.n	8000e90 <printRadioSettings+0x2ec>
 8000e82:	f107 0308 	add.w	r3, r7, #8
 8000e86:	4918      	ldr	r1, [pc, #96]	; (8000ee8 <printRadioSettings+0x344>)
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f004 f99d 	bl	80051c8 <siprintf>
 8000e8e:	e03b      	b.n	8000f08 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8000e90:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d106      	bne.n	8000ea6 <printRadioSettings+0x302>
 8000e98:	f107 0308 	add.w	r3, r7, #8
 8000e9c:	4913      	ldr	r1, [pc, #76]	; (8000eec <printRadioSettings+0x348>)
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f004 f992 	bl	80051c8 <siprintf>
 8000ea4:	e030      	b.n	8000f08 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8000ea6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d122      	bne.n	8000ef4 <printRadioSettings+0x350>
 8000eae:	f107 0308 	add.w	r3, r7, #8
 8000eb2:	490f      	ldr	r1, [pc, #60]	; (8000ef0 <printRadioSettings+0x34c>)
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f004 f987 	bl	80051c8 <siprintf>
 8000eba:	e025      	b.n	8000f08 <printRadioSettings+0x364>
 8000ebc:	08005b28 	.word	0x08005b28
 8000ec0:	20000100 	.word	0x20000100
 8000ec4:	08005b5c 	.word	0x08005b5c
 8000ec8:	08005b78 	.word	0x08005b78
 8000ecc:	08005b94 	.word	0x08005b94
 8000ed0:	08005ba8 	.word	0x08005ba8
 8000ed4:	08005bec 	.word	0x08005bec
 8000ed8:	08005c38 	.word	0x08005c38
 8000edc:	08005c54 	.word	0x08005c54
 8000ee0:	08005c68 	.word	0x08005c68
 8000ee4:	08005c80 	.word	0x08005c80
 8000ee8:	08005c98 	.word	0x08005c98
 8000eec:	08005cac 	.word	0x08005cac
 8000ef0:	08005cc0 	.word	0x08005cc0
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8000ef4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ef8:	2b03      	cmp	r3, #3
 8000efa:	d105      	bne.n	8000f08 <printRadioSettings+0x364>
 8000efc:	f107 0308 	add.w	r3, r7, #8
 8000f00:	49d7      	ldr	r1, [pc, #860]	; (8001260 <printRadioSettings+0x6bc>)
 8000f02:	4618      	mov	r0, r3
 8000f04:	f004 f960 	bl	80051c8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000f08:	f107 0308 	add.w	r3, r7, #8
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff f967 	bl	80001e0 <strlen>
 8000f12:	4603      	mov	r3, r0
 8000f14:	b29a      	uxth	r2, r3
 8000f16:	f107 0108 	add.w	r1, r7, #8
 8000f1a:	230a      	movs	r3, #10
 8000f1c:	48d1      	ldr	r0, [pc, #836]	; (8001264 <printRadioSettings+0x6c0>)
 8000f1e:	f003 fcab 	bl	8004878 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8000f22:	463b      	mov	r3, r7
 8000f24:	2205      	movs	r2, #5
 8000f26:	4619      	mov	r1, r3
 8000f28:	200a      	movs	r0, #10
 8000f2a:	f7ff fa3b 	bl	80003a4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8000f2e:	793b      	ldrb	r3, [r7, #4]
 8000f30:	461c      	mov	r4, r3
 8000f32:	78fb      	ldrb	r3, [r7, #3]
 8000f34:	461d      	mov	r5, r3
 8000f36:	78bb      	ldrb	r3, [r7, #2]
 8000f38:	787a      	ldrb	r2, [r7, #1]
 8000f3a:	7839      	ldrb	r1, [r7, #0]
 8000f3c:	f107 0008 	add.w	r0, r7, #8
 8000f40:	9102      	str	r1, [sp, #8]
 8000f42:	9201      	str	r2, [sp, #4]
 8000f44:	9300      	str	r3, [sp, #0]
 8000f46:	462b      	mov	r3, r5
 8000f48:	4622      	mov	r2, r4
 8000f4a:	49c7      	ldr	r1, [pc, #796]	; (8001268 <printRadioSettings+0x6c4>)
 8000f4c:	f004 f93c 	bl	80051c8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000f50:	f107 0308 	add.w	r3, r7, #8
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff f943 	bl	80001e0 <strlen>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	b29a      	uxth	r2, r3
 8000f5e:	f107 0108 	add.w	r1, r7, #8
 8000f62:	230a      	movs	r3, #10
 8000f64:	48bf      	ldr	r0, [pc, #764]	; (8001264 <printRadioSettings+0x6c0>)
 8000f66:	f003 fc87 	bl	8004878 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8000f6a:	463b      	mov	r3, r7
 8000f6c:	2205      	movs	r2, #5
 8000f6e:	4619      	mov	r1, r3
 8000f70:	200b      	movs	r0, #11
 8000f72:	f7ff fa17 	bl	80003a4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8000f76:	793b      	ldrb	r3, [r7, #4]
 8000f78:	461c      	mov	r4, r3
 8000f7a:	78fb      	ldrb	r3, [r7, #3]
 8000f7c:	461d      	mov	r5, r3
 8000f7e:	78bb      	ldrb	r3, [r7, #2]
 8000f80:	787a      	ldrb	r2, [r7, #1]
 8000f82:	7839      	ldrb	r1, [r7, #0]
 8000f84:	f107 0008 	add.w	r0, r7, #8
 8000f88:	9102      	str	r1, [sp, #8]
 8000f8a:	9201      	str	r2, [sp, #4]
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	462b      	mov	r3, r5
 8000f90:	4622      	mov	r2, r4
 8000f92:	49b6      	ldr	r1, [pc, #728]	; (800126c <printRadioSettings+0x6c8>)
 8000f94:	f004 f918 	bl	80051c8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000f98:	f107 0308 	add.w	r3, r7, #8
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff f91f 	bl	80001e0 <strlen>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	f107 0108 	add.w	r1, r7, #8
 8000faa:	230a      	movs	r3, #10
 8000fac:	48ad      	ldr	r0, [pc, #692]	; (8001264 <printRadioSettings+0x6c0>)
 8000fae:	f003 fc63 	bl	8004878 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8000fb2:	463b      	mov	r3, r7
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	200c      	movs	r0, #12
 8000fba:	f7ff f9f3 	bl	80003a4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8000fbe:	783b      	ldrb	r3, [r7, #0]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	f107 0308 	add.w	r3, r7, #8
 8000fc6:	49aa      	ldr	r1, [pc, #680]	; (8001270 <printRadioSettings+0x6cc>)
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f004 f8fd 	bl	80051c8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000fce:	f107 0308 	add.w	r3, r7, #8
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff f904 	bl	80001e0 <strlen>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	b29a      	uxth	r2, r3
 8000fdc:	f107 0108 	add.w	r1, r7, #8
 8000fe0:	230a      	movs	r3, #10
 8000fe2:	48a0      	ldr	r0, [pc, #640]	; (8001264 <printRadioSettings+0x6c0>)
 8000fe4:	f003 fc48 	bl	8004878 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8000fe8:	463b      	mov	r3, r7
 8000fea:	2201      	movs	r2, #1
 8000fec:	4619      	mov	r1, r3
 8000fee:	200d      	movs	r0, #13
 8000ff0:	f7ff f9d8 	bl	80003a4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8000ff4:	783b      	ldrb	r3, [r7, #0]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	f107 0308 	add.w	r3, r7, #8
 8000ffc:	499d      	ldr	r1, [pc, #628]	; (8001274 <printRadioSettings+0x6d0>)
 8000ffe:	4618      	mov	r0, r3
 8001000:	f004 f8e2 	bl	80051c8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001004:	f107 0308 	add.w	r3, r7, #8
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff f8e9 	bl	80001e0 <strlen>
 800100e:	4603      	mov	r3, r0
 8001010:	b29a      	uxth	r2, r3
 8001012:	f107 0108 	add.w	r1, r7, #8
 8001016:	230a      	movs	r3, #10
 8001018:	4892      	ldr	r0, [pc, #584]	; (8001264 <printRadioSettings+0x6c0>)
 800101a:	f003 fc2d 	bl	8004878 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 800101e:	463b      	mov	r3, r7
 8001020:	2201      	movs	r2, #1
 8001022:	4619      	mov	r1, r3
 8001024:	200e      	movs	r0, #14
 8001026:	f7ff f9bd 	bl	80003a4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800102a:	783b      	ldrb	r3, [r7, #0]
 800102c:	461a      	mov	r2, r3
 800102e:	f107 0308 	add.w	r3, r7, #8
 8001032:	4991      	ldr	r1, [pc, #580]	; (8001278 <printRadioSettings+0x6d4>)
 8001034:	4618      	mov	r0, r3
 8001036:	f004 f8c7 	bl	80051c8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800103a:	f107 0308 	add.w	r3, r7, #8
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff f8ce 	bl	80001e0 <strlen>
 8001044:	4603      	mov	r3, r0
 8001046:	b29a      	uxth	r2, r3
 8001048:	f107 0108 	add.w	r1, r7, #8
 800104c:	230a      	movs	r3, #10
 800104e:	4885      	ldr	r0, [pc, #532]	; (8001264 <printRadioSettings+0x6c0>)
 8001050:	f003 fc12 	bl	8004878 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001054:	463b      	mov	r3, r7
 8001056:	2201      	movs	r2, #1
 8001058:	4619      	mov	r1, r3
 800105a:	200f      	movs	r0, #15
 800105c:	f7ff f9a2 	bl	80003a4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001060:	783b      	ldrb	r3, [r7, #0]
 8001062:	461a      	mov	r2, r3
 8001064:	f107 0308 	add.w	r3, r7, #8
 8001068:	4984      	ldr	r1, [pc, #528]	; (800127c <printRadioSettings+0x6d8>)
 800106a:	4618      	mov	r0, r3
 800106c:	f004 f8ac 	bl	80051c8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001070:	f107 0308 	add.w	r3, r7, #8
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff f8b3 	bl	80001e0 <strlen>
 800107a:	4603      	mov	r3, r0
 800107c:	b29a      	uxth	r2, r3
 800107e:	f107 0108 	add.w	r1, r7, #8
 8001082:	230a      	movs	r3, #10
 8001084:	4877      	ldr	r0, [pc, #476]	; (8001264 <printRadioSettings+0x6c0>)
 8001086:	f003 fbf7 	bl	8004878 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 800108a:	463b      	mov	r3, r7
 800108c:	2205      	movs	r2, #5
 800108e:	4619      	mov	r1, r3
 8001090:	2010      	movs	r0, #16
 8001092:	f7ff f987 	bl	80003a4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001096:	793b      	ldrb	r3, [r7, #4]
 8001098:	461c      	mov	r4, r3
 800109a:	78fb      	ldrb	r3, [r7, #3]
 800109c:	461d      	mov	r5, r3
 800109e:	78bb      	ldrb	r3, [r7, #2]
 80010a0:	787a      	ldrb	r2, [r7, #1]
 80010a2:	7839      	ldrb	r1, [r7, #0]
 80010a4:	f107 0008 	add.w	r0, r7, #8
 80010a8:	9102      	str	r1, [sp, #8]
 80010aa:	9201      	str	r2, [sp, #4]
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	462b      	mov	r3, r5
 80010b0:	4622      	mov	r2, r4
 80010b2:	4973      	ldr	r1, [pc, #460]	; (8001280 <printRadioSettings+0x6dc>)
 80010b4:	f004 f888 	bl	80051c8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010b8:	f107 0308 	add.w	r3, r7, #8
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff f88f 	bl	80001e0 <strlen>
 80010c2:	4603      	mov	r3, r0
 80010c4:	b29a      	uxth	r2, r3
 80010c6:	f107 0108 	add.w	r1, r7, #8
 80010ca:	230a      	movs	r3, #10
 80010cc:	4865      	ldr	r0, [pc, #404]	; (8001264 <printRadioSettings+0x6c0>)
 80010ce:	f003 fbd3 	bl	8004878 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 80010d2:	2011      	movs	r0, #17
 80010d4:	f7ff f93e 	bl	8000354 <NRF24_read_register>
 80010d8:	4603      	mov	r3, r0
 80010da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80010de:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80010e6:	f107 0308 	add.w	r3, r7, #8
 80010ea:	4966      	ldr	r1, [pc, #408]	; (8001284 <printRadioSettings+0x6e0>)
 80010ec:	4618      	mov	r0, r3
 80010ee:	f004 f86b 	bl	80051c8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010f2:	f107 0308 	add.w	r3, r7, #8
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff f872 	bl	80001e0 <strlen>
 80010fc:	4603      	mov	r3, r0
 80010fe:	b29a      	uxth	r2, r3
 8001100:	f107 0108 	add.w	r1, r7, #8
 8001104:	230a      	movs	r3, #10
 8001106:	4857      	ldr	r0, [pc, #348]	; (8001264 <printRadioSettings+0x6c0>)
 8001108:	f003 fbb6 	bl	8004878 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 800110c:	2012      	movs	r0, #18
 800110e:	f7ff f921 	bl	8000354 <NRF24_read_register>
 8001112:	4603      	mov	r3, r0
 8001114:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001118:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800111c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001120:	f107 0308 	add.w	r3, r7, #8
 8001124:	4958      	ldr	r1, [pc, #352]	; (8001288 <printRadioSettings+0x6e4>)
 8001126:	4618      	mov	r0, r3
 8001128:	f004 f84e 	bl	80051c8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800112c:	f107 0308 	add.w	r3, r7, #8
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff f855 	bl	80001e0 <strlen>
 8001136:	4603      	mov	r3, r0
 8001138:	b29a      	uxth	r2, r3
 800113a:	f107 0108 	add.w	r1, r7, #8
 800113e:	230a      	movs	r3, #10
 8001140:	4848      	ldr	r0, [pc, #288]	; (8001264 <printRadioSettings+0x6c0>)
 8001142:	f003 fb99 	bl	8004878 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 8001146:	2013      	movs	r0, #19
 8001148:	f7ff f904 	bl	8000354 <NRF24_read_register>
 800114c:	4603      	mov	r3, r0
 800114e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001152:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001156:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800115a:	f107 0308 	add.w	r3, r7, #8
 800115e:	494b      	ldr	r1, [pc, #300]	; (800128c <printRadioSettings+0x6e8>)
 8001160:	4618      	mov	r0, r3
 8001162:	f004 f831 	bl	80051c8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001166:	f107 0308 	add.w	r3, r7, #8
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff f838 	bl	80001e0 <strlen>
 8001170:	4603      	mov	r3, r0
 8001172:	b29a      	uxth	r2, r3
 8001174:	f107 0108 	add.w	r1, r7, #8
 8001178:	230a      	movs	r3, #10
 800117a:	483a      	ldr	r0, [pc, #232]	; (8001264 <printRadioSettings+0x6c0>)
 800117c:	f003 fb7c 	bl	8004878 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8001180:	2014      	movs	r0, #20
 8001182:	f7ff f8e7 	bl	8000354 <NRF24_read_register>
 8001186:	4603      	mov	r3, r0
 8001188:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800118c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001190:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001194:	f107 0308 	add.w	r3, r7, #8
 8001198:	493d      	ldr	r1, [pc, #244]	; (8001290 <printRadioSettings+0x6ec>)
 800119a:	4618      	mov	r0, r3
 800119c:	f004 f814 	bl	80051c8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011a0:	f107 0308 	add.w	r3, r7, #8
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff f81b 	bl	80001e0 <strlen>
 80011aa:	4603      	mov	r3, r0
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	f107 0108 	add.w	r1, r7, #8
 80011b2:	230a      	movs	r3, #10
 80011b4:	482b      	ldr	r0, [pc, #172]	; (8001264 <printRadioSettings+0x6c0>)
 80011b6:	f003 fb5f 	bl	8004878 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 80011ba:	2015      	movs	r0, #21
 80011bc:	f7ff f8ca 	bl	8000354 <NRF24_read_register>
 80011c0:	4603      	mov	r3, r0
 80011c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80011c6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80011ce:	f107 0308 	add.w	r3, r7, #8
 80011d2:	4930      	ldr	r1, [pc, #192]	; (8001294 <printRadioSettings+0x6f0>)
 80011d4:	4618      	mov	r0, r3
 80011d6:	f003 fff7 	bl	80051c8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011da:	f107 0308 	add.w	r3, r7, #8
 80011de:	4618      	mov	r0, r3
 80011e0:	f7fe fffe 	bl	80001e0 <strlen>
 80011e4:	4603      	mov	r3, r0
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	f107 0108 	add.w	r1, r7, #8
 80011ec:	230a      	movs	r3, #10
 80011ee:	481d      	ldr	r0, [pc, #116]	; (8001264 <printRadioSettings+0x6c0>)
 80011f0:	f003 fb42 	bl	8004878 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 80011f4:	2016      	movs	r0, #22
 80011f6:	f7ff f8ad 	bl	8000354 <NRF24_read_register>
 80011fa:	4603      	mov	r3, r0
 80011fc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001200:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001204:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001208:	f107 0308 	add.w	r3, r7, #8
 800120c:	4922      	ldr	r1, [pc, #136]	; (8001298 <printRadioSettings+0x6f4>)
 800120e:	4618      	mov	r0, r3
 8001210:	f003 ffda 	bl	80051c8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001214:	f107 0308 	add.w	r3, r7, #8
 8001218:	4618      	mov	r0, r3
 800121a:	f7fe ffe1 	bl	80001e0 <strlen>
 800121e:	4603      	mov	r3, r0
 8001220:	b29a      	uxth	r2, r3
 8001222:	f107 0108 	add.w	r1, r7, #8
 8001226:	230a      	movs	r3, #10
 8001228:	480e      	ldr	r0, [pc, #56]	; (8001264 <printRadioSettings+0x6c0>)
 800122a:	f003 fb25 	bl	8004878 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 800122e:	201c      	movs	r0, #28
 8001230:	f7ff f890 	bl	8000354 <NRF24_read_register>
 8001234:	4603      	mov	r3, r0
 8001236:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800123a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800123e:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001242:	2b00      	cmp	r3, #0
 8001244:	bfcc      	ite	gt
 8001246:	2301      	movgt	r3, #1
 8001248:	2300      	movle	r3, #0
 800124a:	b2db      	uxtb	r3, r3
 800124c:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800124e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001252:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001256:	2b00      	cmp	r3, #0
 8001258:	bfcc      	ite	gt
 800125a:	2301      	movgt	r3, #1
 800125c:	2300      	movle	r3, #0
 800125e:	e01d      	b.n	800129c <printRadioSettings+0x6f8>
 8001260:	08005cd4 	.word	0x08005cd4
 8001264:	20000100 	.word	0x20000100
 8001268:	08005ce8 	.word	0x08005ce8
 800126c:	08005d18 	.word	0x08005d18
 8001270:	08005d48 	.word	0x08005d48
 8001274:	08005d70 	.word	0x08005d70
 8001278:	08005d98 	.word	0x08005d98
 800127c:	08005dc0 	.word	0x08005dc0
 8001280:	08005de8 	.word	0x08005de8
 8001284:	08005e14 	.word	0x08005e14
 8001288:	08005e30 	.word	0x08005e30
 800128c:	08005e4c 	.word	0x08005e4c
 8001290:	08005e68 	.word	0x08005e68
 8001294:	08005e84 	.word	0x08005e84
 8001298:	08005ea0 	.word	0x08005ea0
 800129c:	b2db      	uxtb	r3, r3
 800129e:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80012a0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012a4:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	bfcc      	ite	gt
 80012ac:	2301      	movgt	r3, #1
 80012ae:	2300      	movle	r3, #0
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80012b4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012b8:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80012bc:	2b00      	cmp	r3, #0
 80012be:	bfcc      	ite	gt
 80012c0:	2301      	movgt	r3, #1
 80012c2:	2300      	movle	r3, #0
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80012c8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012cc:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	bfcc      	ite	gt
 80012d4:	2301      	movgt	r3, #1
 80012d6:	2300      	movle	r3, #0
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80012dc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012e0:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	bfcc      	ite	gt
 80012e8:	2301      	movgt	r3, #1
 80012ea:	2300      	movle	r3, #0
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	f107 0008 	add.w	r0, r7, #8
 80012f2:	9303      	str	r3, [sp, #12]
 80012f4:	9402      	str	r4, [sp, #8]
 80012f6:	9101      	str	r1, [sp, #4]
 80012f8:	9200      	str	r2, [sp, #0]
 80012fa:	4633      	mov	r3, r6
 80012fc:	462a      	mov	r2, r5
 80012fe:	4936      	ldr	r1, [pc, #216]	; (80013d8 <printRadioSettings+0x834>)
 8001300:	f003 ff62 	bl	80051c8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001304:	f107 0308 	add.w	r3, r7, #8
 8001308:	4618      	mov	r0, r3
 800130a:	f7fe ff69 	bl	80001e0 <strlen>
 800130e:	4603      	mov	r3, r0
 8001310:	b29a      	uxth	r2, r3
 8001312:	f107 0108 	add.w	r1, r7, #8
 8001316:	230a      	movs	r3, #10
 8001318:	4830      	ldr	r0, [pc, #192]	; (80013dc <printRadioSettings+0x838>)
 800131a:	f003 faad 	bl	8004878 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 800131e:	201d      	movs	r0, #29
 8001320:	f7ff f818 	bl	8000354 <NRF24_read_register>
 8001324:	4603      	mov	r3, r0
 8001326:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 800132a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800132e:	f003 0304 	and.w	r3, r3, #4
 8001332:	2b00      	cmp	r3, #0
 8001334:	d006      	beq.n	8001344 <printRadioSettings+0x7a0>
 8001336:	f107 0308 	add.w	r3, r7, #8
 800133a:	4929      	ldr	r1, [pc, #164]	; (80013e0 <printRadioSettings+0x83c>)
 800133c:	4618      	mov	r0, r3
 800133e:	f003 ff43 	bl	80051c8 <siprintf>
 8001342:	e005      	b.n	8001350 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001344:	f107 0308 	add.w	r3, r7, #8
 8001348:	4926      	ldr	r1, [pc, #152]	; (80013e4 <printRadioSettings+0x840>)
 800134a:	4618      	mov	r0, r3
 800134c:	f003 ff3c 	bl	80051c8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001350:	f107 0308 	add.w	r3, r7, #8
 8001354:	4618      	mov	r0, r3
 8001356:	f7fe ff43 	bl	80001e0 <strlen>
 800135a:	4603      	mov	r3, r0
 800135c:	b29a      	uxth	r2, r3
 800135e:	f107 0108 	add.w	r1, r7, #8
 8001362:	230a      	movs	r3, #10
 8001364:	481d      	ldr	r0, [pc, #116]	; (80013dc <printRadioSettings+0x838>)
 8001366:	f003 fa87 	bl	8004878 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 800136a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d006      	beq.n	8001384 <printRadioSettings+0x7e0>
 8001376:	f107 0308 	add.w	r3, r7, #8
 800137a:	491b      	ldr	r1, [pc, #108]	; (80013e8 <printRadioSettings+0x844>)
 800137c:	4618      	mov	r0, r3
 800137e:	f003 ff23 	bl	80051c8 <siprintf>
 8001382:	e005      	b.n	8001390 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001384:	f107 0308 	add.w	r3, r7, #8
 8001388:	4918      	ldr	r1, [pc, #96]	; (80013ec <printRadioSettings+0x848>)
 800138a:	4618      	mov	r0, r3
 800138c:	f003 ff1c 	bl	80051c8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001390:	f107 0308 	add.w	r3, r7, #8
 8001394:	4618      	mov	r0, r3
 8001396:	f7fe ff23 	bl	80001e0 <strlen>
 800139a:	4603      	mov	r3, r0
 800139c:	b29a      	uxth	r2, r3
 800139e:	f107 0108 	add.w	r1, r7, #8
 80013a2:	230a      	movs	r3, #10
 80013a4:	480d      	ldr	r0, [pc, #52]	; (80013dc <printRadioSettings+0x838>)
 80013a6:	f003 fa67 	bl	8004878 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80013aa:	f107 0308 	add.w	r3, r7, #8
 80013ae:	4910      	ldr	r1, [pc, #64]	; (80013f0 <printRadioSettings+0x84c>)
 80013b0:	4618      	mov	r0, r3
 80013b2:	f003 ff09 	bl	80051c8 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013b6:	f107 0308 	add.w	r3, r7, #8
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7fe ff10 	bl	80001e0 <strlen>
 80013c0:	4603      	mov	r3, r0
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	f107 0108 	add.w	r1, r7, #8
 80013c8:	230a      	movs	r3, #10
 80013ca:	4804      	ldr	r0, [pc, #16]	; (80013dc <printRadioSettings+0x838>)
 80013cc:	f003 fa54 	bl	8004878 <HAL_UART_Transmit>
}
 80013d0:	bf00      	nop
 80013d2:	3774      	adds	r7, #116	; 0x74
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013d8:	08005ebc 	.word	0x08005ebc
 80013dc:	20000100 	.word	0x20000100
 80013e0:	08005f08 	.word	0x08005f08
 80013e4:	08005f20 	.word	0x08005f20
 80013e8:	08005f38 	.word	0x08005f38
 80013ec:	08005f54 	.word	0x08005f54
 80013f0:	08005b28 	.word	0x08005b28

080013f4 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 80013f4:	b084      	sub	sp, #16
 80013f6:	b580      	push	{r7, lr}
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	f107 0c08 	add.w	ip, r7, #8
 80013fe:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8001402:	4b07      	ldr	r3, [pc, #28]	; (8001420 <nrf24_DebugUART_Init+0x2c>)
 8001404:	4618      	mov	r0, r3
 8001406:	f107 0308 	add.w	r3, r7, #8
 800140a:	2288      	movs	r2, #136	; 0x88
 800140c:	4619      	mov	r1, r3
 800140e:	f003 ff2f 	bl	8005270 <memcpy>
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800141a:	b004      	add	sp, #16
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	20000100 	.word	0x20000100

08001424 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001424:	b590      	push	{r4, r7, lr}
 8001426:	b0ad      	sub	sp, #180	; 0xb4
 8001428:	af1e      	add	r7, sp, #120	; 0x78
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800142a:	f000 fae7 	bl	80019fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800142e:	f000 f88f 	bl	8001550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001432:	f000 f94d 	bl	80016d0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001436:	f000 f8dd 	bl	80015f4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800143a:	f000 f919 	bl	8001670 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  MX_GPIO_Init();
 800143e:	f000 f947 	bl	80016d0 <MX_GPIO_Init>
	/* USER CODE BEGIN 2 */
	NRF24_begin(GPIOB, GPIO_PIN_8, GPIO_PIN_9, hspi1);
 8001442:	4c3c      	ldr	r4, [pc, #240]	; (8001534 <main+0x110>)
 8001444:	4668      	mov	r0, sp
 8001446:	1d23      	adds	r3, r4, #4
 8001448:	2260      	movs	r2, #96	; 0x60
 800144a:	4619      	mov	r1, r3
 800144c:	f003 ff10 	bl	8005270 <memcpy>
 8001450:	6823      	ldr	r3, [r4, #0]
 8001452:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001456:	f44f 7180 	mov.w	r1, #256	; 0x100
 800145a:	4837      	ldr	r0, [pc, #220]	; (8001538 <main+0x114>)
 800145c:	f7ff f862 	bl	8000524 <NRF24_begin>
	nrf24_DebugUART_Init(huart2);
 8001460:	4c36      	ldr	r4, [pc, #216]	; (800153c <main+0x118>)
 8001462:	4668      	mov	r0, sp
 8001464:	f104 0310 	add.w	r3, r4, #16
 8001468:	2278      	movs	r2, #120	; 0x78
 800146a:	4619      	mov	r1, r3
 800146c:	f003 ff00 	bl	8005270 <memcpy>
 8001470:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001474:	f7ff ffbe 	bl	80013f4 <nrf24_DebugUART_Init>

	NRF24_setAutoAck(false);
 8001478:	2000      	movs	r0, #0
 800147a:	f7ff fa75 	bl	8000968 <NRF24_setAutoAck>
	NRF24_setChannel(52);
 800147e:	2034      	movs	r0, #52	; 0x34
 8001480:	f7ff f9e7 	bl	8000852 <NRF24_setChannel>
	NRF24_setPayloadSize(6);
 8001484:	2006      	movs	r0, #6
 8001486:	f7ff f9f9 	bl	800087c <NRF24_setPayloadSize>
	NRF24_openReadingPipe(1, RxpipeAddrs);
 800148a:	4b2d      	ldr	r3, [pc, #180]	; (8001540 <main+0x11c>)
 800148c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001490:	2001      	movs	r0, #1
 8001492:	f7ff f975 	bl	8000780 <NRF24_openReadingPipe>
	NRF24_enableDynamicPayloads();
 8001496:	f7ff fa1d 	bl	80008d4 <NRF24_enableDynamicPayloads>
	//NRF24_enableAckPayload();
	NRF24_startListening();
 800149a:	f7ff f923 	bl	80006e4 <NRF24_startListening>

	printRadioSettings();
 800149e:	f7ff fb81 	bl	8000ba4 <printRadioSettings>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  char myRxData[50] = "";
 80014a2:	2300      	movs	r3, #0
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	f107 0308 	add.w	r3, r7, #8
 80014aa:	222e      	movs	r2, #46	; 0x2e
 80014ac:	2100      	movs	r1, #0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f003 feaa 	bl	8005208 <memset>
	  if(NRF24_available())
 80014b4:	f7ff f93c 	bl	8000730 <NRF24_available>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f1      	beq.n	80014a2 <main+0x7e>
		{
			NRF24_read(buffer, 6);
 80014be:	2106      	movs	r1, #6
 80014c0:	4820      	ldr	r0, [pc, #128]	; (8001544 <main+0x120>)
 80014c2:	f7ff f93d 	bl	8000740 <NRF24_read>
			if(buffer[0] == 0xFF && buffer[1] == 0xFF){
 80014c6:	4b1f      	ldr	r3, [pc, #124]	; (8001544 <main+0x120>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2bff      	cmp	r3, #255	; 0xff
 80014cc:	d10a      	bne.n	80014e4 <main+0xc0>
 80014ce:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <main+0x120>)
 80014d0:	785b      	ldrb	r3, [r3, #1]
 80014d2:	2bff      	cmp	r3, #255	; 0xff
 80014d4:	d106      	bne.n	80014e4 <main+0xc0>
				snprintf(myRxData, 32, "Coordinates not found\r\n");
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	4a1b      	ldr	r2, [pc, #108]	; (8001548 <main+0x124>)
 80014da:	2120      	movs	r1, #32
 80014dc:	4618      	mov	r0, r3
 80014de:	f003 fe3f 	bl	8005160 <sniprintf>
			if(buffer[0] == 0xFF && buffer[1] == 0xFF){
 80014e2:	e01a      	b.n	800151a <main+0xf6>
			}
			else{
				snprintf(myRxData, 32, "%u %u %u \r\n", (buffer[0]<<8|buffer[1]), (buffer[2]<<8|buffer[3]), (buffer[4]<<8|buffer[5]));
 80014e4:	4b17      	ldr	r3, [pc, #92]	; (8001544 <main+0x120>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	021b      	lsls	r3, r3, #8
 80014ea:	4a16      	ldr	r2, [pc, #88]	; (8001544 <main+0x120>)
 80014ec:	7852      	ldrb	r2, [r2, #1]
 80014ee:	ea43 0102 	orr.w	r1, r3, r2
 80014f2:	4b14      	ldr	r3, [pc, #80]	; (8001544 <main+0x120>)
 80014f4:	789b      	ldrb	r3, [r3, #2]
 80014f6:	021b      	lsls	r3, r3, #8
 80014f8:	4a12      	ldr	r2, [pc, #72]	; (8001544 <main+0x120>)
 80014fa:	78d2      	ldrb	r2, [r2, #3]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	4a11      	ldr	r2, [pc, #68]	; (8001544 <main+0x120>)
 8001500:	7912      	ldrb	r2, [r2, #4]
 8001502:	0212      	lsls	r2, r2, #8
 8001504:	480f      	ldr	r0, [pc, #60]	; (8001544 <main+0x120>)
 8001506:	7940      	ldrb	r0, [r0, #5]
 8001508:	4302      	orrs	r2, r0
 800150a:	1d38      	adds	r0, r7, #4
 800150c:	9201      	str	r2, [sp, #4]
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	460b      	mov	r3, r1
 8001512:	4a0e      	ldr	r2, [pc, #56]	; (800154c <main+0x128>)
 8001514:	2120      	movs	r1, #32
 8001516:	f003 fe23 	bl	8005160 <sniprintf>
			}
			//NRF24_writeAckPayload(1, myAckPayload, 32);
			HAL_UART_Transmit(&huart2, (uint8_t *)myRxData, strlen(myRxData), 10);
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	4618      	mov	r0, r3
 800151e:	f7fe fe5f 	bl	80001e0 <strlen>
 8001522:	4603      	mov	r3, r0
 8001524:	b29a      	uxth	r2, r3
 8001526:	1d39      	adds	r1, r7, #4
 8001528:	230a      	movs	r3, #10
 800152a:	4804      	ldr	r0, [pc, #16]	; (800153c <main+0x118>)
 800152c:	f003 f9a4 	bl	8004878 <HAL_UART_Transmit>
  {
 8001530:	e7b7      	b.n	80014a2 <main+0x7e>
 8001532:	bf00      	nop
 8001534:	20000188 	.word	0x20000188
 8001538:	48000400 	.word	0x48000400
 800153c:	200001ec 	.word	0x200001ec
 8001540:	20000000 	.word	0x20000000
 8001544:	20000274 	.word	0x20000274
 8001548:	0800606c 	.word	0x0800606c
 800154c:	08006084 	.word	0x08006084

08001550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b0a6      	sub	sp, #152	; 0x98
 8001554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001556:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800155a:	2228      	movs	r2, #40	; 0x28
 800155c:	2100      	movs	r1, #0
 800155e:	4618      	mov	r0, r3
 8001560:	f003 fe52 	bl	8005208 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001564:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001574:	1d3b      	adds	r3, r7, #4
 8001576:	2258      	movs	r2, #88	; 0x58
 8001578:	2100      	movs	r1, #0
 800157a:	4618      	mov	r0, r3
 800157c:	f003 fe44 	bl	8005208 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001580:	2302      	movs	r3, #2
 8001582:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001584:	2301      	movs	r3, #1
 8001586:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001588:	2310      	movs	r3, #16
 800158a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800158e:	2300      	movs	r3, #0
 8001590:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001594:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001598:	4618      	mov	r0, r3
 800159a:	f000 fd41 	bl	8002020 <HAL_RCC_OscConfig>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80015a4:	f000 f8e0 	bl	8001768 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015a8:	230f      	movs	r3, #15
 80015aa:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015ac:	2300      	movs	r3, #0
 80015ae:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015b0:	2300      	movs	r3, #0
 80015b2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015b4:	2300      	movs	r3, #0
 80015b6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015b8:	2300      	movs	r3, #0
 80015ba:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015bc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80015c0:	2100      	movs	r1, #0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f001 fd80 	bl	80030c8 <HAL_RCC_ClockConfig>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80015ce:	f000 f8cb 	bl	8001768 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015d2:	2302      	movs	r3, #2
 80015d4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	4618      	mov	r0, r3
 80015de:	f001 ffa9 	bl	8003534 <HAL_RCCEx_PeriphCLKConfig>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80015e8:	f000 f8be 	bl	8001768 <Error_Handler>
  }
}
 80015ec:	bf00      	nop
 80015ee:	3798      	adds	r7, #152	; 0x98
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015f8:	4b1b      	ldr	r3, [pc, #108]	; (8001668 <MX_SPI1_Init+0x74>)
 80015fa:	4a1c      	ldr	r2, [pc, #112]	; (800166c <MX_SPI1_Init+0x78>)
 80015fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015fe:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <MX_SPI1_Init+0x74>)
 8001600:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001604:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001606:	4b18      	ldr	r3, [pc, #96]	; (8001668 <MX_SPI1_Init+0x74>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800160c:	4b16      	ldr	r3, [pc, #88]	; (8001668 <MX_SPI1_Init+0x74>)
 800160e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001612:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001614:	4b14      	ldr	r3, [pc, #80]	; (8001668 <MX_SPI1_Init+0x74>)
 8001616:	2200      	movs	r2, #0
 8001618:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800161a:	4b13      	ldr	r3, [pc, #76]	; (8001668 <MX_SPI1_Init+0x74>)
 800161c:	2200      	movs	r2, #0
 800161e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001620:	4b11      	ldr	r3, [pc, #68]	; (8001668 <MX_SPI1_Init+0x74>)
 8001622:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001626:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001628:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <MX_SPI1_Init+0x74>)
 800162a:	2200      	movs	r2, #0
 800162c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800162e:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <MX_SPI1_Init+0x74>)
 8001630:	2200      	movs	r2, #0
 8001632:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <MX_SPI1_Init+0x74>)
 8001636:	2200      	movs	r2, #0
 8001638:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800163a:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <MX_SPI1_Init+0x74>)
 800163c:	2200      	movs	r2, #0
 800163e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001640:	4b09      	ldr	r3, [pc, #36]	; (8001668 <MX_SPI1_Init+0x74>)
 8001642:	2207      	movs	r2, #7
 8001644:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001646:	4b08      	ldr	r3, [pc, #32]	; (8001668 <MX_SPI1_Init+0x74>)
 8001648:	2200      	movs	r2, #0
 800164a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <MX_SPI1_Init+0x74>)
 800164e:	2208      	movs	r2, #8
 8001650:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001652:	4805      	ldr	r0, [pc, #20]	; (8001668 <MX_SPI1_Init+0x74>)
 8001654:	f002 f98c 	bl	8003970 <HAL_SPI_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800165e:	f000 f883 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000188 	.word	0x20000188
 800166c:	40013000 	.word	0x40013000

08001670 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001674:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <MX_USART2_UART_Init+0x58>)
 8001676:	4a15      	ldr	r2, [pc, #84]	; (80016cc <MX_USART2_UART_Init+0x5c>)
 8001678:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800167a:	4b13      	ldr	r3, [pc, #76]	; (80016c8 <MX_USART2_UART_Init+0x58>)
 800167c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001680:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001682:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <MX_USART2_UART_Init+0x58>)
 8001684:	2200      	movs	r2, #0
 8001686:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001688:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <MX_USART2_UART_Init+0x58>)
 800168a:	2200      	movs	r2, #0
 800168c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800168e:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <MX_USART2_UART_Init+0x58>)
 8001690:	2200      	movs	r2, #0
 8001692:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001694:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <MX_USART2_UART_Init+0x58>)
 8001696:	220c      	movs	r2, #12
 8001698:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800169a:	4b0b      	ldr	r3, [pc, #44]	; (80016c8 <MX_USART2_UART_Init+0x58>)
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a0:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <MX_USART2_UART_Init+0x58>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016a6:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <MX_USART2_UART_Init+0x58>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <MX_USART2_UART_Init+0x58>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016b2:	4805      	ldr	r0, [pc, #20]	; (80016c8 <MX_USART2_UART_Init+0x58>)
 80016b4:	f003 f892 	bl	80047dc <HAL_UART_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80016be:	f000 f853 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200001ec 	.word	0x200001ec
 80016cc:	40004400 	.word	0x40004400

080016d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b088      	sub	sp, #32
 80016d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d6:	f107 030c 	add.w	r3, r7, #12
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	609a      	str	r2, [r3, #8]
 80016e2:	60da      	str	r2, [r3, #12]
 80016e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016e6:	4b1e      	ldr	r3, [pc, #120]	; (8001760 <MX_GPIO_Init+0x90>)
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	4a1d      	ldr	r2, [pc, #116]	; (8001760 <MX_GPIO_Init+0x90>)
 80016ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016f0:	6153      	str	r3, [r2, #20]
 80016f2:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <MX_GPIO_Init+0x90>)
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fe:	4b18      	ldr	r3, [pc, #96]	; (8001760 <MX_GPIO_Init+0x90>)
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	4a17      	ldr	r2, [pc, #92]	; (8001760 <MX_GPIO_Init+0x90>)
 8001704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001708:	6153      	str	r3, [r2, #20]
 800170a:	4b15      	ldr	r3, [pc, #84]	; (8001760 <MX_GPIO_Init+0x90>)
 800170c:	695b      	ldr	r3, [r3, #20]
 800170e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001712:	607b      	str	r3, [r7, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001716:	4b12      	ldr	r3, [pc, #72]	; (8001760 <MX_GPIO_Init+0x90>)
 8001718:	695b      	ldr	r3, [r3, #20]
 800171a:	4a11      	ldr	r2, [pc, #68]	; (8001760 <MX_GPIO_Init+0x90>)
 800171c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001720:	6153      	str	r3, [r2, #20]
 8001722:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <MX_GPIO_Init+0x90>)
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800172a:	603b      	str	r3, [r7, #0]
 800172c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CSN_Pin|CE_Pin, GPIO_PIN_RESET);
 800172e:	2200      	movs	r2, #0
 8001730:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001734:	480b      	ldr	r0, [pc, #44]	; (8001764 <MX_GPIO_Init+0x94>)
 8001736:	f000 fc5b 	bl	8001ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CSN_Pin CE_Pin */
  GPIO_InitStruct.Pin = CSN_Pin|CE_Pin;
 800173a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800173e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001740:	2301      	movs	r3, #1
 8001742:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001748:	2300      	movs	r3, #0
 800174a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174c:	f107 030c 	add.w	r3, r7, #12
 8001750:	4619      	mov	r1, r3
 8001752:	4804      	ldr	r0, [pc, #16]	; (8001764 <MX_GPIO_Init+0x94>)
 8001754:	f000 fac2 	bl	8001cdc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001758:	bf00      	nop
 800175a:	3720      	adds	r7, #32
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40021000 	.word	0x40021000
 8001764:	48000400 	.word	0x48000400

08001768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800176c:	b672      	cpsid	i
}
 800176e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001770:	e7fe      	b.n	8001770 <Error_Handler+0x8>
	...

08001774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800177a:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <HAL_MspInit+0x44>)
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	4a0e      	ldr	r2, [pc, #56]	; (80017b8 <HAL_MspInit+0x44>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6193      	str	r3, [r2, #24]
 8001786:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <HAL_MspInit+0x44>)
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <HAL_MspInit+0x44>)
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	4a08      	ldr	r2, [pc, #32]	; (80017b8 <HAL_MspInit+0x44>)
 8001798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800179c:	61d3      	str	r3, [r2, #28]
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <HAL_MspInit+0x44>)
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a6:	603b      	str	r3, [r7, #0]
 80017a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	40021000 	.word	0x40021000

080017bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08a      	sub	sp, #40	; 0x28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a17      	ldr	r2, [pc, #92]	; (8001838 <HAL_SPI_MspInit+0x7c>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d128      	bne.n	8001830 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017de:	4b17      	ldr	r3, [pc, #92]	; (800183c <HAL_SPI_MspInit+0x80>)
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	4a16      	ldr	r2, [pc, #88]	; (800183c <HAL_SPI_MspInit+0x80>)
 80017e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017e8:	6193      	str	r3, [r2, #24]
 80017ea:	4b14      	ldr	r3, [pc, #80]	; (800183c <HAL_SPI_MspInit+0x80>)
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f6:	4b11      	ldr	r3, [pc, #68]	; (800183c <HAL_SPI_MspInit+0x80>)
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	4a10      	ldr	r2, [pc, #64]	; (800183c <HAL_SPI_MspInit+0x80>)
 80017fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001800:	6153      	str	r3, [r2, #20]
 8001802:	4b0e      	ldr	r3, [pc, #56]	; (800183c <HAL_SPI_MspInit+0x80>)
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800180e:	23e0      	movs	r3, #224	; 0xe0
 8001810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	2302      	movs	r3, #2
 8001814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800181a:	2303      	movs	r3, #3
 800181c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800181e:	2305      	movs	r3, #5
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001822:	f107 0314 	add.w	r3, r7, #20
 8001826:	4619      	mov	r1, r3
 8001828:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800182c:	f000 fa56 	bl	8001cdc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001830:	bf00      	nop
 8001832:	3728      	adds	r7, #40	; 0x28
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40013000 	.word	0x40013000
 800183c:	40021000 	.word	0x40021000

08001840 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08a      	sub	sp, #40	; 0x28
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a17      	ldr	r2, [pc, #92]	; (80018bc <HAL_UART_MspInit+0x7c>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d128      	bne.n	80018b4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001862:	4b17      	ldr	r3, [pc, #92]	; (80018c0 <HAL_UART_MspInit+0x80>)
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	4a16      	ldr	r2, [pc, #88]	; (80018c0 <HAL_UART_MspInit+0x80>)
 8001868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800186c:	61d3      	str	r3, [r2, #28]
 800186e:	4b14      	ldr	r3, [pc, #80]	; (80018c0 <HAL_UART_MspInit+0x80>)
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187a:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <HAL_UART_MspInit+0x80>)
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	4a10      	ldr	r2, [pc, #64]	; (80018c0 <HAL_UART_MspInit+0x80>)
 8001880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001884:	6153      	str	r3, [r2, #20]
 8001886:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <HAL_UART_MspInit+0x80>)
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001892:	230c      	movs	r3, #12
 8001894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001896:	2302      	movs	r3, #2
 8001898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800189e:	2303      	movs	r3, #3
 80018a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018a2:	2307      	movs	r3, #7
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a6:	f107 0314 	add.w	r3, r7, #20
 80018aa:	4619      	mov	r1, r3
 80018ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018b0:	f000 fa14 	bl	8001cdc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018b4:	bf00      	nop
 80018b6:	3728      	adds	r7, #40	; 0x28
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40004400 	.word	0x40004400
 80018c0:	40021000 	.word	0x40021000

080018c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018c8:	e7fe      	b.n	80018c8 <NMI_Handler+0x4>

080018ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ce:	e7fe      	b.n	80018ce <HardFault_Handler+0x4>

080018d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d4:	e7fe      	b.n	80018d4 <MemManage_Handler+0x4>

080018d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018da:	e7fe      	b.n	80018da <BusFault_Handler+0x4>

080018dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e0:	e7fe      	b.n	80018e0 <UsageFault_Handler+0x4>

080018e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001910:	f000 f8ba 	bl	8001a88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}

08001918 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001920:	4a14      	ldr	r2, [pc, #80]	; (8001974 <_sbrk+0x5c>)
 8001922:	4b15      	ldr	r3, [pc, #84]	; (8001978 <_sbrk+0x60>)
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800192c:	4b13      	ldr	r3, [pc, #76]	; (800197c <_sbrk+0x64>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d102      	bne.n	800193a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001934:	4b11      	ldr	r3, [pc, #68]	; (800197c <_sbrk+0x64>)
 8001936:	4a12      	ldr	r2, [pc, #72]	; (8001980 <_sbrk+0x68>)
 8001938:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800193a:	4b10      	ldr	r3, [pc, #64]	; (800197c <_sbrk+0x64>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4413      	add	r3, r2
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	429a      	cmp	r2, r3
 8001946:	d207      	bcs.n	8001958 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001948:	f003 fc66 	bl	8005218 <__errno>
 800194c:	4603      	mov	r3, r0
 800194e:	220c      	movs	r2, #12
 8001950:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001952:	f04f 33ff 	mov.w	r3, #4294967295
 8001956:	e009      	b.n	800196c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <_sbrk+0x64>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800195e:	4b07      	ldr	r3, [pc, #28]	; (800197c <_sbrk+0x64>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	4a05      	ldr	r2, [pc, #20]	; (800197c <_sbrk+0x64>)
 8001968:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800196a:	68fb      	ldr	r3, [r7, #12]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3718      	adds	r7, #24
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20010000 	.word	0x20010000
 8001978:	00000400 	.word	0x00000400
 800197c:	2000027c 	.word	0x2000027c
 8001980:	200003d0 	.word	0x200003d0

08001984 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <SystemInit+0x20>)
 800198a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800198e:	4a05      	ldr	r2, [pc, #20]	; (80019a4 <SystemInit+0x20>)
 8001990:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001994:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80019a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019e0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80019ac:	f7ff ffea 	bl	8001984 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019b0:	480c      	ldr	r0, [pc, #48]	; (80019e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80019b2:	490d      	ldr	r1, [pc, #52]	; (80019e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019b4:	4a0d      	ldr	r2, [pc, #52]	; (80019ec <LoopForever+0xe>)
  movs r3, #0
 80019b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019b8:	e002      	b.n	80019c0 <LoopCopyDataInit>

080019ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019be:	3304      	adds	r3, #4

080019c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c4:	d3f9      	bcc.n	80019ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019c6:	4a0a      	ldr	r2, [pc, #40]	; (80019f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019c8:	4c0a      	ldr	r4, [pc, #40]	; (80019f4 <LoopForever+0x16>)
  movs r3, #0
 80019ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019cc:	e001      	b.n	80019d2 <LoopFillZerobss>

080019ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d0:	3204      	adds	r2, #4

080019d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d4:	d3fb      	bcc.n	80019ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019d6:	f003 fc25 	bl	8005224 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019da:	f7ff fd23 	bl	8001424 <main>

080019de <LoopForever>:

LoopForever:
    b LoopForever
 80019de:	e7fe      	b.n	80019de <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80019e0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80019e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80019ec:	08006114 	.word	0x08006114
  ldr r2, =_sbss
 80019f0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80019f4:	200003cc 	.word	0x200003cc

080019f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019f8:	e7fe      	b.n	80019f8 <ADC1_2_IRQHandler>
	...

080019fc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a00:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <HAL_Init+0x28>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a07      	ldr	r2, [pc, #28]	; (8001a24 <HAL_Init+0x28>)
 8001a06:	f043 0310 	orr.w	r3, r3, #16
 8001a0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a0c:	2003      	movs	r0, #3
 8001a0e:	f000 f931 	bl	8001c74 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a12:	200f      	movs	r0, #15
 8001a14:	f000 f808 	bl	8001a28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a18:	f7ff feac 	bl	8001774 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40022000 	.word	0x40022000

08001a28 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a30:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <HAL_InitTick+0x54>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <HAL_InitTick+0x58>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a46:	4618      	mov	r0, r3
 8001a48:	f000 f93b 	bl	8001cc2 <HAL_SYSTICK_Config>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e00e      	b.n	8001a74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b0f      	cmp	r3, #15
 8001a5a:	d80a      	bhi.n	8001a72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	f04f 30ff 	mov.w	r0, #4294967295
 8001a64:	f000 f911 	bl	8001c8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a68:	4a06      	ldr	r2, [pc, #24]	; (8001a84 <HAL_InitTick+0x5c>)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	e000      	b.n	8001a74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20000008 	.word	0x20000008
 8001a80:	20000010 	.word	0x20000010
 8001a84:	2000000c 	.word	0x2000000c

08001a88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <HAL_IncTick+0x20>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	461a      	mov	r2, r3
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_IncTick+0x24>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4413      	add	r3, r2
 8001a98:	4a04      	ldr	r2, [pc, #16]	; (8001aac <HAL_IncTick+0x24>)
 8001a9a:	6013      	str	r3, [r2, #0]
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	20000010 	.word	0x20000010
 8001aac:	20000280 	.word	0x20000280

08001ab0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return uwTick;  
 8001ab4:	4b03      	ldr	r3, [pc, #12]	; (8001ac4 <HAL_GetTick+0x14>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	20000280 	.word	0x20000280

08001ac8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ad0:	f7ff ffee 	bl	8001ab0 <HAL_GetTick>
 8001ad4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae0:	d005      	beq.n	8001aee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <HAL_Delay+0x44>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4413      	add	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001aee:	bf00      	nop
 8001af0:	f7ff ffde 	bl	8001ab0 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d8f7      	bhi.n	8001af0 <HAL_Delay+0x28>
  {
  }
}
 8001b00:	bf00      	nop
 8001b02:	bf00      	nop
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000010 	.word	0x20000010

08001b10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b20:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <__NVIC_SetPriorityGrouping+0x44>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b42:	4a04      	ldr	r2, [pc, #16]	; (8001b54 <__NVIC_SetPriorityGrouping+0x44>)
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	60d3      	str	r3, [r2, #12]
}
 8001b48:	bf00      	nop
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b5c:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <__NVIC_GetPriorityGrouping+0x18>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	0a1b      	lsrs	r3, r3, #8
 8001b62:	f003 0307 	and.w	r3, r3, #7
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	6039      	str	r1, [r7, #0]
 8001b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	db0a      	blt.n	8001b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	490c      	ldr	r1, [pc, #48]	; (8001bc0 <__NVIC_SetPriority+0x4c>)
 8001b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b92:	0112      	lsls	r2, r2, #4
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	440b      	add	r3, r1
 8001b98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b9c:	e00a      	b.n	8001bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	b2da      	uxtb	r2, r3
 8001ba2:	4908      	ldr	r1, [pc, #32]	; (8001bc4 <__NVIC_SetPriority+0x50>)
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	3b04      	subs	r3, #4
 8001bac:	0112      	lsls	r2, r2, #4
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	440b      	add	r3, r1
 8001bb2:	761a      	strb	r2, [r3, #24]
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	e000e100 	.word	0xe000e100
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b089      	sub	sp, #36	; 0x24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	f1c3 0307 	rsb	r3, r3, #7
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	bf28      	it	cs
 8001be6:	2304      	movcs	r3, #4
 8001be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	3304      	adds	r3, #4
 8001bee:	2b06      	cmp	r3, #6
 8001bf0:	d902      	bls.n	8001bf8 <NVIC_EncodePriority+0x30>
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3b03      	subs	r3, #3
 8001bf6:	e000      	b.n	8001bfa <NVIC_EncodePriority+0x32>
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43da      	mvns	r2, r3
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	401a      	ands	r2, r3
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c10:	f04f 31ff 	mov.w	r1, #4294967295
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1a:	43d9      	mvns	r1, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c20:	4313      	orrs	r3, r2
         );
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3724      	adds	r7, #36	; 0x24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
	...

08001c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c40:	d301      	bcc.n	8001c46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c42:	2301      	movs	r3, #1
 8001c44:	e00f      	b.n	8001c66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c46:	4a0a      	ldr	r2, [pc, #40]	; (8001c70 <SysTick_Config+0x40>)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c4e:	210f      	movs	r1, #15
 8001c50:	f04f 30ff 	mov.w	r0, #4294967295
 8001c54:	f7ff ff8e 	bl	8001b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c58:	4b05      	ldr	r3, [pc, #20]	; (8001c70 <SysTick_Config+0x40>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c5e:	4b04      	ldr	r3, [pc, #16]	; (8001c70 <SysTick_Config+0x40>)
 8001c60:	2207      	movs	r2, #7
 8001c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	e000e010 	.word	0xe000e010

08001c74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f7ff ff47 	bl	8001b10 <__NVIC_SetPriorityGrouping>
}
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b086      	sub	sp, #24
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	4603      	mov	r3, r0
 8001c92:	60b9      	str	r1, [r7, #8]
 8001c94:	607a      	str	r2, [r7, #4]
 8001c96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c9c:	f7ff ff5c 	bl	8001b58 <__NVIC_GetPriorityGrouping>
 8001ca0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	68b9      	ldr	r1, [r7, #8]
 8001ca6:	6978      	ldr	r0, [r7, #20]
 8001ca8:	f7ff ff8e 	bl	8001bc8 <NVIC_EncodePriority>
 8001cac:	4602      	mov	r2, r0
 8001cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cb2:	4611      	mov	r1, r2
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ff5d 	bl	8001b74 <__NVIC_SetPriority>
}
 8001cba:	bf00      	nop
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff ffb0 	bl	8001c30 <SysTick_Config>
 8001cd0:	4603      	mov	r3, r0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
	...

08001cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b087      	sub	sp, #28
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cea:	e160      	b.n	8001fae <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f000 8152 	beq.w	8001fa8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f003 0303 	and.w	r3, r3, #3
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d005      	beq.n	8001d1c <HAL_GPIO_Init+0x40>
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 0303 	and.w	r3, r3, #3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d130      	bne.n	8001d7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	2203      	movs	r2, #3
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	4013      	ands	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	68da      	ldr	r2, [r3, #12]
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d52:	2201      	movs	r2, #1
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	091b      	lsrs	r3, r3, #4
 8001d68:	f003 0201 	and.w	r2, r3, #1
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	2b03      	cmp	r3, #3
 8001d88:	d017      	beq.n	8001dba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	2203      	movs	r2, #3
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	689a      	ldr	r2, [r3, #8]
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d123      	bne.n	8001e0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	08da      	lsrs	r2, r3, #3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	3208      	adds	r2, #8
 8001dce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	220f      	movs	r2, #15
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	4013      	ands	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	691a      	ldr	r2, [r3, #16]
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	08da      	lsrs	r2, r3, #3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3208      	adds	r2, #8
 8001e08:	6939      	ldr	r1, [r7, #16]
 8001e0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	2203      	movs	r2, #3
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	4013      	ands	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f003 0203 	and.w	r2, r3, #3
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 80ac 	beq.w	8001fa8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e50:	4b5e      	ldr	r3, [pc, #376]	; (8001fcc <HAL_GPIO_Init+0x2f0>)
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	4a5d      	ldr	r2, [pc, #372]	; (8001fcc <HAL_GPIO_Init+0x2f0>)
 8001e56:	f043 0301 	orr.w	r3, r3, #1
 8001e5a:	6193      	str	r3, [r2, #24]
 8001e5c:	4b5b      	ldr	r3, [pc, #364]	; (8001fcc <HAL_GPIO_Init+0x2f0>)
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	60bb      	str	r3, [r7, #8]
 8001e66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e68:	4a59      	ldr	r2, [pc, #356]	; (8001fd0 <HAL_GPIO_Init+0x2f4>)
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	089b      	lsrs	r3, r3, #2
 8001e6e:	3302      	adds	r3, #2
 8001e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	f003 0303 	and.w	r3, r3, #3
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	220f      	movs	r2, #15
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e92:	d025      	beq.n	8001ee0 <HAL_GPIO_Init+0x204>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a4f      	ldr	r2, [pc, #316]	; (8001fd4 <HAL_GPIO_Init+0x2f8>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d01f      	beq.n	8001edc <HAL_GPIO_Init+0x200>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a4e      	ldr	r2, [pc, #312]	; (8001fd8 <HAL_GPIO_Init+0x2fc>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d019      	beq.n	8001ed8 <HAL_GPIO_Init+0x1fc>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a4d      	ldr	r2, [pc, #308]	; (8001fdc <HAL_GPIO_Init+0x300>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d013      	beq.n	8001ed4 <HAL_GPIO_Init+0x1f8>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a4c      	ldr	r2, [pc, #304]	; (8001fe0 <HAL_GPIO_Init+0x304>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d00d      	beq.n	8001ed0 <HAL_GPIO_Init+0x1f4>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a4b      	ldr	r2, [pc, #300]	; (8001fe4 <HAL_GPIO_Init+0x308>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d007      	beq.n	8001ecc <HAL_GPIO_Init+0x1f0>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a4a      	ldr	r2, [pc, #296]	; (8001fe8 <HAL_GPIO_Init+0x30c>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d101      	bne.n	8001ec8 <HAL_GPIO_Init+0x1ec>
 8001ec4:	2306      	movs	r3, #6
 8001ec6:	e00c      	b.n	8001ee2 <HAL_GPIO_Init+0x206>
 8001ec8:	2307      	movs	r3, #7
 8001eca:	e00a      	b.n	8001ee2 <HAL_GPIO_Init+0x206>
 8001ecc:	2305      	movs	r3, #5
 8001ece:	e008      	b.n	8001ee2 <HAL_GPIO_Init+0x206>
 8001ed0:	2304      	movs	r3, #4
 8001ed2:	e006      	b.n	8001ee2 <HAL_GPIO_Init+0x206>
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e004      	b.n	8001ee2 <HAL_GPIO_Init+0x206>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	e002      	b.n	8001ee2 <HAL_GPIO_Init+0x206>
 8001edc:	2301      	movs	r3, #1
 8001ede:	e000      	b.n	8001ee2 <HAL_GPIO_Init+0x206>
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	f002 0203 	and.w	r2, r2, #3
 8001ee8:	0092      	lsls	r2, r2, #2
 8001eea:	4093      	lsls	r3, r2
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ef2:	4937      	ldr	r1, [pc, #220]	; (8001fd0 <HAL_GPIO_Init+0x2f4>)
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	089b      	lsrs	r3, r3, #2
 8001ef8:	3302      	adds	r3, #2
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f00:	4b3a      	ldr	r3, [pc, #232]	; (8001fec <HAL_GPIO_Init+0x310>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d003      	beq.n	8001f24 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f24:	4a31      	ldr	r2, [pc, #196]	; (8001fec <HAL_GPIO_Init+0x310>)
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f2a:	4b30      	ldr	r3, [pc, #192]	; (8001fec <HAL_GPIO_Init+0x310>)
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	43db      	mvns	r3, r3
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	4013      	ands	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f4e:	4a27      	ldr	r2, [pc, #156]	; (8001fec <HAL_GPIO_Init+0x310>)
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f54:	4b25      	ldr	r3, [pc, #148]	; (8001fec <HAL_GPIO_Init+0x310>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	4013      	ands	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d003      	beq.n	8001f78 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f78:	4a1c      	ldr	r2, [pc, #112]	; (8001fec <HAL_GPIO_Init+0x310>)
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f7e:	4b1b      	ldr	r3, [pc, #108]	; (8001fec <HAL_GPIO_Init+0x310>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	43db      	mvns	r3, r3
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001fa2:	4a12      	ldr	r2, [pc, #72]	; (8001fec <HAL_GPIO_Init+0x310>)
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	3301      	adds	r3, #1
 8001fac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f47f ae97 	bne.w	8001cec <HAL_GPIO_Init+0x10>
  }
}
 8001fbe:	bf00      	nop
 8001fc0:	bf00      	nop
 8001fc2:	371c      	adds	r7, #28
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	40010000 	.word	0x40010000
 8001fd4:	48000400 	.word	0x48000400
 8001fd8:	48000800 	.word	0x48000800
 8001fdc:	48000c00 	.word	0x48000c00
 8001fe0:	48001000 	.word	0x48001000
 8001fe4:	48001400 	.word	0x48001400
 8001fe8:	48001800 	.word	0x48001800
 8001fec:	40010400 	.word	0x40010400

08001ff0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	807b      	strh	r3, [r7, #2]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002000:	787b      	ldrb	r3, [r7, #1]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002006:	887a      	ldrh	r2, [r7, #2]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800200c:	e002      	b.n	8002014 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800200e:	887a      	ldrh	r2, [r7, #2]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002026:	af00      	add	r7, sp, #0
 8002028:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800202c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002030:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002032:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002036:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d102      	bne.n	8002046 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	f001 b83a 	b.w	80030ba <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002046:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800204a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	f000 816f 	beq.w	800233a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800205c:	4bb5      	ldr	r3, [pc, #724]	; (8002334 <HAL_RCC_OscConfig+0x314>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 030c 	and.w	r3, r3, #12
 8002064:	2b04      	cmp	r3, #4
 8002066:	d00c      	beq.n	8002082 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002068:	4bb2      	ldr	r3, [pc, #712]	; (8002334 <HAL_RCC_OscConfig+0x314>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 030c 	and.w	r3, r3, #12
 8002070:	2b08      	cmp	r3, #8
 8002072:	d15c      	bne.n	800212e <HAL_RCC_OscConfig+0x10e>
 8002074:	4baf      	ldr	r3, [pc, #700]	; (8002334 <HAL_RCC_OscConfig+0x314>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800207c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002080:	d155      	bne.n	800212e <HAL_RCC_OscConfig+0x10e>
 8002082:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002086:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800208e:	fa93 f3a3 	rbit	r3, r3
 8002092:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002096:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800209a:	fab3 f383 	clz	r3, r3
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	095b      	lsrs	r3, r3, #5
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d102      	bne.n	80020b4 <HAL_RCC_OscConfig+0x94>
 80020ae:	4ba1      	ldr	r3, [pc, #644]	; (8002334 <HAL_RCC_OscConfig+0x314>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	e015      	b.n	80020e0 <HAL_RCC_OscConfig+0xc0>
 80020b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020b8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020bc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80020c0:	fa93 f3a3 	rbit	r3, r3
 80020c4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80020c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020cc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80020d0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80020d4:	fa93 f3a3 	rbit	r3, r3
 80020d8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80020dc:	4b95      	ldr	r3, [pc, #596]	; (8002334 <HAL_RCC_OscConfig+0x314>)
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020e4:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80020e8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80020ec:	fa92 f2a2 	rbit	r2, r2
 80020f0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80020f4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80020f8:	fab2 f282 	clz	r2, r2
 80020fc:	b2d2      	uxtb	r2, r2
 80020fe:	f042 0220 	orr.w	r2, r2, #32
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	f002 021f 	and.w	r2, r2, #31
 8002108:	2101      	movs	r1, #1
 800210a:	fa01 f202 	lsl.w	r2, r1, r2
 800210e:	4013      	ands	r3, r2
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 8111 	beq.w	8002338 <HAL_RCC_OscConfig+0x318>
 8002116:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800211a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	f040 8108 	bne.w	8002338 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	f000 bfc6 	b.w	80030ba <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800212e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002132:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800213e:	d106      	bne.n	800214e <HAL_RCC_OscConfig+0x12e>
 8002140:	4b7c      	ldr	r3, [pc, #496]	; (8002334 <HAL_RCC_OscConfig+0x314>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a7b      	ldr	r2, [pc, #492]	; (8002334 <HAL_RCC_OscConfig+0x314>)
 8002146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800214a:	6013      	str	r3, [r2, #0]
 800214c:	e036      	b.n	80021bc <HAL_RCC_OscConfig+0x19c>
 800214e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002152:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10c      	bne.n	8002178 <HAL_RCC_OscConfig+0x158>
 800215e:	4b75      	ldr	r3, [pc, #468]	; (8002334 <HAL_RCC_OscConfig+0x314>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a74      	ldr	r2, [pc, #464]	; (8002334 <HAL_RCC_OscConfig+0x314>)
 8002164:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	4b72      	ldr	r3, [pc, #456]	; (8002334 <HAL_RCC_OscConfig+0x314>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a71      	ldr	r2, [pc, #452]	; (8002334 <HAL_RCC_OscConfig+0x314>)
 8002170:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	e021      	b.n	80021bc <HAL_RCC_OscConfig+0x19c>
 8002178:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800217c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002188:	d10c      	bne.n	80021a4 <HAL_RCC_OscConfig+0x184>
 800218a:	4b6a      	ldr	r3, [pc, #424]	; (8002334 <HAL_RCC_OscConfig+0x314>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a69      	ldr	r2, [pc, #420]	; (8002334 <HAL_RCC_OscConfig+0x314>)
 8002190:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	4b67      	ldr	r3, [pc, #412]	; (8002334 <HAL_RCC_OscConfig+0x314>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a66      	ldr	r2, [pc, #408]	; (8002334 <HAL_RCC_OscConfig+0x314>)
 800219c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	e00b      	b.n	80021bc <HAL_RCC_OscConfig+0x19c>
 80021a4:	4b63      	ldr	r3, [pc, #396]	; (8002334 <HAL_RCC_OscConfig+0x314>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a62      	ldr	r2, [pc, #392]	; (8002334 <HAL_RCC_OscConfig+0x314>)
 80021aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021ae:	6013      	str	r3, [r2, #0]
 80021b0:	4b60      	ldr	r3, [pc, #384]	; (8002334 <HAL_RCC_OscConfig+0x314>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a5f      	ldr	r2, [pc, #380]	; (8002334 <HAL_RCC_OscConfig+0x314>)
 80021b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ba:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021c0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d059      	beq.n	8002280 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021cc:	f7ff fc70 	bl	8001ab0 <HAL_GetTick>
 80021d0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d4:	e00a      	b.n	80021ec <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021d6:	f7ff fc6b 	bl	8001ab0 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b64      	cmp	r3, #100	; 0x64
 80021e4:	d902      	bls.n	80021ec <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	f000 bf67 	b.w	80030ba <HAL_RCC_OscConfig+0x109a>
 80021ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021f0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80021f8:	fa93 f3a3 	rbit	r3, r3
 80021fc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002200:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002204:	fab3 f383 	clz	r3, r3
 8002208:	b2db      	uxtb	r3, r3
 800220a:	095b      	lsrs	r3, r3, #5
 800220c:	b2db      	uxtb	r3, r3
 800220e:	f043 0301 	orr.w	r3, r3, #1
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b01      	cmp	r3, #1
 8002216:	d102      	bne.n	800221e <HAL_RCC_OscConfig+0x1fe>
 8002218:	4b46      	ldr	r3, [pc, #280]	; (8002334 <HAL_RCC_OscConfig+0x314>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	e015      	b.n	800224a <HAL_RCC_OscConfig+0x22a>
 800221e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002222:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002226:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800222a:	fa93 f3a3 	rbit	r3, r3
 800222e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002232:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002236:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800223a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800223e:	fa93 f3a3 	rbit	r3, r3
 8002242:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002246:	4b3b      	ldr	r3, [pc, #236]	; (8002334 <HAL_RCC_OscConfig+0x314>)
 8002248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800224e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002252:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002256:	fa92 f2a2 	rbit	r2, r2
 800225a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800225e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002262:	fab2 f282 	clz	r2, r2
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	f042 0220 	orr.w	r2, r2, #32
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	f002 021f 	and.w	r2, r2, #31
 8002272:	2101      	movs	r1, #1
 8002274:	fa01 f202 	lsl.w	r2, r1, r2
 8002278:	4013      	ands	r3, r2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0ab      	beq.n	80021d6 <HAL_RCC_OscConfig+0x1b6>
 800227e:	e05c      	b.n	800233a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002280:	f7ff fc16 	bl	8001ab0 <HAL_GetTick>
 8002284:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002288:	e00a      	b.n	80022a0 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800228a:	f7ff fc11 	bl	8001ab0 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b64      	cmp	r3, #100	; 0x64
 8002298:	d902      	bls.n	80022a0 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	f000 bf0d 	b.w	80030ba <HAL_RCC_OscConfig+0x109a>
 80022a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022a4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80022ac:	fa93 f3a3 	rbit	r3, r3
 80022b0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80022b4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022b8:	fab3 f383 	clz	r3, r3
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	095b      	lsrs	r3, r3, #5
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	f043 0301 	orr.w	r3, r3, #1
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d102      	bne.n	80022d2 <HAL_RCC_OscConfig+0x2b2>
 80022cc:	4b19      	ldr	r3, [pc, #100]	; (8002334 <HAL_RCC_OscConfig+0x314>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	e015      	b.n	80022fe <HAL_RCC_OscConfig+0x2de>
 80022d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022d6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022da:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80022de:	fa93 f3a3 	rbit	r3, r3
 80022e2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80022e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022ea:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80022ee:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80022f2:	fa93 f3a3 	rbit	r3, r3
 80022f6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80022fa:	4b0e      	ldr	r3, [pc, #56]	; (8002334 <HAL_RCC_OscConfig+0x314>)
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002302:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002306:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800230a:	fa92 f2a2 	rbit	r2, r2
 800230e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8002312:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002316:	fab2 f282 	clz	r2, r2
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	f042 0220 	orr.w	r2, r2, #32
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	f002 021f 	and.w	r2, r2, #31
 8002326:	2101      	movs	r1, #1
 8002328:	fa01 f202 	lsl.w	r2, r1, r2
 800232c:	4013      	ands	r3, r2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1ab      	bne.n	800228a <HAL_RCC_OscConfig+0x26a>
 8002332:	e002      	b.n	800233a <HAL_RCC_OscConfig+0x31a>
 8002334:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800233a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800233e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	f000 817f 	beq.w	800264e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002350:	4ba7      	ldr	r3, [pc, #668]	; (80025f0 <HAL_RCC_OscConfig+0x5d0>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 030c 	and.w	r3, r3, #12
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00c      	beq.n	8002376 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800235c:	4ba4      	ldr	r3, [pc, #656]	; (80025f0 <HAL_RCC_OscConfig+0x5d0>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 030c 	and.w	r3, r3, #12
 8002364:	2b08      	cmp	r3, #8
 8002366:	d173      	bne.n	8002450 <HAL_RCC_OscConfig+0x430>
 8002368:	4ba1      	ldr	r3, [pc, #644]	; (80025f0 <HAL_RCC_OscConfig+0x5d0>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002370:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002374:	d16c      	bne.n	8002450 <HAL_RCC_OscConfig+0x430>
 8002376:	2302      	movs	r3, #2
 8002378:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8002380:	fa93 f3a3 	rbit	r3, r3
 8002384:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002388:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800238c:	fab3 f383 	clz	r3, r3
 8002390:	b2db      	uxtb	r3, r3
 8002392:	095b      	lsrs	r3, r3, #5
 8002394:	b2db      	uxtb	r3, r3
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b01      	cmp	r3, #1
 800239e:	d102      	bne.n	80023a6 <HAL_RCC_OscConfig+0x386>
 80023a0:	4b93      	ldr	r3, [pc, #588]	; (80025f0 <HAL_RCC_OscConfig+0x5d0>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	e013      	b.n	80023ce <HAL_RCC_OscConfig+0x3ae>
 80023a6:	2302      	movs	r3, #2
 80023a8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ac:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80023b0:	fa93 f3a3 	rbit	r3, r3
 80023b4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80023b8:	2302      	movs	r3, #2
 80023ba:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80023be:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80023c2:	fa93 f3a3 	rbit	r3, r3
 80023c6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80023ca:	4b89      	ldr	r3, [pc, #548]	; (80025f0 <HAL_RCC_OscConfig+0x5d0>)
 80023cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ce:	2202      	movs	r2, #2
 80023d0:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80023d4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80023d8:	fa92 f2a2 	rbit	r2, r2
 80023dc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80023e0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80023e4:	fab2 f282 	clz	r2, r2
 80023e8:	b2d2      	uxtb	r2, r2
 80023ea:	f042 0220 	orr.w	r2, r2, #32
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	f002 021f 	and.w	r2, r2, #31
 80023f4:	2101      	movs	r1, #1
 80023f6:	fa01 f202 	lsl.w	r2, r1, r2
 80023fa:	4013      	ands	r3, r2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00a      	beq.n	8002416 <HAL_RCC_OscConfig+0x3f6>
 8002400:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002404:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d002      	beq.n	8002416 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	f000 be52 	b.w	80030ba <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002416:	4b76      	ldr	r3, [pc, #472]	; (80025f0 <HAL_RCC_OscConfig+0x5d0>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800241e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002422:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	21f8      	movs	r1, #248	; 0xf8
 800242c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002430:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8002434:	fa91 f1a1 	rbit	r1, r1
 8002438:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800243c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002440:	fab1 f181 	clz	r1, r1
 8002444:	b2c9      	uxtb	r1, r1
 8002446:	408b      	lsls	r3, r1
 8002448:	4969      	ldr	r1, [pc, #420]	; (80025f0 <HAL_RCC_OscConfig+0x5d0>)
 800244a:	4313      	orrs	r3, r2
 800244c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800244e:	e0fe      	b.n	800264e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002450:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002454:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	2b00      	cmp	r3, #0
 800245e:	f000 8088 	beq.w	8002572 <HAL_RCC_OscConfig+0x552>
 8002462:	2301      	movs	r3, #1
 8002464:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002468:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800246c:	fa93 f3a3 	rbit	r3, r3
 8002470:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002474:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002478:	fab3 f383 	clz	r3, r3
 800247c:	b2db      	uxtb	r3, r3
 800247e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002482:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	461a      	mov	r2, r3
 800248a:	2301      	movs	r3, #1
 800248c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248e:	f7ff fb0f 	bl	8001ab0 <HAL_GetTick>
 8002492:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002496:	e00a      	b.n	80024ae <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002498:	f7ff fb0a 	bl	8001ab0 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d902      	bls.n	80024ae <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	f000 be06 	b.w	80030ba <HAL_RCC_OscConfig+0x109a>
 80024ae:	2302      	movs	r3, #2
 80024b0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80024b8:	fa93 f3a3 	rbit	r3, r3
 80024bc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80024c0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c4:	fab3 f383 	clz	r3, r3
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	095b      	lsrs	r3, r3, #5
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	f043 0301 	orr.w	r3, r3, #1
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d102      	bne.n	80024de <HAL_RCC_OscConfig+0x4be>
 80024d8:	4b45      	ldr	r3, [pc, #276]	; (80025f0 <HAL_RCC_OscConfig+0x5d0>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	e013      	b.n	8002506 <HAL_RCC_OscConfig+0x4e6>
 80024de:	2302      	movs	r3, #2
 80024e0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80024e8:	fa93 f3a3 	rbit	r3, r3
 80024ec:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80024f0:	2302      	movs	r3, #2
 80024f2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80024f6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80024fa:	fa93 f3a3 	rbit	r3, r3
 80024fe:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002502:	4b3b      	ldr	r3, [pc, #236]	; (80025f0 <HAL_RCC_OscConfig+0x5d0>)
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002506:	2202      	movs	r2, #2
 8002508:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800250c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002510:	fa92 f2a2 	rbit	r2, r2
 8002514:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002518:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800251c:	fab2 f282 	clz	r2, r2
 8002520:	b2d2      	uxtb	r2, r2
 8002522:	f042 0220 	orr.w	r2, r2, #32
 8002526:	b2d2      	uxtb	r2, r2
 8002528:	f002 021f 	and.w	r2, r2, #31
 800252c:	2101      	movs	r1, #1
 800252e:	fa01 f202 	lsl.w	r2, r1, r2
 8002532:	4013      	ands	r3, r2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0af      	beq.n	8002498 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002538:	4b2d      	ldr	r3, [pc, #180]	; (80025f0 <HAL_RCC_OscConfig+0x5d0>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002540:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002544:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	21f8      	movs	r1, #248	; 0xf8
 800254e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002552:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002556:	fa91 f1a1 	rbit	r1, r1
 800255a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800255e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002562:	fab1 f181 	clz	r1, r1
 8002566:	b2c9      	uxtb	r1, r1
 8002568:	408b      	lsls	r3, r1
 800256a:	4921      	ldr	r1, [pc, #132]	; (80025f0 <HAL_RCC_OscConfig+0x5d0>)
 800256c:	4313      	orrs	r3, r2
 800256e:	600b      	str	r3, [r1, #0]
 8002570:	e06d      	b.n	800264e <HAL_RCC_OscConfig+0x62e>
 8002572:	2301      	movs	r3, #1
 8002574:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002578:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800257c:	fa93 f3a3 	rbit	r3, r3
 8002580:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8002584:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002588:	fab3 f383 	clz	r3, r3
 800258c:	b2db      	uxtb	r3, r3
 800258e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002592:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	461a      	mov	r2, r3
 800259a:	2300      	movs	r3, #0
 800259c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259e:	f7ff fa87 	bl	8001ab0 <HAL_GetTick>
 80025a2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025a6:	e00a      	b.n	80025be <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025a8:	f7ff fa82 	bl	8001ab0 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d902      	bls.n	80025be <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	f000 bd7e 	b.w	80030ba <HAL_RCC_OscConfig+0x109a>
 80025be:	2302      	movs	r3, #2
 80025c0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80025c8:	fa93 f3a3 	rbit	r3, r3
 80025cc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80025d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025d4:	fab3 f383 	clz	r3, r3
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	095b      	lsrs	r3, r3, #5
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	f043 0301 	orr.w	r3, r3, #1
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d105      	bne.n	80025f4 <HAL_RCC_OscConfig+0x5d4>
 80025e8:	4b01      	ldr	r3, [pc, #4]	; (80025f0 <HAL_RCC_OscConfig+0x5d0>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	e016      	b.n	800261c <HAL_RCC_OscConfig+0x5fc>
 80025ee:	bf00      	nop
 80025f0:	40021000 	.word	0x40021000
 80025f4:	2302      	movs	r3, #2
 80025f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80025fe:	fa93 f3a3 	rbit	r3, r3
 8002602:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002606:	2302      	movs	r3, #2
 8002608:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800260c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002610:	fa93 f3a3 	rbit	r3, r3
 8002614:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002618:	4bbf      	ldr	r3, [pc, #764]	; (8002918 <HAL_RCC_OscConfig+0x8f8>)
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	2202      	movs	r2, #2
 800261e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002622:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002626:	fa92 f2a2 	rbit	r2, r2
 800262a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800262e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002632:	fab2 f282 	clz	r2, r2
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	f042 0220 	orr.w	r2, r2, #32
 800263c:	b2d2      	uxtb	r2, r2
 800263e:	f002 021f 	and.w	r2, r2, #31
 8002642:	2101      	movs	r1, #1
 8002644:	fa01 f202 	lsl.w	r2, r1, r2
 8002648:	4013      	ands	r3, r2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1ac      	bne.n	80025a8 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800264e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002652:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 8113 	beq.w	800288a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002664:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002668:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d07c      	beq.n	800276e <HAL_RCC_OscConfig+0x74e>
 8002674:	2301      	movs	r3, #1
 8002676:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800267e:	fa93 f3a3 	rbit	r3, r3
 8002682:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8002686:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800268a:	fab3 f383 	clz	r3, r3
 800268e:	b2db      	uxtb	r3, r3
 8002690:	461a      	mov	r2, r3
 8002692:	4ba2      	ldr	r3, [pc, #648]	; (800291c <HAL_RCC_OscConfig+0x8fc>)
 8002694:	4413      	add	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	461a      	mov	r2, r3
 800269a:	2301      	movs	r3, #1
 800269c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800269e:	f7ff fa07 	bl	8001ab0 <HAL_GetTick>
 80026a2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a6:	e00a      	b.n	80026be <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026a8:	f7ff fa02 	bl	8001ab0 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d902      	bls.n	80026be <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	f000 bcfe 	b.w	80030ba <HAL_RCC_OscConfig+0x109a>
 80026be:	2302      	movs	r3, #2
 80026c0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026c8:	fa93 f2a3 	rbit	r2, r3
 80026cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026d0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80026de:	2202      	movs	r2, #2
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	fa93 f2a3 	rbit	r2, r3
 80026f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002702:	2202      	movs	r2, #2
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800270a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	fa93 f2a3 	rbit	r2, r3
 8002714:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002718:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800271c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800271e:	4b7e      	ldr	r3, [pc, #504]	; (8002918 <HAL_RCC_OscConfig+0x8f8>)
 8002720:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002722:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002726:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800272a:	2102      	movs	r1, #2
 800272c:	6019      	str	r1, [r3, #0]
 800272e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002732:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	fa93 f1a3 	rbit	r1, r3
 800273c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002740:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002744:	6019      	str	r1, [r3, #0]
  return result;
 8002746:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800274a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	fab3 f383 	clz	r3, r3
 8002754:	b2db      	uxtb	r3, r3
 8002756:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800275a:	b2db      	uxtb	r3, r3
 800275c:	f003 031f 	and.w	r3, r3, #31
 8002760:	2101      	movs	r1, #1
 8002762:	fa01 f303 	lsl.w	r3, r1, r3
 8002766:	4013      	ands	r3, r2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d09d      	beq.n	80026a8 <HAL_RCC_OscConfig+0x688>
 800276c:	e08d      	b.n	800288a <HAL_RCC_OscConfig+0x86a>
 800276e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002772:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002776:	2201      	movs	r2, #1
 8002778:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800277e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	fa93 f2a3 	rbit	r2, r3
 8002788:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800278c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002790:	601a      	str	r2, [r3, #0]
  return result;
 8002792:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002796:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800279a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800279c:	fab3 f383 	clz	r3, r3
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	461a      	mov	r2, r3
 80027a4:	4b5d      	ldr	r3, [pc, #372]	; (800291c <HAL_RCC_OscConfig+0x8fc>)
 80027a6:	4413      	add	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	461a      	mov	r2, r3
 80027ac:	2300      	movs	r3, #0
 80027ae:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b0:	f7ff f97e 	bl	8001ab0 <HAL_GetTick>
 80027b4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027b8:	e00a      	b.n	80027d0 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027ba:	f7ff f979 	bl	8001ab0 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d902      	bls.n	80027d0 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	f000 bc75 	b.w	80030ba <HAL_RCC_OscConfig+0x109a>
 80027d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027d4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80027d8:	2202      	movs	r2, #2
 80027da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027e0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	fa93 f2a3 	rbit	r2, r3
 80027ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027ee:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80027fc:	2202      	movs	r2, #2
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002804:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	fa93 f2a3 	rbit	r2, r3
 800280e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002812:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800281c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002820:	2202      	movs	r2, #2
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002828:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	fa93 f2a3 	rbit	r2, r3
 8002832:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002836:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800283a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800283c:	4b36      	ldr	r3, [pc, #216]	; (8002918 <HAL_RCC_OscConfig+0x8f8>)
 800283e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002840:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002844:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002848:	2102      	movs	r1, #2
 800284a:	6019      	str	r1, [r3, #0]
 800284c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002850:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	fa93 f1a3 	rbit	r1, r3
 800285a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800285e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002862:	6019      	str	r1, [r3, #0]
  return result;
 8002864:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002868:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	fab3 f383 	clz	r3, r3
 8002872:	b2db      	uxtb	r3, r3
 8002874:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002878:	b2db      	uxtb	r3, r3
 800287a:	f003 031f 	and.w	r3, r3, #31
 800287e:	2101      	movs	r1, #1
 8002880:	fa01 f303 	lsl.w	r3, r1, r3
 8002884:	4013      	ands	r3, r2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d197      	bne.n	80027ba <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800288a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800288e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0304 	and.w	r3, r3, #4
 800289a:	2b00      	cmp	r3, #0
 800289c:	f000 81a5 	beq.w	8002bea <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028a0:	2300      	movs	r3, #0
 80028a2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028a6:	4b1c      	ldr	r3, [pc, #112]	; (8002918 <HAL_RCC_OscConfig+0x8f8>)
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d116      	bne.n	80028e0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028b2:	4b19      	ldr	r3, [pc, #100]	; (8002918 <HAL_RCC_OscConfig+0x8f8>)
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	4a18      	ldr	r2, [pc, #96]	; (8002918 <HAL_RCC_OscConfig+0x8f8>)
 80028b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028bc:	61d3      	str	r3, [r2, #28]
 80028be:	4b16      	ldr	r3, [pc, #88]	; (8002918 <HAL_RCC_OscConfig+0x8f8>)
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80028c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028d8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80028da:	2301      	movs	r3, #1
 80028dc:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e0:	4b0f      	ldr	r3, [pc, #60]	; (8002920 <HAL_RCC_OscConfig+0x900>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d121      	bne.n	8002930 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ec:	4b0c      	ldr	r3, [pc, #48]	; (8002920 <HAL_RCC_OscConfig+0x900>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a0b      	ldr	r2, [pc, #44]	; (8002920 <HAL_RCC_OscConfig+0x900>)
 80028f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028f8:	f7ff f8da 	bl	8001ab0 <HAL_GetTick>
 80028fc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002900:	e010      	b.n	8002924 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002902:	f7ff f8d5 	bl	8001ab0 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b64      	cmp	r3, #100	; 0x64
 8002910:	d908      	bls.n	8002924 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e3d1      	b.n	80030ba <HAL_RCC_OscConfig+0x109a>
 8002916:	bf00      	nop
 8002918:	40021000 	.word	0x40021000
 800291c:	10908120 	.word	0x10908120
 8002920:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002924:	4b8d      	ldr	r3, [pc, #564]	; (8002b5c <HAL_RCC_OscConfig+0xb3c>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0e8      	beq.n	8002902 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002930:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002934:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d106      	bne.n	800294e <HAL_RCC_OscConfig+0x92e>
 8002940:	4b87      	ldr	r3, [pc, #540]	; (8002b60 <HAL_RCC_OscConfig+0xb40>)
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	4a86      	ldr	r2, [pc, #536]	; (8002b60 <HAL_RCC_OscConfig+0xb40>)
 8002946:	f043 0301 	orr.w	r3, r3, #1
 800294a:	6213      	str	r3, [r2, #32]
 800294c:	e035      	b.n	80029ba <HAL_RCC_OscConfig+0x99a>
 800294e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002952:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10c      	bne.n	8002978 <HAL_RCC_OscConfig+0x958>
 800295e:	4b80      	ldr	r3, [pc, #512]	; (8002b60 <HAL_RCC_OscConfig+0xb40>)
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	4a7f      	ldr	r2, [pc, #508]	; (8002b60 <HAL_RCC_OscConfig+0xb40>)
 8002964:	f023 0301 	bic.w	r3, r3, #1
 8002968:	6213      	str	r3, [r2, #32]
 800296a:	4b7d      	ldr	r3, [pc, #500]	; (8002b60 <HAL_RCC_OscConfig+0xb40>)
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	4a7c      	ldr	r2, [pc, #496]	; (8002b60 <HAL_RCC_OscConfig+0xb40>)
 8002970:	f023 0304 	bic.w	r3, r3, #4
 8002974:	6213      	str	r3, [r2, #32]
 8002976:	e020      	b.n	80029ba <HAL_RCC_OscConfig+0x99a>
 8002978:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800297c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	2b05      	cmp	r3, #5
 8002986:	d10c      	bne.n	80029a2 <HAL_RCC_OscConfig+0x982>
 8002988:	4b75      	ldr	r3, [pc, #468]	; (8002b60 <HAL_RCC_OscConfig+0xb40>)
 800298a:	6a1b      	ldr	r3, [r3, #32]
 800298c:	4a74      	ldr	r2, [pc, #464]	; (8002b60 <HAL_RCC_OscConfig+0xb40>)
 800298e:	f043 0304 	orr.w	r3, r3, #4
 8002992:	6213      	str	r3, [r2, #32]
 8002994:	4b72      	ldr	r3, [pc, #456]	; (8002b60 <HAL_RCC_OscConfig+0xb40>)
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	4a71      	ldr	r2, [pc, #452]	; (8002b60 <HAL_RCC_OscConfig+0xb40>)
 800299a:	f043 0301 	orr.w	r3, r3, #1
 800299e:	6213      	str	r3, [r2, #32]
 80029a0:	e00b      	b.n	80029ba <HAL_RCC_OscConfig+0x99a>
 80029a2:	4b6f      	ldr	r3, [pc, #444]	; (8002b60 <HAL_RCC_OscConfig+0xb40>)
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	4a6e      	ldr	r2, [pc, #440]	; (8002b60 <HAL_RCC_OscConfig+0xb40>)
 80029a8:	f023 0301 	bic.w	r3, r3, #1
 80029ac:	6213      	str	r3, [r2, #32]
 80029ae:	4b6c      	ldr	r3, [pc, #432]	; (8002b60 <HAL_RCC_OscConfig+0xb40>)
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	4a6b      	ldr	r2, [pc, #428]	; (8002b60 <HAL_RCC_OscConfig+0xb40>)
 80029b4:	f023 0304 	bic.w	r3, r3, #4
 80029b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029be:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f000 8081 	beq.w	8002ace <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029cc:	f7ff f870 	bl	8001ab0 <HAL_GetTick>
 80029d0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d4:	e00b      	b.n	80029ee <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029d6:	f7ff f86b 	bl	8001ab0 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e365      	b.n	80030ba <HAL_RCC_OscConfig+0x109a>
 80029ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029f2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80029f6:	2202      	movs	r2, #2
 80029f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029fe:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	fa93 f2a3 	rbit	r2, r3
 8002a08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a0c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a16:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a22:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	fa93 f2a3 	rbit	r2, r3
 8002a2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a30:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002a34:	601a      	str	r2, [r3, #0]
  return result;
 8002a36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a3a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002a3e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a40:	fab3 f383 	clz	r3, r3
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	095b      	lsrs	r3, r3, #5
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	f043 0302 	orr.w	r3, r3, #2
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d102      	bne.n	8002a5a <HAL_RCC_OscConfig+0xa3a>
 8002a54:	4b42      	ldr	r3, [pc, #264]	; (8002b60 <HAL_RCC_OscConfig+0xb40>)
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	e013      	b.n	8002a82 <HAL_RCC_OscConfig+0xa62>
 8002a5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a5e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002a62:	2202      	movs	r2, #2
 8002a64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a6a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	fa93 f2a3 	rbit	r2, r3
 8002a74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a78:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	4b38      	ldr	r3, [pc, #224]	; (8002b60 <HAL_RCC_OscConfig+0xb40>)
 8002a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a82:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a86:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002a8a:	2102      	movs	r1, #2
 8002a8c:	6011      	str	r1, [r2, #0]
 8002a8e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a92:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002a96:	6812      	ldr	r2, [r2, #0]
 8002a98:	fa92 f1a2 	rbit	r1, r2
 8002a9c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002aa0:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002aa4:	6011      	str	r1, [r2, #0]
  return result;
 8002aa6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002aaa:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002aae:	6812      	ldr	r2, [r2, #0]
 8002ab0:	fab2 f282 	clz	r2, r2
 8002ab4:	b2d2      	uxtb	r2, r2
 8002ab6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	f002 021f 	and.w	r2, r2, #31
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d084      	beq.n	80029d6 <HAL_RCC_OscConfig+0x9b6>
 8002acc:	e083      	b.n	8002bd6 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ace:	f7fe ffef 	bl	8001ab0 <HAL_GetTick>
 8002ad2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ad6:	e00b      	b.n	8002af0 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ad8:	f7fe ffea 	bl	8001ab0 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e2e4      	b.n	80030ba <HAL_RCC_OscConfig+0x109a>
 8002af0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002af4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002af8:	2202      	movs	r2, #2
 8002afa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b00:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	fa93 f2a3 	rbit	r2, r3
 8002b0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b0e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b18:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002b1c:	2202      	movs	r2, #2
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b24:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	fa93 f2a3 	rbit	r2, r3
 8002b2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b32:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002b36:	601a      	str	r2, [r3, #0]
  return result;
 8002b38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b3c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002b40:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b42:	fab3 f383 	clz	r3, r3
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	095b      	lsrs	r3, r3, #5
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	f043 0302 	orr.w	r3, r3, #2
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d106      	bne.n	8002b64 <HAL_RCC_OscConfig+0xb44>
 8002b56:	4b02      	ldr	r3, [pc, #8]	; (8002b60 <HAL_RCC_OscConfig+0xb40>)
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	e017      	b.n	8002b8c <HAL_RCC_OscConfig+0xb6c>
 8002b5c:	40007000 	.word	0x40007000
 8002b60:	40021000 	.word	0x40021000
 8002b64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b68:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b74:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	fa93 f2a3 	rbit	r2, r3
 8002b7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b82:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	4bb3      	ldr	r3, [pc, #716]	; (8002e58 <HAL_RCC_OscConfig+0xe38>)
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002b90:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002b94:	2102      	movs	r1, #2
 8002b96:	6011      	str	r1, [r2, #0]
 8002b98:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002b9c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002ba0:	6812      	ldr	r2, [r2, #0]
 8002ba2:	fa92 f1a2 	rbit	r1, r2
 8002ba6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002baa:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002bae:	6011      	str	r1, [r2, #0]
  return result;
 8002bb0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002bb4:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002bb8:	6812      	ldr	r2, [r2, #0]
 8002bba:	fab2 f282 	clz	r2, r2
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	f002 021f 	and.w	r2, r2, #31
 8002bca:	2101      	movs	r1, #1
 8002bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d180      	bne.n	8002ad8 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002bd6:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d105      	bne.n	8002bea <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bde:	4b9e      	ldr	r3, [pc, #632]	; (8002e58 <HAL_RCC_OscConfig+0xe38>)
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	4a9d      	ldr	r2, [pc, #628]	; (8002e58 <HAL_RCC_OscConfig+0xe38>)
 8002be4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002be8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 825e 	beq.w	80030b8 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bfc:	4b96      	ldr	r3, [pc, #600]	; (8002e58 <HAL_RCC_OscConfig+0xe38>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 030c 	and.w	r3, r3, #12
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	f000 821f 	beq.w	8003048 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c0e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	f040 8170 	bne.w	8002efc <HAL_RCC_OscConfig+0xedc>
 8002c1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c20:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002c24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c2e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	fa93 f2a3 	rbit	r2, r3
 8002c38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c3c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002c40:	601a      	str	r2, [r3, #0]
  return result;
 8002c42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c46:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002c4a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c4c:	fab3 f383 	clz	r3, r3
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c56:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	2300      	movs	r3, #0
 8002c60:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c62:	f7fe ff25 	bl	8001ab0 <HAL_GetTick>
 8002c66:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c6a:	e009      	b.n	8002c80 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c6c:	f7fe ff20 	bl	8001ab0 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e21c      	b.n	80030ba <HAL_RCC_OscConfig+0x109a>
 8002c80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c84:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002c88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c92:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	fa93 f2a3 	rbit	r2, r3
 8002c9c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ca0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002ca4:	601a      	str	r2, [r3, #0]
  return result;
 8002ca6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002caa:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002cae:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cb0:	fab3 f383 	clz	r3, r3
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	095b      	lsrs	r3, r3, #5
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	f043 0301 	orr.w	r3, r3, #1
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d102      	bne.n	8002cca <HAL_RCC_OscConfig+0xcaa>
 8002cc4:	4b64      	ldr	r3, [pc, #400]	; (8002e58 <HAL_RCC_OscConfig+0xe38>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	e027      	b.n	8002d1a <HAL_RCC_OscConfig+0xcfa>
 8002cca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cce:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002cd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cdc:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	fa93 f2a3 	rbit	r2, r3
 8002ce6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cea:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cf4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002cf8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d02:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	fa93 f2a3 	rbit	r2, r3
 8002d0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d10:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	4b50      	ldr	r3, [pc, #320]	; (8002e58 <HAL_RCC_OscConfig+0xe38>)
 8002d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d1e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002d22:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d26:	6011      	str	r1, [r2, #0]
 8002d28:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d2c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002d30:	6812      	ldr	r2, [r2, #0]
 8002d32:	fa92 f1a2 	rbit	r1, r2
 8002d36:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d3a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002d3e:	6011      	str	r1, [r2, #0]
  return result;
 8002d40:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d44:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002d48:	6812      	ldr	r2, [r2, #0]
 8002d4a:	fab2 f282 	clz	r2, r2
 8002d4e:	b2d2      	uxtb	r2, r2
 8002d50:	f042 0220 	orr.w	r2, r2, #32
 8002d54:	b2d2      	uxtb	r2, r2
 8002d56:	f002 021f 	and.w	r2, r2, #31
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d60:	4013      	ands	r3, r2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d182      	bne.n	8002c6c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d66:	4b3c      	ldr	r3, [pc, #240]	; (8002e58 <HAL_RCC_OscConfig+0xe38>)
 8002d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6a:	f023 020f 	bic.w	r2, r3, #15
 8002d6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d72:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7a:	4937      	ldr	r1, [pc, #220]	; (8002e58 <HAL_RCC_OscConfig+0xe38>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002d80:	4b35      	ldr	r3, [pc, #212]	; (8002e58 <HAL_RCC_OscConfig+0xe38>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002d88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d8c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6a19      	ldr	r1, [r3, #32]
 8002d94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d98:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	69db      	ldr	r3, [r3, #28]
 8002da0:	430b      	orrs	r3, r1
 8002da2:	492d      	ldr	r1, [pc, #180]	; (8002e58 <HAL_RCC_OscConfig+0xe38>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	604b      	str	r3, [r1, #4]
 8002da8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dac:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002db0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002db4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dba:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	fa93 f2a3 	rbit	r2, r3
 8002dc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dc8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002dcc:	601a      	str	r2, [r3, #0]
  return result;
 8002dce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dd2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002dd6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dd8:	fab3 f383 	clz	r3, r3
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002de2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	461a      	mov	r2, r3
 8002dea:	2301      	movs	r3, #1
 8002dec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dee:	f7fe fe5f 	bl	8001ab0 <HAL_GetTick>
 8002df2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002df6:	e009      	b.n	8002e0c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002df8:	f7fe fe5a 	bl	8001ab0 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e156      	b.n	80030ba <HAL_RCC_OscConfig+0x109a>
 8002e0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e10:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002e14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e1e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	fa93 f2a3 	rbit	r2, r3
 8002e28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e2c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002e30:	601a      	str	r2, [r3, #0]
  return result;
 8002e32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e36:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002e3a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e3c:	fab3 f383 	clz	r3, r3
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	095b      	lsrs	r3, r3, #5
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	f043 0301 	orr.w	r3, r3, #1
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d105      	bne.n	8002e5c <HAL_RCC_OscConfig+0xe3c>
 8002e50:	4b01      	ldr	r3, [pc, #4]	; (8002e58 <HAL_RCC_OscConfig+0xe38>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	e02a      	b.n	8002eac <HAL_RCC_OscConfig+0xe8c>
 8002e56:	bf00      	nop
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e60:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002e64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e6e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	fa93 f2a3 	rbit	r2, r3
 8002e78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e7c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e86:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002e8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e94:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	fa93 f2a3 	rbit	r2, r3
 8002e9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ea2:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	4b86      	ldr	r3, [pc, #536]	; (80030c4 <HAL_RCC_OscConfig+0x10a4>)
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002eb0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002eb4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002eb8:	6011      	str	r1, [r2, #0]
 8002eba:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ebe:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002ec2:	6812      	ldr	r2, [r2, #0]
 8002ec4:	fa92 f1a2 	rbit	r1, r2
 8002ec8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ecc:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002ed0:	6011      	str	r1, [r2, #0]
  return result;
 8002ed2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ed6:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002eda:	6812      	ldr	r2, [r2, #0]
 8002edc:	fab2 f282 	clz	r2, r2
 8002ee0:	b2d2      	uxtb	r2, r2
 8002ee2:	f042 0220 	orr.w	r2, r2, #32
 8002ee6:	b2d2      	uxtb	r2, r2
 8002ee8:	f002 021f 	and.w	r2, r2, #31
 8002eec:	2101      	movs	r1, #1
 8002eee:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f43f af7f 	beq.w	8002df8 <HAL_RCC_OscConfig+0xdd8>
 8002efa:	e0dd      	b.n	80030b8 <HAL_RCC_OscConfig+0x1098>
 8002efc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f00:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002f04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f0e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	fa93 f2a3 	rbit	r2, r3
 8002f18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f1c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002f20:	601a      	str	r2, [r3, #0]
  return result;
 8002f22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f26:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002f2a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f2c:	fab3 f383 	clz	r3, r3
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f36:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	2300      	movs	r3, #0
 8002f40:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f42:	f7fe fdb5 	bl	8001ab0 <HAL_GetTick>
 8002f46:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f4a:	e009      	b.n	8002f60 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f4c:	f7fe fdb0 	bl	8001ab0 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e0ac      	b.n	80030ba <HAL_RCC_OscConfig+0x109a>
 8002f60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f64:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002f68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f72:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	fa93 f2a3 	rbit	r2, r3
 8002f7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f80:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002f84:	601a      	str	r2, [r3, #0]
  return result;
 8002f86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f8a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002f8e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f90:	fab3 f383 	clz	r3, r3
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	095b      	lsrs	r3, r3, #5
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	f043 0301 	orr.w	r3, r3, #1
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d102      	bne.n	8002faa <HAL_RCC_OscConfig+0xf8a>
 8002fa4:	4b47      	ldr	r3, [pc, #284]	; (80030c4 <HAL_RCC_OscConfig+0x10a4>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	e027      	b.n	8002ffa <HAL_RCC_OscConfig+0xfda>
 8002faa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fae:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002fb2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fbc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	fa93 f2a3 	rbit	r2, r3
 8002fc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fca:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fd4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002fd8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002fe2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	fa93 f2a3 	rbit	r2, r3
 8002fec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ff0:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	4b33      	ldr	r3, [pc, #204]	; (80030c4 <HAL_RCC_OscConfig+0x10a4>)
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ffe:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003002:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003006:	6011      	str	r1, [r2, #0]
 8003008:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800300c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003010:	6812      	ldr	r2, [r2, #0]
 8003012:	fa92 f1a2 	rbit	r1, r2
 8003016:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800301a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800301e:	6011      	str	r1, [r2, #0]
  return result;
 8003020:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003024:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003028:	6812      	ldr	r2, [r2, #0]
 800302a:	fab2 f282 	clz	r2, r2
 800302e:	b2d2      	uxtb	r2, r2
 8003030:	f042 0220 	orr.w	r2, r2, #32
 8003034:	b2d2      	uxtb	r2, r2
 8003036:	f002 021f 	and.w	r2, r2, #31
 800303a:	2101      	movs	r1, #1
 800303c:	fa01 f202 	lsl.w	r2, r1, r2
 8003040:	4013      	ands	r3, r2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d182      	bne.n	8002f4c <HAL_RCC_OscConfig+0xf2c>
 8003046:	e037      	b.n	80030b8 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003048:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800304c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d101      	bne.n	800305c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e02e      	b.n	80030ba <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800305c:	4b19      	ldr	r3, [pc, #100]	; (80030c4 <HAL_RCC_OscConfig+0x10a4>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003064:	4b17      	ldr	r3, [pc, #92]	; (80030c4 <HAL_RCC_OscConfig+0x10a4>)
 8003066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003068:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800306c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003070:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003074:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003078:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	69db      	ldr	r3, [r3, #28]
 8003080:	429a      	cmp	r2, r3
 8003082:	d117      	bne.n	80030b4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003084:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003088:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800308c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003090:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003098:	429a      	cmp	r2, r3
 800309a:	d10b      	bne.n	80030b4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800309c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030a0:	f003 020f 	and.w	r2, r3, #15
 80030a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030a8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d001      	beq.n	80030b8 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e000      	b.n	80030ba <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	40021000 	.word	0x40021000

080030c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b09e      	sub	sp, #120	; 0x78
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e162      	b.n	80033a6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030e0:	4b90      	ldr	r3, [pc, #576]	; (8003324 <HAL_RCC_ClockConfig+0x25c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d910      	bls.n	8003110 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ee:	4b8d      	ldr	r3, [pc, #564]	; (8003324 <HAL_RCC_ClockConfig+0x25c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f023 0207 	bic.w	r2, r3, #7
 80030f6:	498b      	ldr	r1, [pc, #556]	; (8003324 <HAL_RCC_ClockConfig+0x25c>)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fe:	4b89      	ldr	r3, [pc, #548]	; (8003324 <HAL_RCC_ClockConfig+0x25c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0307 	and.w	r3, r3, #7
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	429a      	cmp	r2, r3
 800310a:	d001      	beq.n	8003110 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e14a      	b.n	80033a6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d008      	beq.n	800312e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800311c:	4b82      	ldr	r3, [pc, #520]	; (8003328 <HAL_RCC_ClockConfig+0x260>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	497f      	ldr	r1, [pc, #508]	; (8003328 <HAL_RCC_ClockConfig+0x260>)
 800312a:	4313      	orrs	r3, r2
 800312c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 80dc 	beq.w	80032f4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d13c      	bne.n	80031be <HAL_RCC_ClockConfig+0xf6>
 8003144:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003148:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800314c:	fa93 f3a3 	rbit	r3, r3
 8003150:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003154:	fab3 f383 	clz	r3, r3
 8003158:	b2db      	uxtb	r3, r3
 800315a:	095b      	lsrs	r3, r3, #5
 800315c:	b2db      	uxtb	r3, r3
 800315e:	f043 0301 	orr.w	r3, r3, #1
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b01      	cmp	r3, #1
 8003166:	d102      	bne.n	800316e <HAL_RCC_ClockConfig+0xa6>
 8003168:	4b6f      	ldr	r3, [pc, #444]	; (8003328 <HAL_RCC_ClockConfig+0x260>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	e00f      	b.n	800318e <HAL_RCC_ClockConfig+0xc6>
 800316e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003172:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003174:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003176:	fa93 f3a3 	rbit	r3, r3
 800317a:	667b      	str	r3, [r7, #100]	; 0x64
 800317c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003180:	663b      	str	r3, [r7, #96]	; 0x60
 8003182:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003184:	fa93 f3a3 	rbit	r3, r3
 8003188:	65fb      	str	r3, [r7, #92]	; 0x5c
 800318a:	4b67      	ldr	r3, [pc, #412]	; (8003328 <HAL_RCC_ClockConfig+0x260>)
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003192:	65ba      	str	r2, [r7, #88]	; 0x58
 8003194:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003196:	fa92 f2a2 	rbit	r2, r2
 800319a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800319c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800319e:	fab2 f282 	clz	r2, r2
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	f042 0220 	orr.w	r2, r2, #32
 80031a8:	b2d2      	uxtb	r2, r2
 80031aa:	f002 021f 	and.w	r2, r2, #31
 80031ae:	2101      	movs	r1, #1
 80031b0:	fa01 f202 	lsl.w	r2, r1, r2
 80031b4:	4013      	ands	r3, r2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d17b      	bne.n	80032b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e0f3      	b.n	80033a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d13c      	bne.n	8003240 <HAL_RCC_ClockConfig+0x178>
 80031c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031ca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031ce:	fa93 f3a3 	rbit	r3, r3
 80031d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80031d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d6:	fab3 f383 	clz	r3, r3
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	095b      	lsrs	r3, r3, #5
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d102      	bne.n	80031f0 <HAL_RCC_ClockConfig+0x128>
 80031ea:	4b4f      	ldr	r3, [pc, #316]	; (8003328 <HAL_RCC_ClockConfig+0x260>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	e00f      	b.n	8003210 <HAL_RCC_ClockConfig+0x148>
 80031f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031f4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031f8:	fa93 f3a3 	rbit	r3, r3
 80031fc:	647b      	str	r3, [r7, #68]	; 0x44
 80031fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003202:	643b      	str	r3, [r7, #64]	; 0x40
 8003204:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003206:	fa93 f3a3 	rbit	r3, r3
 800320a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800320c:	4b46      	ldr	r3, [pc, #280]	; (8003328 <HAL_RCC_ClockConfig+0x260>)
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003214:	63ba      	str	r2, [r7, #56]	; 0x38
 8003216:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003218:	fa92 f2a2 	rbit	r2, r2
 800321c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800321e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003220:	fab2 f282 	clz	r2, r2
 8003224:	b2d2      	uxtb	r2, r2
 8003226:	f042 0220 	orr.w	r2, r2, #32
 800322a:	b2d2      	uxtb	r2, r2
 800322c:	f002 021f 	and.w	r2, r2, #31
 8003230:	2101      	movs	r1, #1
 8003232:	fa01 f202 	lsl.w	r2, r1, r2
 8003236:	4013      	ands	r3, r2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d13a      	bne.n	80032b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e0b2      	b.n	80033a6 <HAL_RCC_ClockConfig+0x2de>
 8003240:	2302      	movs	r3, #2
 8003242:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003246:	fa93 f3a3 	rbit	r3, r3
 800324a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800324c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800324e:	fab3 f383 	clz	r3, r3
 8003252:	b2db      	uxtb	r3, r3
 8003254:	095b      	lsrs	r3, r3, #5
 8003256:	b2db      	uxtb	r3, r3
 8003258:	f043 0301 	orr.w	r3, r3, #1
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b01      	cmp	r3, #1
 8003260:	d102      	bne.n	8003268 <HAL_RCC_ClockConfig+0x1a0>
 8003262:	4b31      	ldr	r3, [pc, #196]	; (8003328 <HAL_RCC_ClockConfig+0x260>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	e00d      	b.n	8003284 <HAL_RCC_ClockConfig+0x1bc>
 8003268:	2302      	movs	r3, #2
 800326a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326e:	fa93 f3a3 	rbit	r3, r3
 8003272:	627b      	str	r3, [r7, #36]	; 0x24
 8003274:	2302      	movs	r3, #2
 8003276:	623b      	str	r3, [r7, #32]
 8003278:	6a3b      	ldr	r3, [r7, #32]
 800327a:	fa93 f3a3 	rbit	r3, r3
 800327e:	61fb      	str	r3, [r7, #28]
 8003280:	4b29      	ldr	r3, [pc, #164]	; (8003328 <HAL_RCC_ClockConfig+0x260>)
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	2202      	movs	r2, #2
 8003286:	61ba      	str	r2, [r7, #24]
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	fa92 f2a2 	rbit	r2, r2
 800328e:	617a      	str	r2, [r7, #20]
  return result;
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	fab2 f282 	clz	r2, r2
 8003296:	b2d2      	uxtb	r2, r2
 8003298:	f042 0220 	orr.w	r2, r2, #32
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	f002 021f 	and.w	r2, r2, #31
 80032a2:	2101      	movs	r1, #1
 80032a4:	fa01 f202 	lsl.w	r2, r1, r2
 80032a8:	4013      	ands	r3, r2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e079      	b.n	80033a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032b2:	4b1d      	ldr	r3, [pc, #116]	; (8003328 <HAL_RCC_ClockConfig+0x260>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f023 0203 	bic.w	r2, r3, #3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	491a      	ldr	r1, [pc, #104]	; (8003328 <HAL_RCC_ClockConfig+0x260>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032c4:	f7fe fbf4 	bl	8001ab0 <HAL_GetTick>
 80032c8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ca:	e00a      	b.n	80032e2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032cc:	f7fe fbf0 	bl	8001ab0 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032da:	4293      	cmp	r3, r2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e061      	b.n	80033a6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e2:	4b11      	ldr	r3, [pc, #68]	; (8003328 <HAL_RCC_ClockConfig+0x260>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f003 020c 	and.w	r2, r3, #12
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d1eb      	bne.n	80032cc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032f4:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <HAL_RCC_ClockConfig+0x25c>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0307 	and.w	r3, r3, #7
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d214      	bcs.n	800332c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003302:	4b08      	ldr	r3, [pc, #32]	; (8003324 <HAL_RCC_ClockConfig+0x25c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f023 0207 	bic.w	r2, r3, #7
 800330a:	4906      	ldr	r1, [pc, #24]	; (8003324 <HAL_RCC_ClockConfig+0x25c>)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	4313      	orrs	r3, r2
 8003310:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003312:	4b04      	ldr	r3, [pc, #16]	; (8003324 <HAL_RCC_ClockConfig+0x25c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0307 	and.w	r3, r3, #7
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	429a      	cmp	r2, r3
 800331e:	d005      	beq.n	800332c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e040      	b.n	80033a6 <HAL_RCC_ClockConfig+0x2de>
 8003324:	40022000 	.word	0x40022000
 8003328:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0304 	and.w	r3, r3, #4
 8003334:	2b00      	cmp	r3, #0
 8003336:	d008      	beq.n	800334a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003338:	4b1d      	ldr	r3, [pc, #116]	; (80033b0 <HAL_RCC_ClockConfig+0x2e8>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	491a      	ldr	r1, [pc, #104]	; (80033b0 <HAL_RCC_ClockConfig+0x2e8>)
 8003346:	4313      	orrs	r3, r2
 8003348:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0308 	and.w	r3, r3, #8
 8003352:	2b00      	cmp	r3, #0
 8003354:	d009      	beq.n	800336a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003356:	4b16      	ldr	r3, [pc, #88]	; (80033b0 <HAL_RCC_ClockConfig+0x2e8>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	4912      	ldr	r1, [pc, #72]	; (80033b0 <HAL_RCC_ClockConfig+0x2e8>)
 8003366:	4313      	orrs	r3, r2
 8003368:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800336a:	f000 f829 	bl	80033c0 <HAL_RCC_GetSysClockFreq>
 800336e:	4601      	mov	r1, r0
 8003370:	4b0f      	ldr	r3, [pc, #60]	; (80033b0 <HAL_RCC_ClockConfig+0x2e8>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003378:	22f0      	movs	r2, #240	; 0xf0
 800337a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	fa92 f2a2 	rbit	r2, r2
 8003382:	60fa      	str	r2, [r7, #12]
  return result;
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	fab2 f282 	clz	r2, r2
 800338a:	b2d2      	uxtb	r2, r2
 800338c:	40d3      	lsrs	r3, r2
 800338e:	4a09      	ldr	r2, [pc, #36]	; (80033b4 <HAL_RCC_ClockConfig+0x2ec>)
 8003390:	5cd3      	ldrb	r3, [r2, r3]
 8003392:	fa21 f303 	lsr.w	r3, r1, r3
 8003396:	4a08      	ldr	r2, [pc, #32]	; (80033b8 <HAL_RCC_ClockConfig+0x2f0>)
 8003398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800339a:	4b08      	ldr	r3, [pc, #32]	; (80033bc <HAL_RCC_ClockConfig+0x2f4>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fe fb42 	bl	8001a28 <HAL_InitTick>
  
  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3778      	adds	r7, #120	; 0x78
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	40021000 	.word	0x40021000
 80033b4:	080060a0 	.word	0x080060a0
 80033b8:	20000008 	.word	0x20000008
 80033bc:	2000000c 	.word	0x2000000c

080033c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b08b      	sub	sp, #44	; 0x2c
 80033c4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	61fb      	str	r3, [r7, #28]
 80033ca:	2300      	movs	r3, #0
 80033cc:	61bb      	str	r3, [r7, #24]
 80033ce:	2300      	movs	r3, #0
 80033d0:	627b      	str	r3, [r7, #36]	; 0x24
 80033d2:	2300      	movs	r3, #0
 80033d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80033da:	4b2a      	ldr	r3, [pc, #168]	; (8003484 <HAL_RCC_GetSysClockFreq+0xc4>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	f003 030c 	and.w	r3, r3, #12
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	d002      	beq.n	80033f0 <HAL_RCC_GetSysClockFreq+0x30>
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	d003      	beq.n	80033f6 <HAL_RCC_GetSysClockFreq+0x36>
 80033ee:	e03f      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033f0:	4b25      	ldr	r3, [pc, #148]	; (8003488 <HAL_RCC_GetSysClockFreq+0xc8>)
 80033f2:	623b      	str	r3, [r7, #32]
      break;
 80033f4:	e03f      	b.n	8003476 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80033fc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003400:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	fa92 f2a2 	rbit	r2, r2
 8003408:	607a      	str	r2, [r7, #4]
  return result;
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	fab2 f282 	clz	r2, r2
 8003410:	b2d2      	uxtb	r2, r2
 8003412:	40d3      	lsrs	r3, r2
 8003414:	4a1d      	ldr	r2, [pc, #116]	; (800348c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003416:	5cd3      	ldrb	r3, [r2, r3]
 8003418:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800341a:	4b1a      	ldr	r3, [pc, #104]	; (8003484 <HAL_RCC_GetSysClockFreq+0xc4>)
 800341c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341e:	f003 030f 	and.w	r3, r3, #15
 8003422:	220f      	movs	r2, #15
 8003424:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	fa92 f2a2 	rbit	r2, r2
 800342c:	60fa      	str	r2, [r7, #12]
  return result;
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	fab2 f282 	clz	r2, r2
 8003434:	b2d2      	uxtb	r2, r2
 8003436:	40d3      	lsrs	r3, r2
 8003438:	4a15      	ldr	r2, [pc, #84]	; (8003490 <HAL_RCC_GetSysClockFreq+0xd0>)
 800343a:	5cd3      	ldrb	r3, [r2, r3]
 800343c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d008      	beq.n	800345a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003448:	4a0f      	ldr	r2, [pc, #60]	; (8003488 <HAL_RCC_GetSysClockFreq+0xc8>)
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	fb02 f303 	mul.w	r3, r2, r3
 8003456:	627b      	str	r3, [r7, #36]	; 0x24
 8003458:	e007      	b.n	800346a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800345a:	4a0b      	ldr	r2, [pc, #44]	; (8003488 <HAL_RCC_GetSysClockFreq+0xc8>)
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	fb02 f303 	mul.w	r3, r2, r3
 8003468:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	623b      	str	r3, [r7, #32]
      break;
 800346e:	e002      	b.n	8003476 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003470:	4b05      	ldr	r3, [pc, #20]	; (8003488 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003472:	623b      	str	r3, [r7, #32]
      break;
 8003474:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003476:	6a3b      	ldr	r3, [r7, #32]
}
 8003478:	4618      	mov	r0, r3
 800347a:	372c      	adds	r7, #44	; 0x2c
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	40021000 	.word	0x40021000
 8003488:	007a1200 	.word	0x007a1200
 800348c:	080060b8 	.word	0x080060b8
 8003490:	080060c8 	.word	0x080060c8

08003494 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003498:	4b03      	ldr	r3, [pc, #12]	; (80034a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800349a:	681b      	ldr	r3, [r3, #0]
}
 800349c:	4618      	mov	r0, r3
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	20000008 	.word	0x20000008

080034ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80034b2:	f7ff ffef 	bl	8003494 <HAL_RCC_GetHCLKFreq>
 80034b6:	4601      	mov	r1, r0
 80034b8:	4b0b      	ldr	r3, [pc, #44]	; (80034e8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80034c0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80034c4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	fa92 f2a2 	rbit	r2, r2
 80034cc:	603a      	str	r2, [r7, #0]
  return result;
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	fab2 f282 	clz	r2, r2
 80034d4:	b2d2      	uxtb	r2, r2
 80034d6:	40d3      	lsrs	r3, r2
 80034d8:	4a04      	ldr	r2, [pc, #16]	; (80034ec <HAL_RCC_GetPCLK1Freq+0x40>)
 80034da:	5cd3      	ldrb	r3, [r2, r3]
 80034dc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80034e0:	4618      	mov	r0, r3
 80034e2:	3708      	adds	r7, #8
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	40021000 	.word	0x40021000
 80034ec:	080060b0 	.word	0x080060b0

080034f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80034f6:	f7ff ffcd 	bl	8003494 <HAL_RCC_GetHCLKFreq>
 80034fa:	4601      	mov	r1, r0
 80034fc:	4b0b      	ldr	r3, [pc, #44]	; (800352c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003504:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003508:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	fa92 f2a2 	rbit	r2, r2
 8003510:	603a      	str	r2, [r7, #0]
  return result;
 8003512:	683a      	ldr	r2, [r7, #0]
 8003514:	fab2 f282 	clz	r2, r2
 8003518:	b2d2      	uxtb	r2, r2
 800351a:	40d3      	lsrs	r3, r2
 800351c:	4a04      	ldr	r2, [pc, #16]	; (8003530 <HAL_RCC_GetPCLK2Freq+0x40>)
 800351e:	5cd3      	ldrb	r3, [r2, r3]
 8003520:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003524:	4618      	mov	r0, r3
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40021000 	.word	0x40021000
 8003530:	080060b0 	.word	0x080060b0

08003534 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b092      	sub	sp, #72	; 0x48
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003540:	2300      	movs	r3, #0
 8003542:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003544:	2300      	movs	r3, #0
 8003546:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 80d4 	beq.w	8003700 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003558:	4b4e      	ldr	r3, [pc, #312]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800355a:	69db      	ldr	r3, [r3, #28]
 800355c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10e      	bne.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003564:	4b4b      	ldr	r3, [pc, #300]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003566:	69db      	ldr	r3, [r3, #28]
 8003568:	4a4a      	ldr	r2, [pc, #296]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800356a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800356e:	61d3      	str	r3, [r2, #28]
 8003570:	4b48      	ldr	r3, [pc, #288]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003572:	69db      	ldr	r3, [r3, #28]
 8003574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003578:	60bb      	str	r3, [r7, #8]
 800357a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800357c:	2301      	movs	r3, #1
 800357e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003582:	4b45      	ldr	r3, [pc, #276]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358a:	2b00      	cmp	r3, #0
 800358c:	d118      	bne.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800358e:	4b42      	ldr	r3, [pc, #264]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a41      	ldr	r2, [pc, #260]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003598:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800359a:	f7fe fa89 	bl	8001ab0 <HAL_GetTick>
 800359e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a0:	e008      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035a2:	f7fe fa85 	bl	8001ab0 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b64      	cmp	r3, #100	; 0x64
 80035ae:	d901      	bls.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e1d6      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b4:	4b38      	ldr	r3, [pc, #224]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0f0      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035c0:	4b34      	ldr	r3, [pc, #208]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 8084 	beq.w	80036da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035dc:	429a      	cmp	r2, r3
 80035de:	d07c      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035e0:	4b2c      	ldr	r3, [pc, #176]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f2:	fa93 f3a3 	rbit	r3, r3
 80035f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80035f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035fa:	fab3 f383 	clz	r3, r3
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	461a      	mov	r2, r3
 8003602:	4b26      	ldr	r3, [pc, #152]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003604:	4413      	add	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	461a      	mov	r2, r3
 800360a:	2301      	movs	r3, #1
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003612:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003616:	fa93 f3a3 	rbit	r3, r3
 800361a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800361c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800361e:	fab3 f383 	clz	r3, r3
 8003622:	b2db      	uxtb	r3, r3
 8003624:	461a      	mov	r2, r3
 8003626:	4b1d      	ldr	r3, [pc, #116]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003628:	4413      	add	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	461a      	mov	r2, r3
 800362e:	2300      	movs	r3, #0
 8003630:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003632:	4a18      	ldr	r2, [pc, #96]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003636:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b00      	cmp	r3, #0
 8003640:	d04b      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003642:	f7fe fa35 	bl	8001ab0 <HAL_GetTick>
 8003646:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003648:	e00a      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800364a:	f7fe fa31 	bl	8001ab0 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	f241 3288 	movw	r2, #5000	; 0x1388
 8003658:	4293      	cmp	r3, r2
 800365a:	d901      	bls.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e180      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003660:	2302      	movs	r3, #2
 8003662:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003666:	fa93 f3a3 	rbit	r3, r3
 800366a:	627b      	str	r3, [r7, #36]	; 0x24
 800366c:	2302      	movs	r3, #2
 800366e:	623b      	str	r3, [r7, #32]
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	fa93 f3a3 	rbit	r3, r3
 8003676:	61fb      	str	r3, [r7, #28]
  return result;
 8003678:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800367a:	fab3 f383 	clz	r3, r3
 800367e:	b2db      	uxtb	r3, r3
 8003680:	095b      	lsrs	r3, r3, #5
 8003682:	b2db      	uxtb	r3, r3
 8003684:	f043 0302 	orr.w	r3, r3, #2
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d108      	bne.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800368e:	4b01      	ldr	r3, [pc, #4]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	e00d      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003694:	40021000 	.word	0x40021000
 8003698:	40007000 	.word	0x40007000
 800369c:	10908100 	.word	0x10908100
 80036a0:	2302      	movs	r3, #2
 80036a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	fa93 f3a3 	rbit	r3, r3
 80036aa:	617b      	str	r3, [r7, #20]
 80036ac:	4b9a      	ldr	r3, [pc, #616]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	2202      	movs	r2, #2
 80036b2:	613a      	str	r2, [r7, #16]
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	fa92 f2a2 	rbit	r2, r2
 80036ba:	60fa      	str	r2, [r7, #12]
  return result;
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	fab2 f282 	clz	r2, r2
 80036c2:	b2d2      	uxtb	r2, r2
 80036c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036c8:	b2d2      	uxtb	r2, r2
 80036ca:	f002 021f 	and.w	r2, r2, #31
 80036ce:	2101      	movs	r1, #1
 80036d0:	fa01 f202 	lsl.w	r2, r1, r2
 80036d4:	4013      	ands	r3, r2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d0b7      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80036da:	4b8f      	ldr	r3, [pc, #572]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	498c      	ldr	r1, [pc, #560]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d105      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036f4:	4b88      	ldr	r3, [pc, #544]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036f6:	69db      	ldr	r3, [r3, #28]
 80036f8:	4a87      	ldr	r2, [pc, #540]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b00      	cmp	r3, #0
 800370a:	d008      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800370c:	4b82      	ldr	r3, [pc, #520]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800370e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003710:	f023 0203 	bic.w	r2, r3, #3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	497f      	ldr	r1, [pc, #508]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800371a:	4313      	orrs	r3, r2
 800371c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d008      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800372a:	4b7b      	ldr	r3, [pc, #492]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	4978      	ldr	r1, [pc, #480]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003738:	4313      	orrs	r3, r2
 800373a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b00      	cmp	r3, #0
 8003746:	d008      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003748:	4b73      	ldr	r3, [pc, #460]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800374a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	4970      	ldr	r1, [pc, #448]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003756:	4313      	orrs	r3, r2
 8003758:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0320 	and.w	r3, r3, #32
 8003762:	2b00      	cmp	r3, #0
 8003764:	d008      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003766:	4b6c      	ldr	r3, [pc, #432]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376a:	f023 0210 	bic.w	r2, r3, #16
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	4969      	ldr	r1, [pc, #420]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003774:	4313      	orrs	r3, r2
 8003776:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d008      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003784:	4b64      	ldr	r3, [pc, #400]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003790:	4961      	ldr	r1, [pc, #388]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003792:	4313      	orrs	r3, r2
 8003794:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d008      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80037a2:	4b5d      	ldr	r3, [pc, #372]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a6:	f023 0220 	bic.w	r2, r3, #32
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	495a      	ldr	r1, [pc, #360]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d008      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037c0:	4b55      	ldr	r3, [pc, #340]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	4952      	ldr	r1, [pc, #328]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0308 	and.w	r3, r3, #8
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d008      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037de:	4b4e      	ldr	r3, [pc, #312]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	494b      	ldr	r1, [pc, #300]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0310 	and.w	r3, r3, #16
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d008      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037fc:	4b46      	ldr	r3, [pc, #280]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003800:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	4943      	ldr	r1, [pc, #268]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800380a:	4313      	orrs	r3, r2
 800380c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003816:	2b00      	cmp	r3, #0
 8003818:	d008      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800381a:	4b3f      	ldr	r3, [pc, #252]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003826:	493c      	ldr	r1, [pc, #240]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003828:	4313      	orrs	r3, r2
 800382a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003834:	2b00      	cmp	r3, #0
 8003836:	d008      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003838:	4b37      	ldr	r3, [pc, #220]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800383a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003844:	4934      	ldr	r1, [pc, #208]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003846:	4313      	orrs	r3, r2
 8003848:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003852:	2b00      	cmp	r3, #0
 8003854:	d008      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003856:	4b30      	ldr	r3, [pc, #192]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003862:	492d      	ldr	r1, [pc, #180]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003864:	4313      	orrs	r3, r2
 8003866:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d008      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003874:	4b28      	ldr	r3, [pc, #160]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003878:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003880:	4925      	ldr	r1, [pc, #148]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003882:	4313      	orrs	r3, r2
 8003884:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d008      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003892:	4b21      	ldr	r3, [pc, #132]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003896:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	491e      	ldr	r1, [pc, #120]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d008      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80038b0:	4b19      	ldr	r3, [pc, #100]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038bc:	4916      	ldr	r1, [pc, #88]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d008      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80038ce:	4b12      	ldr	r3, [pc, #72]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038da:	490f      	ldr	r1, [pc, #60]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d008      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80038ec:	4b0a      	ldr	r3, [pc, #40]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f8:	4907      	ldr	r1, [pc, #28]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00c      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800390a:	4b03      	ldr	r3, [pc, #12]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800390c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	e002      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003916:	bf00      	nop
 8003918:	40021000 	.word	0x40021000
 800391c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800391e:	4913      	ldr	r1, [pc, #76]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003920:	4313      	orrs	r3, r2
 8003922:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d008      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003930:	4b0e      	ldr	r3, [pc, #56]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003934:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800393c:	490b      	ldr	r1, [pc, #44]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800393e:	4313      	orrs	r3, r2
 8003940:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d008      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800394e:	4b07      	ldr	r3, [pc, #28]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003952:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800395a:	4904      	ldr	r1, [pc, #16]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800395c:	4313      	orrs	r3, r2
 800395e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3748      	adds	r7, #72	; 0x48
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40021000 	.word	0x40021000

08003970 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e09d      	b.n	8003abe <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003986:	2b00      	cmp	r3, #0
 8003988:	d108      	bne.n	800399c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003992:	d009      	beq.n	80039a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	61da      	str	r2, [r3, #28]
 800399a:	e005      	b.n	80039a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d106      	bne.n	80039c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7fd fefa 	bl	80017bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2202      	movs	r2, #2
 80039cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039e8:	d902      	bls.n	80039f0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80039ea:	2300      	movs	r3, #0
 80039ec:	60fb      	str	r3, [r7, #12]
 80039ee:	e002      	b.n	80039f6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80039f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039f4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80039fe:	d007      	beq.n	8003a10 <HAL_SPI_Init+0xa0>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a08:	d002      	beq.n	8003a10 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003a20:	431a      	orrs	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	695b      	ldr	r3, [r3, #20]
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	431a      	orrs	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	69db      	ldr	r3, [r3, #28]
 8003a44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a48:	431a      	orrs	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a52:	ea42 0103 	orr.w	r1, r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	0c1b      	lsrs	r3, r3, #16
 8003a6c:	f003 0204 	and.w	r2, r3, #4
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a74:	f003 0310 	and.w	r3, r3, #16
 8003a78:	431a      	orrs	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a7e:	f003 0308 	and.w	r3, r3, #8
 8003a82:	431a      	orrs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003a8c:	ea42 0103 	orr.w	r1, r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	69da      	ldr	r2, [r3, #28]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b088      	sub	sp, #32
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	60f8      	str	r0, [r7, #12]
 8003ace:	60b9      	str	r1, [r7, #8]
 8003ad0:	603b      	str	r3, [r7, #0]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d101      	bne.n	8003ae8 <HAL_SPI_Transmit+0x22>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	e15f      	b.n	8003da8 <HAL_SPI_Transmit+0x2e2>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003af0:	f7fd ffde 	bl	8001ab0 <HAL_GetTick>
 8003af4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003af6:	88fb      	ldrh	r3, [r7, #6]
 8003af8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d002      	beq.n	8003b0c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003b06:	2302      	movs	r3, #2
 8003b08:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b0a:	e148      	b.n	8003d9e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d002      	beq.n	8003b18 <HAL_SPI_Transmit+0x52>
 8003b12:	88fb      	ldrh	r3, [r7, #6]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d102      	bne.n	8003b1e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b1c:	e13f      	b.n	8003d9e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2203      	movs	r2, #3
 8003b22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	88fa      	ldrh	r2, [r7, #6]
 8003b36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	88fa      	ldrh	r2, [r7, #6]
 8003b3c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2200      	movs	r2, #0
 8003b58:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b68:	d10f      	bne.n	8003b8a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b88:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b94:	2b40      	cmp	r3, #64	; 0x40
 8003b96:	d007      	beq.n	8003ba8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ba6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bb0:	d94f      	bls.n	8003c52 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d002      	beq.n	8003bc0 <HAL_SPI_Transmit+0xfa>
 8003bba:	8afb      	ldrh	r3, [r7, #22]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d142      	bne.n	8003c46 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc4:	881a      	ldrh	r2, [r3, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd0:	1c9a      	adds	r2, r3, #2
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003be4:	e02f      	b.n	8003c46 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d112      	bne.n	8003c1a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf8:	881a      	ldrh	r2, [r3, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c04:	1c9a      	adds	r2, r3, #2
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	3b01      	subs	r3, #1
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c18:	e015      	b.n	8003c46 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c1a:	f7fd ff49 	bl	8001ab0 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d803      	bhi.n	8003c32 <HAL_SPI_Transmit+0x16c>
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c30:	d102      	bne.n	8003c38 <HAL_SPI_Transmit+0x172>
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d106      	bne.n	8003c46 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003c44:	e0ab      	b.n	8003d9e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1ca      	bne.n	8003be6 <HAL_SPI_Transmit+0x120>
 8003c50:	e080      	b.n	8003d54 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d002      	beq.n	8003c60 <HAL_SPI_Transmit+0x19a>
 8003c5a:	8afb      	ldrh	r3, [r7, #22]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d174      	bne.n	8003d4a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d912      	bls.n	8003c90 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c6e:	881a      	ldrh	r2, [r3, #0]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7a:	1c9a      	adds	r2, r3, #2
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	3b02      	subs	r3, #2
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c8e:	e05c      	b.n	8003d4a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	330c      	adds	r3, #12
 8003c9a:	7812      	ldrb	r2, [r2, #0]
 8003c9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca2:	1c5a      	adds	r2, r3, #1
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003cb6:	e048      	b.n	8003d4a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d12b      	bne.n	8003d1e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d912      	bls.n	8003cf6 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd4:	881a      	ldrh	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce0:	1c9a      	adds	r2, r3, #2
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	3b02      	subs	r3, #2
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cf4:	e029      	b.n	8003d4a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	330c      	adds	r3, #12
 8003d00:	7812      	ldrb	r2, [r2, #0]
 8003d02:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d08:	1c5a      	adds	r2, r3, #1
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	3b01      	subs	r3, #1
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d1c:	e015      	b.n	8003d4a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d1e:	f7fd fec7 	bl	8001ab0 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d803      	bhi.n	8003d36 <HAL_SPI_Transmit+0x270>
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d34:	d102      	bne.n	8003d3c <HAL_SPI_Transmit+0x276>
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d106      	bne.n	8003d4a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003d48:	e029      	b.n	8003d9e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1b1      	bne.n	8003cb8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	6839      	ldr	r1, [r7, #0]
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	f000 fcf9 	bl	8004750 <SPI_EndRxTxTransaction>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d002      	beq.n	8003d6a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2220      	movs	r2, #32
 8003d68:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10a      	bne.n	8003d88 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d72:	2300      	movs	r3, #0
 8003d74:	613b      	str	r3, [r7, #16]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	613b      	str	r3, [r7, #16]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	613b      	str	r3, [r7, #16]
 8003d86:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d002      	beq.n	8003d96 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	77fb      	strb	r3, [r7, #31]
 8003d94:	e003      	b.n	8003d9e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003da6:	7ffb      	ldrb	r3, [r7, #31]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3720      	adds	r7, #32
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b088      	sub	sp, #32
 8003db4:	af02      	add	r7, sp, #8
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	603b      	str	r3, [r7, #0]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d002      	beq.n	8003dd6 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003dd4:	e11a      	b.n	800400c <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dde:	d112      	bne.n	8003e06 <HAL_SPI_Receive+0x56>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d10e      	bne.n	8003e06 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2204      	movs	r2, #4
 8003dec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003df0:	88fa      	ldrh	r2, [r7, #6]
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	4613      	mov	r3, r2
 8003df8:	68ba      	ldr	r2, [r7, #8]
 8003dfa:	68b9      	ldr	r1, [r7, #8]
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f000 f90e 	bl	800401e <HAL_SPI_TransmitReceive>
 8003e02:	4603      	mov	r3, r0
 8003e04:	e107      	b.n	8004016 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d101      	bne.n	8003e14 <HAL_SPI_Receive+0x64>
 8003e10:	2302      	movs	r3, #2
 8003e12:	e100      	b.n	8004016 <HAL_SPI_Receive+0x266>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e1c:	f7fd fe48 	bl	8001ab0 <HAL_GetTick>
 8003e20:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d002      	beq.n	8003e2e <HAL_SPI_Receive+0x7e>
 8003e28:	88fb      	ldrh	r3, [r7, #6]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d102      	bne.n	8003e34 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e32:	e0eb      	b.n	800400c <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2204      	movs	r2, #4
 8003e38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	88fa      	ldrh	r2, [r7, #6]
 8003e4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	88fa      	ldrh	r2, [r7, #6]
 8003e54:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e7e:	d908      	bls.n	8003e92 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685a      	ldr	r2, [r3, #4]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e8e:	605a      	str	r2, [r3, #4]
 8003e90:	e007      	b.n	8003ea2 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ea0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eaa:	d10f      	bne.n	8003ecc <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003eca:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed6:	2b40      	cmp	r3, #64	; 0x40
 8003ed8:	d007      	beq.n	8003eea <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ee8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ef2:	d86f      	bhi.n	8003fd4 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003ef4:	e034      	b.n	8003f60 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d117      	bne.n	8003f34 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f103 020c 	add.w	r2, r3, #12
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f10:	7812      	ldrb	r2, [r2, #0]
 8003f12:	b2d2      	uxtb	r2, r2
 8003f14:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	1c5a      	adds	r2, r3, #1
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003f32:	e015      	b.n	8003f60 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f34:	f7fd fdbc 	bl	8001ab0 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	683a      	ldr	r2, [r7, #0]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d803      	bhi.n	8003f4c <HAL_SPI_Receive+0x19c>
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f4a:	d102      	bne.n	8003f52 <HAL_SPI_Receive+0x1a2>
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d106      	bne.n	8003f60 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003f5e:	e055      	b.n	800400c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1c4      	bne.n	8003ef6 <HAL_SPI_Receive+0x146>
 8003f6c:	e038      	b.n	8003fe0 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d115      	bne.n	8003fa8 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68da      	ldr	r2, [r3, #12]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	b292      	uxth	r2, r2
 8003f88:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	1c9a      	adds	r2, r3, #2
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003fa6:	e015      	b.n	8003fd4 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fa8:	f7fd fd82 	bl	8001ab0 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	683a      	ldr	r2, [r7, #0]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d803      	bhi.n	8003fc0 <HAL_SPI_Receive+0x210>
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fbe:	d102      	bne.n	8003fc6 <HAL_SPI_Receive+0x216>
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d106      	bne.n	8003fd4 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003fd2:	e01b      	b.n	800400c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d1c6      	bne.n	8003f6e <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	6839      	ldr	r1, [r7, #0]
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 fb5b 	bl	80046a0 <SPI_EndRxTransaction>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d002      	beq.n	8003ff6 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d002      	beq.n	8004004 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	75fb      	strb	r3, [r7, #23]
 8004002:	e003      	b.n	800400c <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004014:	7dfb      	ldrb	r3, [r7, #23]
}
 8004016:	4618      	mov	r0, r3
 8004018:	3718      	adds	r7, #24
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800401e:	b580      	push	{r7, lr}
 8004020:	b08a      	sub	sp, #40	; 0x28
 8004022:	af00      	add	r7, sp, #0
 8004024:	60f8      	str	r0, [r7, #12]
 8004026:	60b9      	str	r1, [r7, #8]
 8004028:	607a      	str	r2, [r7, #4]
 800402a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800402c:	2301      	movs	r3, #1
 800402e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004030:	2300      	movs	r3, #0
 8004032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800403c:	2b01      	cmp	r3, #1
 800403e:	d101      	bne.n	8004044 <HAL_SPI_TransmitReceive+0x26>
 8004040:	2302      	movs	r3, #2
 8004042:	e20a      	b.n	800445a <HAL_SPI_TransmitReceive+0x43c>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800404c:	f7fd fd30 	bl	8001ab0 <HAL_GetTick>
 8004050:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004058:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004060:	887b      	ldrh	r3, [r7, #2]
 8004062:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004064:	887b      	ldrh	r3, [r7, #2]
 8004066:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004068:	7efb      	ldrb	r3, [r7, #27]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d00e      	beq.n	800408c <HAL_SPI_TransmitReceive+0x6e>
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004074:	d106      	bne.n	8004084 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d102      	bne.n	8004084 <HAL_SPI_TransmitReceive+0x66>
 800407e:	7efb      	ldrb	r3, [r7, #27]
 8004080:	2b04      	cmp	r3, #4
 8004082:	d003      	beq.n	800408c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004084:	2302      	movs	r3, #2
 8004086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800408a:	e1e0      	b.n	800444e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d005      	beq.n	800409e <HAL_SPI_TransmitReceive+0x80>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d002      	beq.n	800409e <HAL_SPI_TransmitReceive+0x80>
 8004098:	887b      	ldrh	r3, [r7, #2]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d103      	bne.n	80040a6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80040a4:	e1d3      	b.n	800444e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b04      	cmp	r3, #4
 80040b0:	d003      	beq.n	80040ba <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2205      	movs	r2, #5
 80040b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	887a      	ldrh	r2, [r7, #2]
 80040ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	887a      	ldrh	r2, [r7, #2]
 80040d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	68ba      	ldr	r2, [r7, #8]
 80040da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	887a      	ldrh	r2, [r7, #2]
 80040e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	887a      	ldrh	r2, [r7, #2]
 80040e6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040fc:	d802      	bhi.n	8004104 <HAL_SPI_TransmitReceive+0xe6>
 80040fe:	8a3b      	ldrh	r3, [r7, #16]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d908      	bls.n	8004116 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685a      	ldr	r2, [r3, #4]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004112:	605a      	str	r2, [r3, #4]
 8004114:	e007      	b.n	8004126 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004124:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004130:	2b40      	cmp	r3, #64	; 0x40
 8004132:	d007      	beq.n	8004144 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004142:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800414c:	f240 8081 	bls.w	8004252 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d002      	beq.n	800415e <HAL_SPI_TransmitReceive+0x140>
 8004158:	8a7b      	ldrh	r3, [r7, #18]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d16d      	bne.n	800423a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004162:	881a      	ldrh	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416e:	1c9a      	adds	r2, r3, #2
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004178:	b29b      	uxth	r3, r3
 800417a:	3b01      	subs	r3, #1
 800417c:	b29a      	uxth	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004182:	e05a      	b.n	800423a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b02      	cmp	r3, #2
 8004190:	d11b      	bne.n	80041ca <HAL_SPI_TransmitReceive+0x1ac>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004196:	b29b      	uxth	r3, r3
 8004198:	2b00      	cmp	r3, #0
 800419a:	d016      	beq.n	80041ca <HAL_SPI_TransmitReceive+0x1ac>
 800419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d113      	bne.n	80041ca <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a6:	881a      	ldrh	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b2:	1c9a      	adds	r2, r3, #2
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041bc:	b29b      	uxth	r3, r3
 80041be:	3b01      	subs	r3, #1
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041c6:	2300      	movs	r3, #0
 80041c8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d11c      	bne.n	8004212 <HAL_SPI_TransmitReceive+0x1f4>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041de:	b29b      	uxth	r3, r3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d016      	beq.n	8004212 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68da      	ldr	r2, [r3, #12]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	b292      	uxth	r2, r2
 80041f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	1c9a      	adds	r2, r3, #2
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004202:	b29b      	uxth	r3, r3
 8004204:	3b01      	subs	r3, #1
 8004206:	b29a      	uxth	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800420e:	2301      	movs	r3, #1
 8004210:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004212:	f7fd fc4d 	bl	8001ab0 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800421e:	429a      	cmp	r2, r3
 8004220:	d80b      	bhi.n	800423a <HAL_SPI_TransmitReceive+0x21c>
 8004222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004228:	d007      	beq.n	800423a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004238:	e109      	b.n	800444e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800423e:	b29b      	uxth	r3, r3
 8004240:	2b00      	cmp	r3, #0
 8004242:	d19f      	bne.n	8004184 <HAL_SPI_TransmitReceive+0x166>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800424a:	b29b      	uxth	r3, r3
 800424c:	2b00      	cmp	r3, #0
 800424e:	d199      	bne.n	8004184 <HAL_SPI_TransmitReceive+0x166>
 8004250:	e0e3      	b.n	800441a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <HAL_SPI_TransmitReceive+0x244>
 800425a:	8a7b      	ldrh	r3, [r7, #18]
 800425c:	2b01      	cmp	r3, #1
 800425e:	f040 80cf 	bne.w	8004400 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004266:	b29b      	uxth	r3, r3
 8004268:	2b01      	cmp	r3, #1
 800426a:	d912      	bls.n	8004292 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004270:	881a      	ldrh	r2, [r3, #0]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427c:	1c9a      	adds	r2, r3, #2
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004286:	b29b      	uxth	r3, r3
 8004288:	3b02      	subs	r3, #2
 800428a:	b29a      	uxth	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004290:	e0b6      	b.n	8004400 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	330c      	adds	r3, #12
 800429c:	7812      	ldrb	r2, [r2, #0]
 800429e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a4:	1c5a      	adds	r2, r3, #1
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	3b01      	subs	r3, #1
 80042b2:	b29a      	uxth	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042b8:	e0a2      	b.n	8004400 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d134      	bne.n	8004332 <HAL_SPI_TransmitReceive+0x314>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d02f      	beq.n	8004332 <HAL_SPI_TransmitReceive+0x314>
 80042d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d12c      	bne.n	8004332 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042dc:	b29b      	uxth	r3, r3
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d912      	bls.n	8004308 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e6:	881a      	ldrh	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f2:	1c9a      	adds	r2, r3, #2
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	3b02      	subs	r3, #2
 8004300:	b29a      	uxth	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004306:	e012      	b.n	800432e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	330c      	adds	r3, #12
 8004312:	7812      	ldrb	r2, [r2, #0]
 8004314:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431a:	1c5a      	adds	r2, r3, #1
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004324:	b29b      	uxth	r3, r3
 8004326:	3b01      	subs	r3, #1
 8004328:	b29a      	uxth	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800432e:	2300      	movs	r3, #0
 8004330:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b01      	cmp	r3, #1
 800433e:	d148      	bne.n	80043d2 <HAL_SPI_TransmitReceive+0x3b4>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004346:	b29b      	uxth	r3, r3
 8004348:	2b00      	cmp	r3, #0
 800434a:	d042      	beq.n	80043d2 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004352:	b29b      	uxth	r3, r3
 8004354:	2b01      	cmp	r3, #1
 8004356:	d923      	bls.n	80043a0 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68da      	ldr	r2, [r3, #12]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	b292      	uxth	r2, r2
 8004364:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	1c9a      	adds	r2, r3, #2
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004376:	b29b      	uxth	r3, r3
 8004378:	3b02      	subs	r3, #2
 800437a:	b29a      	uxth	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004388:	b29b      	uxth	r3, r3
 800438a:	2b01      	cmp	r3, #1
 800438c:	d81f      	bhi.n	80043ce <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	685a      	ldr	r2, [r3, #4]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800439c:	605a      	str	r2, [r3, #4]
 800439e:	e016      	b.n	80043ce <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f103 020c 	add.w	r2, r3, #12
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ac:	7812      	ldrb	r2, [r2, #0]
 80043ae:	b2d2      	uxtb	r2, r2
 80043b0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	1c5a      	adds	r2, r3, #1
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	3b01      	subs	r3, #1
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043ce:	2301      	movs	r3, #1
 80043d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80043d2:	f7fd fb6d 	bl	8001ab0 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043de:	429a      	cmp	r2, r3
 80043e0:	d803      	bhi.n	80043ea <HAL_SPI_TransmitReceive+0x3cc>
 80043e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e8:	d102      	bne.n	80043f0 <HAL_SPI_TransmitReceive+0x3d2>
 80043ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d107      	bne.n	8004400 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80043fe:	e026      	b.n	800444e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004404:	b29b      	uxth	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	f47f af57 	bne.w	80042ba <HAL_SPI_TransmitReceive+0x29c>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004412:	b29b      	uxth	r3, r3
 8004414:	2b00      	cmp	r3, #0
 8004416:	f47f af50 	bne.w	80042ba <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800441a:	69fa      	ldr	r2, [r7, #28]
 800441c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f000 f996 	bl	8004750 <SPI_EndRxTxTransaction>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d005      	beq.n	8004436 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2220      	movs	r2, #32
 8004434:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800443a:	2b00      	cmp	r3, #0
 800443c:	d003      	beq.n	8004446 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004444:	e003      	b.n	800444e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004456:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800445a:	4618      	mov	r0, r3
 800445c:	3728      	adds	r7, #40	; 0x28
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
	...

08004464 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b088      	sub	sp, #32
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	603b      	str	r3, [r7, #0]
 8004470:	4613      	mov	r3, r2
 8004472:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004474:	f7fd fb1c 	bl	8001ab0 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800447c:	1a9b      	subs	r3, r3, r2
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	4413      	add	r3, r2
 8004482:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004484:	f7fd fb14 	bl	8001ab0 <HAL_GetTick>
 8004488:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800448a:	4b39      	ldr	r3, [pc, #228]	; (8004570 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	015b      	lsls	r3, r3, #5
 8004490:	0d1b      	lsrs	r3, r3, #20
 8004492:	69fa      	ldr	r2, [r7, #28]
 8004494:	fb02 f303 	mul.w	r3, r2, r3
 8004498:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800449a:	e054      	b.n	8004546 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a2:	d050      	beq.n	8004546 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80044a4:	f7fd fb04 	bl	8001ab0 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	69fa      	ldr	r2, [r7, #28]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d902      	bls.n	80044ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d13d      	bne.n	8004536 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	685a      	ldr	r2, [r3, #4]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80044c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044d2:	d111      	bne.n	80044f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044dc:	d004      	beq.n	80044e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044e6:	d107      	bne.n	80044f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004500:	d10f      	bne.n	8004522 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004510:	601a      	str	r2, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004520:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e017      	b.n	8004566 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d101      	bne.n	8004540 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800453c:	2300      	movs	r3, #0
 800453e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	3b01      	subs	r3, #1
 8004544:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	689a      	ldr	r2, [r3, #8]
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	4013      	ands	r3, r2
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	429a      	cmp	r2, r3
 8004554:	bf0c      	ite	eq
 8004556:	2301      	moveq	r3, #1
 8004558:	2300      	movne	r3, #0
 800455a:	b2db      	uxtb	r3, r3
 800455c:	461a      	mov	r2, r3
 800455e:	79fb      	ldrb	r3, [r7, #7]
 8004560:	429a      	cmp	r2, r3
 8004562:	d19b      	bne.n	800449c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3720      	adds	r7, #32
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	20000008 	.word	0x20000008

08004574 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b08a      	sub	sp, #40	; 0x28
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
 8004580:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004582:	2300      	movs	r3, #0
 8004584:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004586:	f7fd fa93 	bl	8001ab0 <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458e:	1a9b      	subs	r3, r3, r2
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	4413      	add	r3, r2
 8004594:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004596:	f7fd fa8b 	bl	8001ab0 <HAL_GetTick>
 800459a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	330c      	adds	r3, #12
 80045a2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80045a4:	4b3d      	ldr	r3, [pc, #244]	; (800469c <SPI_WaitFifoStateUntilTimeout+0x128>)
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	4613      	mov	r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	4413      	add	r3, r2
 80045ae:	00da      	lsls	r2, r3, #3
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	0d1b      	lsrs	r3, r3, #20
 80045b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045b6:	fb02 f303 	mul.w	r3, r2, r3
 80045ba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80045bc:	e060      	b.n	8004680 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80045c4:	d107      	bne.n	80045d6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d104      	bne.n	80045d6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80045d4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045dc:	d050      	beq.n	8004680 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045de:	f7fd fa67 	bl	8001ab0 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	6a3b      	ldr	r3, [r7, #32]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d902      	bls.n	80045f4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80045ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d13d      	bne.n	8004670 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	685a      	ldr	r2, [r3, #4]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004602:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800460c:	d111      	bne.n	8004632 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004616:	d004      	beq.n	8004622 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004620:	d107      	bne.n	8004632 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004630:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004636:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800463a:	d10f      	bne.n	800465c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800464a:	601a      	str	r2, [r3, #0]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800465a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e010      	b.n	8004692 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004676:	2300      	movs	r3, #0
 8004678:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	3b01      	subs	r3, #1
 800467e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689a      	ldr	r2, [r3, #8]
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	4013      	ands	r3, r2
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	429a      	cmp	r2, r3
 800468e:	d196      	bne.n	80045be <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3728      	adds	r7, #40	; 0x28
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	20000008 	.word	0x20000008

080046a0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af02      	add	r7, sp, #8
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046b4:	d111      	bne.n	80046da <SPI_EndRxTransaction+0x3a>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046be:	d004      	beq.n	80046ca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046c8:	d107      	bne.n	80046da <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046d8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	9300      	str	r3, [sp, #0]
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	2200      	movs	r2, #0
 80046e2:	2180      	movs	r1, #128	; 0x80
 80046e4:	68f8      	ldr	r0, [r7, #12]
 80046e6:	f7ff febd 	bl	8004464 <SPI_WaitFlagStateUntilTimeout>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d007      	beq.n	8004700 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046f4:	f043 0220 	orr.w	r2, r3, #32
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e023      	b.n	8004748 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004708:	d11d      	bne.n	8004746 <SPI_EndRxTransaction+0xa6>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004712:	d004      	beq.n	800471e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800471c:	d113      	bne.n	8004746 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	2200      	movs	r2, #0
 8004726:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f7ff ff22 	bl	8004574 <SPI_WaitFifoStateUntilTimeout>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d007      	beq.n	8004746 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800473a:	f043 0220 	orr.w	r2, r3, #32
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e000      	b.n	8004748 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3710      	adds	r7, #16
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af02      	add	r7, sp, #8
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	9300      	str	r3, [sp, #0]
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	2200      	movs	r2, #0
 8004764:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f7ff ff03 	bl	8004574 <SPI_WaitFifoStateUntilTimeout>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d007      	beq.n	8004784 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004778:	f043 0220 	orr.w	r2, r3, #32
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e027      	b.n	80047d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	9300      	str	r3, [sp, #0]
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	2200      	movs	r2, #0
 800478c:	2180      	movs	r1, #128	; 0x80
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f7ff fe68 	bl	8004464 <SPI_WaitFlagStateUntilTimeout>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d007      	beq.n	80047aa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800479e:	f043 0220 	orr.w	r2, r3, #32
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e014      	b.n	80047d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f7ff fedc 	bl	8004574 <SPI_WaitFifoStateUntilTimeout>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d007      	beq.n	80047d2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047c6:	f043 0220 	orr.w	r2, r3, #32
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e000      	b.n	80047d4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e040      	b.n	8004870 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d106      	bne.n	8004804 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7fd f81e 	bl	8001840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2224      	movs	r2, #36	; 0x24
 8004808:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f022 0201 	bic.w	r2, r2, #1
 8004818:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 f8b6 	bl	800498c <UART_SetConfig>
 8004820:	4603      	mov	r3, r0
 8004822:	2b01      	cmp	r3, #1
 8004824:	d101      	bne.n	800482a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e022      	b.n	8004870 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482e:	2b00      	cmp	r3, #0
 8004830:	d002      	beq.n	8004838 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 fa7e 	bl	8004d34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004846:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689a      	ldr	r2, [r3, #8]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004856:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f042 0201 	orr.w	r2, r2, #1
 8004866:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 fb05 	bl	8004e78 <UART_CheckIdleState>
 800486e:	4603      	mov	r3, r0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3708      	adds	r7, #8
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b08a      	sub	sp, #40	; 0x28
 800487c:	af02      	add	r7, sp, #8
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	603b      	str	r3, [r7, #0]
 8004884:	4613      	mov	r3, r2
 8004886:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800488c:	2b20      	cmp	r3, #32
 800488e:	d178      	bne.n	8004982 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d002      	beq.n	800489c <HAL_UART_Transmit+0x24>
 8004896:	88fb      	ldrh	r3, [r7, #6]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d101      	bne.n	80048a0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e071      	b.n	8004984 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2221      	movs	r2, #33	; 0x21
 80048ac:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048ae:	f7fd f8ff 	bl	8001ab0 <HAL_GetTick>
 80048b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	88fa      	ldrh	r2, [r7, #6]
 80048b8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	88fa      	ldrh	r2, [r7, #6]
 80048c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048cc:	d108      	bne.n	80048e0 <HAL_UART_Transmit+0x68>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d104      	bne.n	80048e0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80048d6:	2300      	movs	r3, #0
 80048d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	61bb      	str	r3, [r7, #24]
 80048de:	e003      	b.n	80048e8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048e4:	2300      	movs	r3, #0
 80048e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80048e8:	e030      	b.n	800494c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	9300      	str	r3, [sp, #0]
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	2200      	movs	r2, #0
 80048f2:	2180      	movs	r1, #128	; 0x80
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f000 fb67 	bl	8004fc8 <UART_WaitOnFlagUntilTimeout>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d004      	beq.n	800490a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2220      	movs	r2, #32
 8004904:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e03c      	b.n	8004984 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10b      	bne.n	8004928 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	881a      	ldrh	r2, [r3, #0]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800491c:	b292      	uxth	r2, r2
 800491e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	3302      	adds	r3, #2
 8004924:	61bb      	str	r3, [r7, #24]
 8004926:	e008      	b.n	800493a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	781a      	ldrb	r2, [r3, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	b292      	uxth	r2, r2
 8004932:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	3301      	adds	r3, #1
 8004938:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004940:	b29b      	uxth	r3, r3
 8004942:	3b01      	subs	r3, #1
 8004944:	b29a      	uxth	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004952:	b29b      	uxth	r3, r3
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1c8      	bne.n	80048ea <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	9300      	str	r3, [sp, #0]
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	2200      	movs	r2, #0
 8004960:	2140      	movs	r1, #64	; 0x40
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f000 fb30 	bl	8004fc8 <UART_WaitOnFlagUntilTimeout>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d004      	beq.n	8004978 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2220      	movs	r2, #32
 8004972:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e005      	b.n	8004984 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2220      	movs	r2, #32
 800497c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800497e:	2300      	movs	r3, #0
 8004980:	e000      	b.n	8004984 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004982:	2302      	movs	r3, #2
  }
}
 8004984:	4618      	mov	r0, r3
 8004986:	3720      	adds	r7, #32
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b088      	sub	sp, #32
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004994:	2300      	movs	r3, #0
 8004996:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689a      	ldr	r2, [r3, #8]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	431a      	orrs	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	431a      	orrs	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	69db      	ldr	r3, [r3, #28]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	4b92      	ldr	r3, [pc, #584]	; (8004c00 <UART_SetConfig+0x274>)
 80049b8:	4013      	ands	r3, r2
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	6812      	ldr	r2, [r2, #0]
 80049be:	6979      	ldr	r1, [r7, #20]
 80049c0:	430b      	orrs	r3, r1
 80049c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	68da      	ldr	r2, [r3, #12]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a1b      	ldr	r3, [r3, #32]
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a80      	ldr	r2, [pc, #512]	; (8004c04 <UART_SetConfig+0x278>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d120      	bne.n	8004a4a <UART_SetConfig+0xbe>
 8004a08:	4b7f      	ldr	r3, [pc, #508]	; (8004c08 <UART_SetConfig+0x27c>)
 8004a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0c:	f003 0303 	and.w	r3, r3, #3
 8004a10:	2b03      	cmp	r3, #3
 8004a12:	d817      	bhi.n	8004a44 <UART_SetConfig+0xb8>
 8004a14:	a201      	add	r2, pc, #4	; (adr r2, 8004a1c <UART_SetConfig+0x90>)
 8004a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a1a:	bf00      	nop
 8004a1c:	08004a2d 	.word	0x08004a2d
 8004a20:	08004a39 	.word	0x08004a39
 8004a24:	08004a3f 	.word	0x08004a3f
 8004a28:	08004a33 	.word	0x08004a33
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	77fb      	strb	r3, [r7, #31]
 8004a30:	e0b5      	b.n	8004b9e <UART_SetConfig+0x212>
 8004a32:	2302      	movs	r3, #2
 8004a34:	77fb      	strb	r3, [r7, #31]
 8004a36:	e0b2      	b.n	8004b9e <UART_SetConfig+0x212>
 8004a38:	2304      	movs	r3, #4
 8004a3a:	77fb      	strb	r3, [r7, #31]
 8004a3c:	e0af      	b.n	8004b9e <UART_SetConfig+0x212>
 8004a3e:	2308      	movs	r3, #8
 8004a40:	77fb      	strb	r3, [r7, #31]
 8004a42:	e0ac      	b.n	8004b9e <UART_SetConfig+0x212>
 8004a44:	2310      	movs	r3, #16
 8004a46:	77fb      	strb	r3, [r7, #31]
 8004a48:	e0a9      	b.n	8004b9e <UART_SetConfig+0x212>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a6f      	ldr	r2, [pc, #444]	; (8004c0c <UART_SetConfig+0x280>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d124      	bne.n	8004a9e <UART_SetConfig+0x112>
 8004a54:	4b6c      	ldr	r3, [pc, #432]	; (8004c08 <UART_SetConfig+0x27c>)
 8004a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a5c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a60:	d011      	beq.n	8004a86 <UART_SetConfig+0xfa>
 8004a62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a66:	d817      	bhi.n	8004a98 <UART_SetConfig+0x10c>
 8004a68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a6c:	d011      	beq.n	8004a92 <UART_SetConfig+0x106>
 8004a6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a72:	d811      	bhi.n	8004a98 <UART_SetConfig+0x10c>
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d003      	beq.n	8004a80 <UART_SetConfig+0xf4>
 8004a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a7c:	d006      	beq.n	8004a8c <UART_SetConfig+0x100>
 8004a7e:	e00b      	b.n	8004a98 <UART_SetConfig+0x10c>
 8004a80:	2300      	movs	r3, #0
 8004a82:	77fb      	strb	r3, [r7, #31]
 8004a84:	e08b      	b.n	8004b9e <UART_SetConfig+0x212>
 8004a86:	2302      	movs	r3, #2
 8004a88:	77fb      	strb	r3, [r7, #31]
 8004a8a:	e088      	b.n	8004b9e <UART_SetConfig+0x212>
 8004a8c:	2304      	movs	r3, #4
 8004a8e:	77fb      	strb	r3, [r7, #31]
 8004a90:	e085      	b.n	8004b9e <UART_SetConfig+0x212>
 8004a92:	2308      	movs	r3, #8
 8004a94:	77fb      	strb	r3, [r7, #31]
 8004a96:	e082      	b.n	8004b9e <UART_SetConfig+0x212>
 8004a98:	2310      	movs	r3, #16
 8004a9a:	77fb      	strb	r3, [r7, #31]
 8004a9c:	e07f      	b.n	8004b9e <UART_SetConfig+0x212>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a5b      	ldr	r2, [pc, #364]	; (8004c10 <UART_SetConfig+0x284>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d124      	bne.n	8004af2 <UART_SetConfig+0x166>
 8004aa8:	4b57      	ldr	r3, [pc, #348]	; (8004c08 <UART_SetConfig+0x27c>)
 8004aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aac:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004ab0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004ab4:	d011      	beq.n	8004ada <UART_SetConfig+0x14e>
 8004ab6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004aba:	d817      	bhi.n	8004aec <UART_SetConfig+0x160>
 8004abc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ac0:	d011      	beq.n	8004ae6 <UART_SetConfig+0x15a>
 8004ac2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ac6:	d811      	bhi.n	8004aec <UART_SetConfig+0x160>
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d003      	beq.n	8004ad4 <UART_SetConfig+0x148>
 8004acc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ad0:	d006      	beq.n	8004ae0 <UART_SetConfig+0x154>
 8004ad2:	e00b      	b.n	8004aec <UART_SetConfig+0x160>
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	77fb      	strb	r3, [r7, #31]
 8004ad8:	e061      	b.n	8004b9e <UART_SetConfig+0x212>
 8004ada:	2302      	movs	r3, #2
 8004adc:	77fb      	strb	r3, [r7, #31]
 8004ade:	e05e      	b.n	8004b9e <UART_SetConfig+0x212>
 8004ae0:	2304      	movs	r3, #4
 8004ae2:	77fb      	strb	r3, [r7, #31]
 8004ae4:	e05b      	b.n	8004b9e <UART_SetConfig+0x212>
 8004ae6:	2308      	movs	r3, #8
 8004ae8:	77fb      	strb	r3, [r7, #31]
 8004aea:	e058      	b.n	8004b9e <UART_SetConfig+0x212>
 8004aec:	2310      	movs	r3, #16
 8004aee:	77fb      	strb	r3, [r7, #31]
 8004af0:	e055      	b.n	8004b9e <UART_SetConfig+0x212>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a47      	ldr	r2, [pc, #284]	; (8004c14 <UART_SetConfig+0x288>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d124      	bne.n	8004b46 <UART_SetConfig+0x1ba>
 8004afc:	4b42      	ldr	r3, [pc, #264]	; (8004c08 <UART_SetConfig+0x27c>)
 8004afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b00:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004b04:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b08:	d011      	beq.n	8004b2e <UART_SetConfig+0x1a2>
 8004b0a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b0e:	d817      	bhi.n	8004b40 <UART_SetConfig+0x1b4>
 8004b10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b14:	d011      	beq.n	8004b3a <UART_SetConfig+0x1ae>
 8004b16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b1a:	d811      	bhi.n	8004b40 <UART_SetConfig+0x1b4>
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d003      	beq.n	8004b28 <UART_SetConfig+0x19c>
 8004b20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b24:	d006      	beq.n	8004b34 <UART_SetConfig+0x1a8>
 8004b26:	e00b      	b.n	8004b40 <UART_SetConfig+0x1b4>
 8004b28:	2300      	movs	r3, #0
 8004b2a:	77fb      	strb	r3, [r7, #31]
 8004b2c:	e037      	b.n	8004b9e <UART_SetConfig+0x212>
 8004b2e:	2302      	movs	r3, #2
 8004b30:	77fb      	strb	r3, [r7, #31]
 8004b32:	e034      	b.n	8004b9e <UART_SetConfig+0x212>
 8004b34:	2304      	movs	r3, #4
 8004b36:	77fb      	strb	r3, [r7, #31]
 8004b38:	e031      	b.n	8004b9e <UART_SetConfig+0x212>
 8004b3a:	2308      	movs	r3, #8
 8004b3c:	77fb      	strb	r3, [r7, #31]
 8004b3e:	e02e      	b.n	8004b9e <UART_SetConfig+0x212>
 8004b40:	2310      	movs	r3, #16
 8004b42:	77fb      	strb	r3, [r7, #31]
 8004b44:	e02b      	b.n	8004b9e <UART_SetConfig+0x212>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a33      	ldr	r2, [pc, #204]	; (8004c18 <UART_SetConfig+0x28c>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d124      	bne.n	8004b9a <UART_SetConfig+0x20e>
 8004b50:	4b2d      	ldr	r3, [pc, #180]	; (8004c08 <UART_SetConfig+0x27c>)
 8004b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b54:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004b58:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b5c:	d011      	beq.n	8004b82 <UART_SetConfig+0x1f6>
 8004b5e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b62:	d817      	bhi.n	8004b94 <UART_SetConfig+0x208>
 8004b64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b68:	d011      	beq.n	8004b8e <UART_SetConfig+0x202>
 8004b6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b6e:	d811      	bhi.n	8004b94 <UART_SetConfig+0x208>
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d003      	beq.n	8004b7c <UART_SetConfig+0x1f0>
 8004b74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b78:	d006      	beq.n	8004b88 <UART_SetConfig+0x1fc>
 8004b7a:	e00b      	b.n	8004b94 <UART_SetConfig+0x208>
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	77fb      	strb	r3, [r7, #31]
 8004b80:	e00d      	b.n	8004b9e <UART_SetConfig+0x212>
 8004b82:	2302      	movs	r3, #2
 8004b84:	77fb      	strb	r3, [r7, #31]
 8004b86:	e00a      	b.n	8004b9e <UART_SetConfig+0x212>
 8004b88:	2304      	movs	r3, #4
 8004b8a:	77fb      	strb	r3, [r7, #31]
 8004b8c:	e007      	b.n	8004b9e <UART_SetConfig+0x212>
 8004b8e:	2308      	movs	r3, #8
 8004b90:	77fb      	strb	r3, [r7, #31]
 8004b92:	e004      	b.n	8004b9e <UART_SetConfig+0x212>
 8004b94:	2310      	movs	r3, #16
 8004b96:	77fb      	strb	r3, [r7, #31]
 8004b98:	e001      	b.n	8004b9e <UART_SetConfig+0x212>
 8004b9a:	2310      	movs	r3, #16
 8004b9c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	69db      	ldr	r3, [r3, #28]
 8004ba2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ba6:	d16b      	bne.n	8004c80 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8004ba8:	7ffb      	ldrb	r3, [r7, #31]
 8004baa:	2b08      	cmp	r3, #8
 8004bac:	d838      	bhi.n	8004c20 <UART_SetConfig+0x294>
 8004bae:	a201      	add	r2, pc, #4	; (adr r2, 8004bb4 <UART_SetConfig+0x228>)
 8004bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb4:	08004bd9 	.word	0x08004bd9
 8004bb8:	08004be1 	.word	0x08004be1
 8004bbc:	08004be9 	.word	0x08004be9
 8004bc0:	08004c21 	.word	0x08004c21
 8004bc4:	08004bef 	.word	0x08004bef
 8004bc8:	08004c21 	.word	0x08004c21
 8004bcc:	08004c21 	.word	0x08004c21
 8004bd0:	08004c21 	.word	0x08004c21
 8004bd4:	08004bf7 	.word	0x08004bf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bd8:	f7fe fc68 	bl	80034ac <HAL_RCC_GetPCLK1Freq>
 8004bdc:	61b8      	str	r0, [r7, #24]
        break;
 8004bde:	e024      	b.n	8004c2a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004be0:	f7fe fc86 	bl	80034f0 <HAL_RCC_GetPCLK2Freq>
 8004be4:	61b8      	str	r0, [r7, #24]
        break;
 8004be6:	e020      	b.n	8004c2a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004be8:	4b0c      	ldr	r3, [pc, #48]	; (8004c1c <UART_SetConfig+0x290>)
 8004bea:	61bb      	str	r3, [r7, #24]
        break;
 8004bec:	e01d      	b.n	8004c2a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bee:	f7fe fbe7 	bl	80033c0 <HAL_RCC_GetSysClockFreq>
 8004bf2:	61b8      	str	r0, [r7, #24]
        break;
 8004bf4:	e019      	b.n	8004c2a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bfa:	61bb      	str	r3, [r7, #24]
        break;
 8004bfc:	e015      	b.n	8004c2a <UART_SetConfig+0x29e>
 8004bfe:	bf00      	nop
 8004c00:	efff69f3 	.word	0xefff69f3
 8004c04:	40013800 	.word	0x40013800
 8004c08:	40021000 	.word	0x40021000
 8004c0c:	40004400 	.word	0x40004400
 8004c10:	40004800 	.word	0x40004800
 8004c14:	40004c00 	.word	0x40004c00
 8004c18:	40005000 	.word	0x40005000
 8004c1c:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004c20:	2300      	movs	r3, #0
 8004c22:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	77bb      	strb	r3, [r7, #30]
        break;
 8004c28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d073      	beq.n	8004d18 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	005a      	lsls	r2, r3, #1
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	085b      	lsrs	r3, r3, #1
 8004c3a:	441a      	add	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c44:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	2b0f      	cmp	r3, #15
 8004c4a:	d916      	bls.n	8004c7a <UART_SetConfig+0x2ee>
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c52:	d212      	bcs.n	8004c7a <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	f023 030f 	bic.w	r3, r3, #15
 8004c5c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	085b      	lsrs	r3, r3, #1
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	f003 0307 	and.w	r3, r3, #7
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	89fb      	ldrh	r3, [r7, #14]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	89fa      	ldrh	r2, [r7, #14]
 8004c76:	60da      	str	r2, [r3, #12]
 8004c78:	e04e      	b.n	8004d18 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	77bb      	strb	r3, [r7, #30]
 8004c7e:	e04b      	b.n	8004d18 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c80:	7ffb      	ldrb	r3, [r7, #31]
 8004c82:	2b08      	cmp	r3, #8
 8004c84:	d827      	bhi.n	8004cd6 <UART_SetConfig+0x34a>
 8004c86:	a201      	add	r2, pc, #4	; (adr r2, 8004c8c <UART_SetConfig+0x300>)
 8004c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c8c:	08004cb1 	.word	0x08004cb1
 8004c90:	08004cb9 	.word	0x08004cb9
 8004c94:	08004cc1 	.word	0x08004cc1
 8004c98:	08004cd7 	.word	0x08004cd7
 8004c9c:	08004cc7 	.word	0x08004cc7
 8004ca0:	08004cd7 	.word	0x08004cd7
 8004ca4:	08004cd7 	.word	0x08004cd7
 8004ca8:	08004cd7 	.word	0x08004cd7
 8004cac:	08004ccf 	.word	0x08004ccf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cb0:	f7fe fbfc 	bl	80034ac <HAL_RCC_GetPCLK1Freq>
 8004cb4:	61b8      	str	r0, [r7, #24]
        break;
 8004cb6:	e013      	b.n	8004ce0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cb8:	f7fe fc1a 	bl	80034f0 <HAL_RCC_GetPCLK2Freq>
 8004cbc:	61b8      	str	r0, [r7, #24]
        break;
 8004cbe:	e00f      	b.n	8004ce0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cc0:	4b1b      	ldr	r3, [pc, #108]	; (8004d30 <UART_SetConfig+0x3a4>)
 8004cc2:	61bb      	str	r3, [r7, #24]
        break;
 8004cc4:	e00c      	b.n	8004ce0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cc6:	f7fe fb7b 	bl	80033c0 <HAL_RCC_GetSysClockFreq>
 8004cca:	61b8      	str	r0, [r7, #24]
        break;
 8004ccc:	e008      	b.n	8004ce0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cd2:	61bb      	str	r3, [r7, #24]
        break;
 8004cd4:	e004      	b.n	8004ce0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	77bb      	strb	r3, [r7, #30]
        break;
 8004cde:	bf00      	nop
    }

    if (pclk != 0U)
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d018      	beq.n	8004d18 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	085a      	lsrs	r2, r3, #1
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	441a      	add	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	2b0f      	cmp	r3, #15
 8004cfe:	d909      	bls.n	8004d14 <UART_SetConfig+0x388>
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d06:	d205      	bcs.n	8004d14 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	60da      	str	r2, [r3, #12]
 8004d12:	e001      	b.n	8004d18 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004d24:	7fbb      	ldrb	r3, [r7, #30]
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3720      	adds	r7, #32
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	007a1200 	.word	0x007a1200

08004d34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00a      	beq.n	8004d5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00a      	beq.n	8004d80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d84:	f003 0304 	and.w	r3, r3, #4
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00a      	beq.n	8004da2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	f003 0308 	and.w	r3, r3, #8
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00a      	beq.n	8004dc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc8:	f003 0310 	and.w	r3, r3, #16
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00a      	beq.n	8004de6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	430a      	orrs	r2, r1
 8004de4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dea:	f003 0320 	and.w	r3, r3, #32
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00a      	beq.n	8004e08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	430a      	orrs	r2, r1
 8004e06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d01a      	beq.n	8004e4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	430a      	orrs	r2, r1
 8004e28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e32:	d10a      	bne.n	8004e4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	430a      	orrs	r2, r1
 8004e48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00a      	beq.n	8004e6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	605a      	str	r2, [r3, #4]
  }
}
 8004e6c:	bf00      	nop
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b098      	sub	sp, #96	; 0x60
 8004e7c:	af02      	add	r7, sp, #8
 8004e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e88:	f7fc fe12 	bl	8001ab0 <HAL_GetTick>
 8004e8c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0308 	and.w	r3, r3, #8
 8004e98:	2b08      	cmp	r3, #8
 8004e9a:	d12e      	bne.n	8004efa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f88c 	bl	8004fc8 <UART_WaitOnFlagUntilTimeout>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d021      	beq.n	8004efa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ebe:	e853 3f00 	ldrex	r3, [r3]
 8004ec2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ec6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004eca:	653b      	str	r3, [r7, #80]	; 0x50
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ed4:	647b      	str	r3, [r7, #68]	; 0x44
 8004ed6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004eda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004edc:	e841 2300 	strex	r3, r2, [r1]
 8004ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1e6      	bne.n	8004eb6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2220      	movs	r2, #32
 8004eec:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e062      	b.n	8004fc0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0304 	and.w	r3, r3, #4
 8004f04:	2b04      	cmp	r3, #4
 8004f06:	d149      	bne.n	8004f9c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f10:	2200      	movs	r2, #0
 8004f12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f856 	bl	8004fc8 <UART_WaitOnFlagUntilTimeout>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d03c      	beq.n	8004f9c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2a:	e853 3f00 	ldrex	r3, [r3]
 8004f2e:	623b      	str	r3, [r7, #32]
   return(result);
 8004f30:	6a3b      	ldr	r3, [r7, #32]
 8004f32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f40:	633b      	str	r3, [r7, #48]	; 0x30
 8004f42:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f48:	e841 2300 	strex	r3, r2, [r1]
 8004f4c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1e6      	bne.n	8004f22 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	3308      	adds	r3, #8
 8004f5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	e853 3f00 	ldrex	r3, [r3]
 8004f62:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f023 0301 	bic.w	r3, r3, #1
 8004f6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	3308      	adds	r3, #8
 8004f72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f74:	61fa      	str	r2, [r7, #28]
 8004f76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f78:	69b9      	ldr	r1, [r7, #24]
 8004f7a:	69fa      	ldr	r2, [r7, #28]
 8004f7c:	e841 2300 	strex	r3, r2, [r1]
 8004f80:	617b      	str	r3, [r7, #20]
   return(result);
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d1e5      	bne.n	8004f54 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e011      	b.n	8004fc0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2220      	movs	r2, #32
 8004fa6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3758      	adds	r7, #88	; 0x58
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	603b      	str	r3, [r7, #0]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fd8:	e049      	b.n	800506e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe0:	d045      	beq.n	800506e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fe2:	f7fc fd65 	bl	8001ab0 <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d302      	bcc.n	8004ff8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d101      	bne.n	8004ffc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e048      	b.n	800508e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0304 	and.w	r3, r3, #4
 8005006:	2b00      	cmp	r3, #0
 8005008:	d031      	beq.n	800506e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	69db      	ldr	r3, [r3, #28]
 8005010:	f003 0308 	and.w	r3, r3, #8
 8005014:	2b08      	cmp	r3, #8
 8005016:	d110      	bne.n	800503a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2208      	movs	r2, #8
 800501e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	f000 f838 	bl	8005096 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2208      	movs	r2, #8
 800502a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e029      	b.n	800508e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	69db      	ldr	r3, [r3, #28]
 8005040:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005044:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005048:	d111      	bne.n	800506e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005052:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005054:	68f8      	ldr	r0, [r7, #12]
 8005056:	f000 f81e 	bl	8005096 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2220      	movs	r2, #32
 800505e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e00f      	b.n	800508e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	69da      	ldr	r2, [r3, #28]
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	4013      	ands	r3, r2
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	429a      	cmp	r2, r3
 800507c:	bf0c      	ite	eq
 800507e:	2301      	moveq	r3, #1
 8005080:	2300      	movne	r3, #0
 8005082:	b2db      	uxtb	r3, r3
 8005084:	461a      	mov	r2, r3
 8005086:	79fb      	ldrb	r3, [r7, #7]
 8005088:	429a      	cmp	r2, r3
 800508a:	d0a6      	beq.n	8004fda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005096:	b480      	push	{r7}
 8005098:	b095      	sub	sp, #84	; 0x54
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a6:	e853 3f00 	ldrex	r3, [r3]
 80050aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80050ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	461a      	mov	r2, r3
 80050ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050bc:	643b      	str	r3, [r7, #64]	; 0x40
 80050be:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80050c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050c4:	e841 2300 	strex	r3, r2, [r1]
 80050c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d1e6      	bne.n	800509e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	3308      	adds	r3, #8
 80050d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d8:	6a3b      	ldr	r3, [r7, #32]
 80050da:	e853 3f00 	ldrex	r3, [r3]
 80050de:	61fb      	str	r3, [r7, #28]
   return(result);
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	f023 0301 	bic.w	r3, r3, #1
 80050e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	3308      	adds	r3, #8
 80050ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050f8:	e841 2300 	strex	r3, r2, [r1]
 80050fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1e5      	bne.n	80050d0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005108:	2b01      	cmp	r3, #1
 800510a:	d118      	bne.n	800513e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	e853 3f00 	ldrex	r3, [r3]
 8005118:	60bb      	str	r3, [r7, #8]
   return(result);
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	f023 0310 	bic.w	r3, r3, #16
 8005120:	647b      	str	r3, [r7, #68]	; 0x44
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	461a      	mov	r2, r3
 8005128:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800512a:	61bb      	str	r3, [r7, #24]
 800512c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512e:	6979      	ldr	r1, [r7, #20]
 8005130:	69ba      	ldr	r2, [r7, #24]
 8005132:	e841 2300 	strex	r3, r2, [r1]
 8005136:	613b      	str	r3, [r7, #16]
   return(result);
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1e6      	bne.n	800510c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2220      	movs	r2, #32
 8005142:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005152:	bf00      	nop
 8005154:	3754      	adds	r7, #84	; 0x54
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
	...

08005160 <sniprintf>:
 8005160:	b40c      	push	{r2, r3}
 8005162:	b530      	push	{r4, r5, lr}
 8005164:	4b17      	ldr	r3, [pc, #92]	; (80051c4 <sniprintf+0x64>)
 8005166:	1e0c      	subs	r4, r1, #0
 8005168:	681d      	ldr	r5, [r3, #0]
 800516a:	b09d      	sub	sp, #116	; 0x74
 800516c:	da08      	bge.n	8005180 <sniprintf+0x20>
 800516e:	238b      	movs	r3, #139	; 0x8b
 8005170:	602b      	str	r3, [r5, #0]
 8005172:	f04f 30ff 	mov.w	r0, #4294967295
 8005176:	b01d      	add	sp, #116	; 0x74
 8005178:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800517c:	b002      	add	sp, #8
 800517e:	4770      	bx	lr
 8005180:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005184:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005188:	bf14      	ite	ne
 800518a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800518e:	4623      	moveq	r3, r4
 8005190:	9304      	str	r3, [sp, #16]
 8005192:	9307      	str	r3, [sp, #28]
 8005194:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005198:	9002      	str	r0, [sp, #8]
 800519a:	9006      	str	r0, [sp, #24]
 800519c:	f8ad 3016 	strh.w	r3, [sp, #22]
 80051a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80051a2:	ab21      	add	r3, sp, #132	; 0x84
 80051a4:	a902      	add	r1, sp, #8
 80051a6:	4628      	mov	r0, r5
 80051a8:	9301      	str	r3, [sp, #4]
 80051aa:	f000 f9c1 	bl	8005530 <_svfiprintf_r>
 80051ae:	1c43      	adds	r3, r0, #1
 80051b0:	bfbc      	itt	lt
 80051b2:	238b      	movlt	r3, #139	; 0x8b
 80051b4:	602b      	strlt	r3, [r5, #0]
 80051b6:	2c00      	cmp	r4, #0
 80051b8:	d0dd      	beq.n	8005176 <sniprintf+0x16>
 80051ba:	9b02      	ldr	r3, [sp, #8]
 80051bc:	2200      	movs	r2, #0
 80051be:	701a      	strb	r2, [r3, #0]
 80051c0:	e7d9      	b.n	8005176 <sniprintf+0x16>
 80051c2:	bf00      	nop
 80051c4:	20000060 	.word	0x20000060

080051c8 <siprintf>:
 80051c8:	b40e      	push	{r1, r2, r3}
 80051ca:	b500      	push	{lr}
 80051cc:	b09c      	sub	sp, #112	; 0x70
 80051ce:	ab1d      	add	r3, sp, #116	; 0x74
 80051d0:	9002      	str	r0, [sp, #8]
 80051d2:	9006      	str	r0, [sp, #24]
 80051d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80051d8:	4809      	ldr	r0, [pc, #36]	; (8005200 <siprintf+0x38>)
 80051da:	9107      	str	r1, [sp, #28]
 80051dc:	9104      	str	r1, [sp, #16]
 80051de:	4909      	ldr	r1, [pc, #36]	; (8005204 <siprintf+0x3c>)
 80051e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80051e4:	9105      	str	r1, [sp, #20]
 80051e6:	6800      	ldr	r0, [r0, #0]
 80051e8:	9301      	str	r3, [sp, #4]
 80051ea:	a902      	add	r1, sp, #8
 80051ec:	f000 f9a0 	bl	8005530 <_svfiprintf_r>
 80051f0:	9b02      	ldr	r3, [sp, #8]
 80051f2:	2200      	movs	r2, #0
 80051f4:	701a      	strb	r2, [r3, #0]
 80051f6:	b01c      	add	sp, #112	; 0x70
 80051f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80051fc:	b003      	add	sp, #12
 80051fe:	4770      	bx	lr
 8005200:	20000060 	.word	0x20000060
 8005204:	ffff0208 	.word	0xffff0208

08005208 <memset>:
 8005208:	4402      	add	r2, r0
 800520a:	4603      	mov	r3, r0
 800520c:	4293      	cmp	r3, r2
 800520e:	d100      	bne.n	8005212 <memset+0xa>
 8005210:	4770      	bx	lr
 8005212:	f803 1b01 	strb.w	r1, [r3], #1
 8005216:	e7f9      	b.n	800520c <memset+0x4>

08005218 <__errno>:
 8005218:	4b01      	ldr	r3, [pc, #4]	; (8005220 <__errno+0x8>)
 800521a:	6818      	ldr	r0, [r3, #0]
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	20000060 	.word	0x20000060

08005224 <__libc_init_array>:
 8005224:	b570      	push	{r4, r5, r6, lr}
 8005226:	4d0d      	ldr	r5, [pc, #52]	; (800525c <__libc_init_array+0x38>)
 8005228:	4c0d      	ldr	r4, [pc, #52]	; (8005260 <__libc_init_array+0x3c>)
 800522a:	1b64      	subs	r4, r4, r5
 800522c:	10a4      	asrs	r4, r4, #2
 800522e:	2600      	movs	r6, #0
 8005230:	42a6      	cmp	r6, r4
 8005232:	d109      	bne.n	8005248 <__libc_init_array+0x24>
 8005234:	4d0b      	ldr	r5, [pc, #44]	; (8005264 <__libc_init_array+0x40>)
 8005236:	4c0c      	ldr	r4, [pc, #48]	; (8005268 <__libc_init_array+0x44>)
 8005238:	f000 fc6a 	bl	8005b10 <_init>
 800523c:	1b64      	subs	r4, r4, r5
 800523e:	10a4      	asrs	r4, r4, #2
 8005240:	2600      	movs	r6, #0
 8005242:	42a6      	cmp	r6, r4
 8005244:	d105      	bne.n	8005252 <__libc_init_array+0x2e>
 8005246:	bd70      	pop	{r4, r5, r6, pc}
 8005248:	f855 3b04 	ldr.w	r3, [r5], #4
 800524c:	4798      	blx	r3
 800524e:	3601      	adds	r6, #1
 8005250:	e7ee      	b.n	8005230 <__libc_init_array+0xc>
 8005252:	f855 3b04 	ldr.w	r3, [r5], #4
 8005256:	4798      	blx	r3
 8005258:	3601      	adds	r6, #1
 800525a:	e7f2      	b.n	8005242 <__libc_init_array+0x1e>
 800525c:	0800610c 	.word	0x0800610c
 8005260:	0800610c 	.word	0x0800610c
 8005264:	0800610c 	.word	0x0800610c
 8005268:	08006110 	.word	0x08006110

0800526c <__retarget_lock_acquire_recursive>:
 800526c:	4770      	bx	lr

0800526e <__retarget_lock_release_recursive>:
 800526e:	4770      	bx	lr

08005270 <memcpy>:
 8005270:	440a      	add	r2, r1
 8005272:	4291      	cmp	r1, r2
 8005274:	f100 33ff 	add.w	r3, r0, #4294967295
 8005278:	d100      	bne.n	800527c <memcpy+0xc>
 800527a:	4770      	bx	lr
 800527c:	b510      	push	{r4, lr}
 800527e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005282:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005286:	4291      	cmp	r1, r2
 8005288:	d1f9      	bne.n	800527e <memcpy+0xe>
 800528a:	bd10      	pop	{r4, pc}

0800528c <_free_r>:
 800528c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800528e:	2900      	cmp	r1, #0
 8005290:	d044      	beq.n	800531c <_free_r+0x90>
 8005292:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005296:	9001      	str	r0, [sp, #4]
 8005298:	2b00      	cmp	r3, #0
 800529a:	f1a1 0404 	sub.w	r4, r1, #4
 800529e:	bfb8      	it	lt
 80052a0:	18e4      	addlt	r4, r4, r3
 80052a2:	f000 f8df 	bl	8005464 <__malloc_lock>
 80052a6:	4a1e      	ldr	r2, [pc, #120]	; (8005320 <_free_r+0x94>)
 80052a8:	9801      	ldr	r0, [sp, #4]
 80052aa:	6813      	ldr	r3, [r2, #0]
 80052ac:	b933      	cbnz	r3, 80052bc <_free_r+0x30>
 80052ae:	6063      	str	r3, [r4, #4]
 80052b0:	6014      	str	r4, [r2, #0]
 80052b2:	b003      	add	sp, #12
 80052b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052b8:	f000 b8da 	b.w	8005470 <__malloc_unlock>
 80052bc:	42a3      	cmp	r3, r4
 80052be:	d908      	bls.n	80052d2 <_free_r+0x46>
 80052c0:	6825      	ldr	r5, [r4, #0]
 80052c2:	1961      	adds	r1, r4, r5
 80052c4:	428b      	cmp	r3, r1
 80052c6:	bf01      	itttt	eq
 80052c8:	6819      	ldreq	r1, [r3, #0]
 80052ca:	685b      	ldreq	r3, [r3, #4]
 80052cc:	1949      	addeq	r1, r1, r5
 80052ce:	6021      	streq	r1, [r4, #0]
 80052d0:	e7ed      	b.n	80052ae <_free_r+0x22>
 80052d2:	461a      	mov	r2, r3
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	b10b      	cbz	r3, 80052dc <_free_r+0x50>
 80052d8:	42a3      	cmp	r3, r4
 80052da:	d9fa      	bls.n	80052d2 <_free_r+0x46>
 80052dc:	6811      	ldr	r1, [r2, #0]
 80052de:	1855      	adds	r5, r2, r1
 80052e0:	42a5      	cmp	r5, r4
 80052e2:	d10b      	bne.n	80052fc <_free_r+0x70>
 80052e4:	6824      	ldr	r4, [r4, #0]
 80052e6:	4421      	add	r1, r4
 80052e8:	1854      	adds	r4, r2, r1
 80052ea:	42a3      	cmp	r3, r4
 80052ec:	6011      	str	r1, [r2, #0]
 80052ee:	d1e0      	bne.n	80052b2 <_free_r+0x26>
 80052f0:	681c      	ldr	r4, [r3, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	6053      	str	r3, [r2, #4]
 80052f6:	440c      	add	r4, r1
 80052f8:	6014      	str	r4, [r2, #0]
 80052fa:	e7da      	b.n	80052b2 <_free_r+0x26>
 80052fc:	d902      	bls.n	8005304 <_free_r+0x78>
 80052fe:	230c      	movs	r3, #12
 8005300:	6003      	str	r3, [r0, #0]
 8005302:	e7d6      	b.n	80052b2 <_free_r+0x26>
 8005304:	6825      	ldr	r5, [r4, #0]
 8005306:	1961      	adds	r1, r4, r5
 8005308:	428b      	cmp	r3, r1
 800530a:	bf04      	itt	eq
 800530c:	6819      	ldreq	r1, [r3, #0]
 800530e:	685b      	ldreq	r3, [r3, #4]
 8005310:	6063      	str	r3, [r4, #4]
 8005312:	bf04      	itt	eq
 8005314:	1949      	addeq	r1, r1, r5
 8005316:	6021      	streq	r1, [r4, #0]
 8005318:	6054      	str	r4, [r2, #4]
 800531a:	e7ca      	b.n	80052b2 <_free_r+0x26>
 800531c:	b003      	add	sp, #12
 800531e:	bd30      	pop	{r4, r5, pc}
 8005320:	200003c4 	.word	0x200003c4

08005324 <sbrk_aligned>:
 8005324:	b570      	push	{r4, r5, r6, lr}
 8005326:	4e0e      	ldr	r6, [pc, #56]	; (8005360 <sbrk_aligned+0x3c>)
 8005328:	460c      	mov	r4, r1
 800532a:	6831      	ldr	r1, [r6, #0]
 800532c:	4605      	mov	r5, r0
 800532e:	b911      	cbnz	r1, 8005336 <sbrk_aligned+0x12>
 8005330:	f000 fba6 	bl	8005a80 <_sbrk_r>
 8005334:	6030      	str	r0, [r6, #0]
 8005336:	4621      	mov	r1, r4
 8005338:	4628      	mov	r0, r5
 800533a:	f000 fba1 	bl	8005a80 <_sbrk_r>
 800533e:	1c43      	adds	r3, r0, #1
 8005340:	d00a      	beq.n	8005358 <sbrk_aligned+0x34>
 8005342:	1cc4      	adds	r4, r0, #3
 8005344:	f024 0403 	bic.w	r4, r4, #3
 8005348:	42a0      	cmp	r0, r4
 800534a:	d007      	beq.n	800535c <sbrk_aligned+0x38>
 800534c:	1a21      	subs	r1, r4, r0
 800534e:	4628      	mov	r0, r5
 8005350:	f000 fb96 	bl	8005a80 <_sbrk_r>
 8005354:	3001      	adds	r0, #1
 8005356:	d101      	bne.n	800535c <sbrk_aligned+0x38>
 8005358:	f04f 34ff 	mov.w	r4, #4294967295
 800535c:	4620      	mov	r0, r4
 800535e:	bd70      	pop	{r4, r5, r6, pc}
 8005360:	200003c8 	.word	0x200003c8

08005364 <_malloc_r>:
 8005364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005368:	1ccd      	adds	r5, r1, #3
 800536a:	f025 0503 	bic.w	r5, r5, #3
 800536e:	3508      	adds	r5, #8
 8005370:	2d0c      	cmp	r5, #12
 8005372:	bf38      	it	cc
 8005374:	250c      	movcc	r5, #12
 8005376:	2d00      	cmp	r5, #0
 8005378:	4607      	mov	r7, r0
 800537a:	db01      	blt.n	8005380 <_malloc_r+0x1c>
 800537c:	42a9      	cmp	r1, r5
 800537e:	d905      	bls.n	800538c <_malloc_r+0x28>
 8005380:	230c      	movs	r3, #12
 8005382:	603b      	str	r3, [r7, #0]
 8005384:	2600      	movs	r6, #0
 8005386:	4630      	mov	r0, r6
 8005388:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800538c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005460 <_malloc_r+0xfc>
 8005390:	f000 f868 	bl	8005464 <__malloc_lock>
 8005394:	f8d8 3000 	ldr.w	r3, [r8]
 8005398:	461c      	mov	r4, r3
 800539a:	bb5c      	cbnz	r4, 80053f4 <_malloc_r+0x90>
 800539c:	4629      	mov	r1, r5
 800539e:	4638      	mov	r0, r7
 80053a0:	f7ff ffc0 	bl	8005324 <sbrk_aligned>
 80053a4:	1c43      	adds	r3, r0, #1
 80053a6:	4604      	mov	r4, r0
 80053a8:	d155      	bne.n	8005456 <_malloc_r+0xf2>
 80053aa:	f8d8 4000 	ldr.w	r4, [r8]
 80053ae:	4626      	mov	r6, r4
 80053b0:	2e00      	cmp	r6, #0
 80053b2:	d145      	bne.n	8005440 <_malloc_r+0xdc>
 80053b4:	2c00      	cmp	r4, #0
 80053b6:	d048      	beq.n	800544a <_malloc_r+0xe6>
 80053b8:	6823      	ldr	r3, [r4, #0]
 80053ba:	4631      	mov	r1, r6
 80053bc:	4638      	mov	r0, r7
 80053be:	eb04 0903 	add.w	r9, r4, r3
 80053c2:	f000 fb5d 	bl	8005a80 <_sbrk_r>
 80053c6:	4581      	cmp	r9, r0
 80053c8:	d13f      	bne.n	800544a <_malloc_r+0xe6>
 80053ca:	6821      	ldr	r1, [r4, #0]
 80053cc:	1a6d      	subs	r5, r5, r1
 80053ce:	4629      	mov	r1, r5
 80053d0:	4638      	mov	r0, r7
 80053d2:	f7ff ffa7 	bl	8005324 <sbrk_aligned>
 80053d6:	3001      	adds	r0, #1
 80053d8:	d037      	beq.n	800544a <_malloc_r+0xe6>
 80053da:	6823      	ldr	r3, [r4, #0]
 80053dc:	442b      	add	r3, r5
 80053de:	6023      	str	r3, [r4, #0]
 80053e0:	f8d8 3000 	ldr.w	r3, [r8]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d038      	beq.n	800545a <_malloc_r+0xf6>
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	42a2      	cmp	r2, r4
 80053ec:	d12b      	bne.n	8005446 <_malloc_r+0xe2>
 80053ee:	2200      	movs	r2, #0
 80053f0:	605a      	str	r2, [r3, #4]
 80053f2:	e00f      	b.n	8005414 <_malloc_r+0xb0>
 80053f4:	6822      	ldr	r2, [r4, #0]
 80053f6:	1b52      	subs	r2, r2, r5
 80053f8:	d41f      	bmi.n	800543a <_malloc_r+0xd6>
 80053fa:	2a0b      	cmp	r2, #11
 80053fc:	d917      	bls.n	800542e <_malloc_r+0xca>
 80053fe:	1961      	adds	r1, r4, r5
 8005400:	42a3      	cmp	r3, r4
 8005402:	6025      	str	r5, [r4, #0]
 8005404:	bf18      	it	ne
 8005406:	6059      	strne	r1, [r3, #4]
 8005408:	6863      	ldr	r3, [r4, #4]
 800540a:	bf08      	it	eq
 800540c:	f8c8 1000 	streq.w	r1, [r8]
 8005410:	5162      	str	r2, [r4, r5]
 8005412:	604b      	str	r3, [r1, #4]
 8005414:	4638      	mov	r0, r7
 8005416:	f104 060b 	add.w	r6, r4, #11
 800541a:	f000 f829 	bl	8005470 <__malloc_unlock>
 800541e:	f026 0607 	bic.w	r6, r6, #7
 8005422:	1d23      	adds	r3, r4, #4
 8005424:	1af2      	subs	r2, r6, r3
 8005426:	d0ae      	beq.n	8005386 <_malloc_r+0x22>
 8005428:	1b9b      	subs	r3, r3, r6
 800542a:	50a3      	str	r3, [r4, r2]
 800542c:	e7ab      	b.n	8005386 <_malloc_r+0x22>
 800542e:	42a3      	cmp	r3, r4
 8005430:	6862      	ldr	r2, [r4, #4]
 8005432:	d1dd      	bne.n	80053f0 <_malloc_r+0x8c>
 8005434:	f8c8 2000 	str.w	r2, [r8]
 8005438:	e7ec      	b.n	8005414 <_malloc_r+0xb0>
 800543a:	4623      	mov	r3, r4
 800543c:	6864      	ldr	r4, [r4, #4]
 800543e:	e7ac      	b.n	800539a <_malloc_r+0x36>
 8005440:	4634      	mov	r4, r6
 8005442:	6876      	ldr	r6, [r6, #4]
 8005444:	e7b4      	b.n	80053b0 <_malloc_r+0x4c>
 8005446:	4613      	mov	r3, r2
 8005448:	e7cc      	b.n	80053e4 <_malloc_r+0x80>
 800544a:	230c      	movs	r3, #12
 800544c:	603b      	str	r3, [r7, #0]
 800544e:	4638      	mov	r0, r7
 8005450:	f000 f80e 	bl	8005470 <__malloc_unlock>
 8005454:	e797      	b.n	8005386 <_malloc_r+0x22>
 8005456:	6025      	str	r5, [r4, #0]
 8005458:	e7dc      	b.n	8005414 <_malloc_r+0xb0>
 800545a:	605b      	str	r3, [r3, #4]
 800545c:	deff      	udf	#255	; 0xff
 800545e:	bf00      	nop
 8005460:	200003c4 	.word	0x200003c4

08005464 <__malloc_lock>:
 8005464:	4801      	ldr	r0, [pc, #4]	; (800546c <__malloc_lock+0x8>)
 8005466:	f7ff bf01 	b.w	800526c <__retarget_lock_acquire_recursive>
 800546a:	bf00      	nop
 800546c:	200003c0 	.word	0x200003c0

08005470 <__malloc_unlock>:
 8005470:	4801      	ldr	r0, [pc, #4]	; (8005478 <__malloc_unlock+0x8>)
 8005472:	f7ff befc 	b.w	800526e <__retarget_lock_release_recursive>
 8005476:	bf00      	nop
 8005478:	200003c0 	.word	0x200003c0

0800547c <__ssputs_r>:
 800547c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005480:	688e      	ldr	r6, [r1, #8]
 8005482:	461f      	mov	r7, r3
 8005484:	42be      	cmp	r6, r7
 8005486:	680b      	ldr	r3, [r1, #0]
 8005488:	4682      	mov	sl, r0
 800548a:	460c      	mov	r4, r1
 800548c:	4690      	mov	r8, r2
 800548e:	d82c      	bhi.n	80054ea <__ssputs_r+0x6e>
 8005490:	898a      	ldrh	r2, [r1, #12]
 8005492:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005496:	d026      	beq.n	80054e6 <__ssputs_r+0x6a>
 8005498:	6965      	ldr	r5, [r4, #20]
 800549a:	6909      	ldr	r1, [r1, #16]
 800549c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80054a0:	eba3 0901 	sub.w	r9, r3, r1
 80054a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80054a8:	1c7b      	adds	r3, r7, #1
 80054aa:	444b      	add	r3, r9
 80054ac:	106d      	asrs	r5, r5, #1
 80054ae:	429d      	cmp	r5, r3
 80054b0:	bf38      	it	cc
 80054b2:	461d      	movcc	r5, r3
 80054b4:	0553      	lsls	r3, r2, #21
 80054b6:	d527      	bpl.n	8005508 <__ssputs_r+0x8c>
 80054b8:	4629      	mov	r1, r5
 80054ba:	f7ff ff53 	bl	8005364 <_malloc_r>
 80054be:	4606      	mov	r6, r0
 80054c0:	b360      	cbz	r0, 800551c <__ssputs_r+0xa0>
 80054c2:	6921      	ldr	r1, [r4, #16]
 80054c4:	464a      	mov	r2, r9
 80054c6:	f7ff fed3 	bl	8005270 <memcpy>
 80054ca:	89a3      	ldrh	r3, [r4, #12]
 80054cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80054d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054d4:	81a3      	strh	r3, [r4, #12]
 80054d6:	6126      	str	r6, [r4, #16]
 80054d8:	6165      	str	r5, [r4, #20]
 80054da:	444e      	add	r6, r9
 80054dc:	eba5 0509 	sub.w	r5, r5, r9
 80054e0:	6026      	str	r6, [r4, #0]
 80054e2:	60a5      	str	r5, [r4, #8]
 80054e4:	463e      	mov	r6, r7
 80054e6:	42be      	cmp	r6, r7
 80054e8:	d900      	bls.n	80054ec <__ssputs_r+0x70>
 80054ea:	463e      	mov	r6, r7
 80054ec:	6820      	ldr	r0, [r4, #0]
 80054ee:	4632      	mov	r2, r6
 80054f0:	4641      	mov	r1, r8
 80054f2:	f000 faab 	bl	8005a4c <memmove>
 80054f6:	68a3      	ldr	r3, [r4, #8]
 80054f8:	1b9b      	subs	r3, r3, r6
 80054fa:	60a3      	str	r3, [r4, #8]
 80054fc:	6823      	ldr	r3, [r4, #0]
 80054fe:	4433      	add	r3, r6
 8005500:	6023      	str	r3, [r4, #0]
 8005502:	2000      	movs	r0, #0
 8005504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005508:	462a      	mov	r2, r5
 800550a:	f000 fac9 	bl	8005aa0 <_realloc_r>
 800550e:	4606      	mov	r6, r0
 8005510:	2800      	cmp	r0, #0
 8005512:	d1e0      	bne.n	80054d6 <__ssputs_r+0x5a>
 8005514:	6921      	ldr	r1, [r4, #16]
 8005516:	4650      	mov	r0, sl
 8005518:	f7ff feb8 	bl	800528c <_free_r>
 800551c:	230c      	movs	r3, #12
 800551e:	f8ca 3000 	str.w	r3, [sl]
 8005522:	89a3      	ldrh	r3, [r4, #12]
 8005524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005528:	81a3      	strh	r3, [r4, #12]
 800552a:	f04f 30ff 	mov.w	r0, #4294967295
 800552e:	e7e9      	b.n	8005504 <__ssputs_r+0x88>

08005530 <_svfiprintf_r>:
 8005530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005534:	4698      	mov	r8, r3
 8005536:	898b      	ldrh	r3, [r1, #12]
 8005538:	061b      	lsls	r3, r3, #24
 800553a:	b09d      	sub	sp, #116	; 0x74
 800553c:	4607      	mov	r7, r0
 800553e:	460d      	mov	r5, r1
 8005540:	4614      	mov	r4, r2
 8005542:	d50e      	bpl.n	8005562 <_svfiprintf_r+0x32>
 8005544:	690b      	ldr	r3, [r1, #16]
 8005546:	b963      	cbnz	r3, 8005562 <_svfiprintf_r+0x32>
 8005548:	2140      	movs	r1, #64	; 0x40
 800554a:	f7ff ff0b 	bl	8005364 <_malloc_r>
 800554e:	6028      	str	r0, [r5, #0]
 8005550:	6128      	str	r0, [r5, #16]
 8005552:	b920      	cbnz	r0, 800555e <_svfiprintf_r+0x2e>
 8005554:	230c      	movs	r3, #12
 8005556:	603b      	str	r3, [r7, #0]
 8005558:	f04f 30ff 	mov.w	r0, #4294967295
 800555c:	e0d0      	b.n	8005700 <_svfiprintf_r+0x1d0>
 800555e:	2340      	movs	r3, #64	; 0x40
 8005560:	616b      	str	r3, [r5, #20]
 8005562:	2300      	movs	r3, #0
 8005564:	9309      	str	r3, [sp, #36]	; 0x24
 8005566:	2320      	movs	r3, #32
 8005568:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800556c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005570:	2330      	movs	r3, #48	; 0x30
 8005572:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005718 <_svfiprintf_r+0x1e8>
 8005576:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800557a:	f04f 0901 	mov.w	r9, #1
 800557e:	4623      	mov	r3, r4
 8005580:	469a      	mov	sl, r3
 8005582:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005586:	b10a      	cbz	r2, 800558c <_svfiprintf_r+0x5c>
 8005588:	2a25      	cmp	r2, #37	; 0x25
 800558a:	d1f9      	bne.n	8005580 <_svfiprintf_r+0x50>
 800558c:	ebba 0b04 	subs.w	fp, sl, r4
 8005590:	d00b      	beq.n	80055aa <_svfiprintf_r+0x7a>
 8005592:	465b      	mov	r3, fp
 8005594:	4622      	mov	r2, r4
 8005596:	4629      	mov	r1, r5
 8005598:	4638      	mov	r0, r7
 800559a:	f7ff ff6f 	bl	800547c <__ssputs_r>
 800559e:	3001      	adds	r0, #1
 80055a0:	f000 80a9 	beq.w	80056f6 <_svfiprintf_r+0x1c6>
 80055a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055a6:	445a      	add	r2, fp
 80055a8:	9209      	str	r2, [sp, #36]	; 0x24
 80055aa:	f89a 3000 	ldrb.w	r3, [sl]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	f000 80a1 	beq.w	80056f6 <_svfiprintf_r+0x1c6>
 80055b4:	2300      	movs	r3, #0
 80055b6:	f04f 32ff 	mov.w	r2, #4294967295
 80055ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055be:	f10a 0a01 	add.w	sl, sl, #1
 80055c2:	9304      	str	r3, [sp, #16]
 80055c4:	9307      	str	r3, [sp, #28]
 80055c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055ca:	931a      	str	r3, [sp, #104]	; 0x68
 80055cc:	4654      	mov	r4, sl
 80055ce:	2205      	movs	r2, #5
 80055d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055d4:	4850      	ldr	r0, [pc, #320]	; (8005718 <_svfiprintf_r+0x1e8>)
 80055d6:	f7fa fe0b 	bl	80001f0 <memchr>
 80055da:	9a04      	ldr	r2, [sp, #16]
 80055dc:	b9d8      	cbnz	r0, 8005616 <_svfiprintf_r+0xe6>
 80055de:	06d0      	lsls	r0, r2, #27
 80055e0:	bf44      	itt	mi
 80055e2:	2320      	movmi	r3, #32
 80055e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055e8:	0711      	lsls	r1, r2, #28
 80055ea:	bf44      	itt	mi
 80055ec:	232b      	movmi	r3, #43	; 0x2b
 80055ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055f2:	f89a 3000 	ldrb.w	r3, [sl]
 80055f6:	2b2a      	cmp	r3, #42	; 0x2a
 80055f8:	d015      	beq.n	8005626 <_svfiprintf_r+0xf6>
 80055fa:	9a07      	ldr	r2, [sp, #28]
 80055fc:	4654      	mov	r4, sl
 80055fe:	2000      	movs	r0, #0
 8005600:	f04f 0c0a 	mov.w	ip, #10
 8005604:	4621      	mov	r1, r4
 8005606:	f811 3b01 	ldrb.w	r3, [r1], #1
 800560a:	3b30      	subs	r3, #48	; 0x30
 800560c:	2b09      	cmp	r3, #9
 800560e:	d94d      	bls.n	80056ac <_svfiprintf_r+0x17c>
 8005610:	b1b0      	cbz	r0, 8005640 <_svfiprintf_r+0x110>
 8005612:	9207      	str	r2, [sp, #28]
 8005614:	e014      	b.n	8005640 <_svfiprintf_r+0x110>
 8005616:	eba0 0308 	sub.w	r3, r0, r8
 800561a:	fa09 f303 	lsl.w	r3, r9, r3
 800561e:	4313      	orrs	r3, r2
 8005620:	9304      	str	r3, [sp, #16]
 8005622:	46a2      	mov	sl, r4
 8005624:	e7d2      	b.n	80055cc <_svfiprintf_r+0x9c>
 8005626:	9b03      	ldr	r3, [sp, #12]
 8005628:	1d19      	adds	r1, r3, #4
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	9103      	str	r1, [sp, #12]
 800562e:	2b00      	cmp	r3, #0
 8005630:	bfbb      	ittet	lt
 8005632:	425b      	neglt	r3, r3
 8005634:	f042 0202 	orrlt.w	r2, r2, #2
 8005638:	9307      	strge	r3, [sp, #28]
 800563a:	9307      	strlt	r3, [sp, #28]
 800563c:	bfb8      	it	lt
 800563e:	9204      	strlt	r2, [sp, #16]
 8005640:	7823      	ldrb	r3, [r4, #0]
 8005642:	2b2e      	cmp	r3, #46	; 0x2e
 8005644:	d10c      	bne.n	8005660 <_svfiprintf_r+0x130>
 8005646:	7863      	ldrb	r3, [r4, #1]
 8005648:	2b2a      	cmp	r3, #42	; 0x2a
 800564a:	d134      	bne.n	80056b6 <_svfiprintf_r+0x186>
 800564c:	9b03      	ldr	r3, [sp, #12]
 800564e:	1d1a      	adds	r2, r3, #4
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	9203      	str	r2, [sp, #12]
 8005654:	2b00      	cmp	r3, #0
 8005656:	bfb8      	it	lt
 8005658:	f04f 33ff 	movlt.w	r3, #4294967295
 800565c:	3402      	adds	r4, #2
 800565e:	9305      	str	r3, [sp, #20]
 8005660:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005728 <_svfiprintf_r+0x1f8>
 8005664:	7821      	ldrb	r1, [r4, #0]
 8005666:	2203      	movs	r2, #3
 8005668:	4650      	mov	r0, sl
 800566a:	f7fa fdc1 	bl	80001f0 <memchr>
 800566e:	b138      	cbz	r0, 8005680 <_svfiprintf_r+0x150>
 8005670:	9b04      	ldr	r3, [sp, #16]
 8005672:	eba0 000a 	sub.w	r0, r0, sl
 8005676:	2240      	movs	r2, #64	; 0x40
 8005678:	4082      	lsls	r2, r0
 800567a:	4313      	orrs	r3, r2
 800567c:	3401      	adds	r4, #1
 800567e:	9304      	str	r3, [sp, #16]
 8005680:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005684:	4825      	ldr	r0, [pc, #148]	; (800571c <_svfiprintf_r+0x1ec>)
 8005686:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800568a:	2206      	movs	r2, #6
 800568c:	f7fa fdb0 	bl	80001f0 <memchr>
 8005690:	2800      	cmp	r0, #0
 8005692:	d038      	beq.n	8005706 <_svfiprintf_r+0x1d6>
 8005694:	4b22      	ldr	r3, [pc, #136]	; (8005720 <_svfiprintf_r+0x1f0>)
 8005696:	bb1b      	cbnz	r3, 80056e0 <_svfiprintf_r+0x1b0>
 8005698:	9b03      	ldr	r3, [sp, #12]
 800569a:	3307      	adds	r3, #7
 800569c:	f023 0307 	bic.w	r3, r3, #7
 80056a0:	3308      	adds	r3, #8
 80056a2:	9303      	str	r3, [sp, #12]
 80056a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056a6:	4433      	add	r3, r6
 80056a8:	9309      	str	r3, [sp, #36]	; 0x24
 80056aa:	e768      	b.n	800557e <_svfiprintf_r+0x4e>
 80056ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80056b0:	460c      	mov	r4, r1
 80056b2:	2001      	movs	r0, #1
 80056b4:	e7a6      	b.n	8005604 <_svfiprintf_r+0xd4>
 80056b6:	2300      	movs	r3, #0
 80056b8:	3401      	adds	r4, #1
 80056ba:	9305      	str	r3, [sp, #20]
 80056bc:	4619      	mov	r1, r3
 80056be:	f04f 0c0a 	mov.w	ip, #10
 80056c2:	4620      	mov	r0, r4
 80056c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056c8:	3a30      	subs	r2, #48	; 0x30
 80056ca:	2a09      	cmp	r2, #9
 80056cc:	d903      	bls.n	80056d6 <_svfiprintf_r+0x1a6>
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d0c6      	beq.n	8005660 <_svfiprintf_r+0x130>
 80056d2:	9105      	str	r1, [sp, #20]
 80056d4:	e7c4      	b.n	8005660 <_svfiprintf_r+0x130>
 80056d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80056da:	4604      	mov	r4, r0
 80056dc:	2301      	movs	r3, #1
 80056de:	e7f0      	b.n	80056c2 <_svfiprintf_r+0x192>
 80056e0:	ab03      	add	r3, sp, #12
 80056e2:	9300      	str	r3, [sp, #0]
 80056e4:	462a      	mov	r2, r5
 80056e6:	4b0f      	ldr	r3, [pc, #60]	; (8005724 <_svfiprintf_r+0x1f4>)
 80056e8:	a904      	add	r1, sp, #16
 80056ea:	4638      	mov	r0, r7
 80056ec:	f3af 8000 	nop.w
 80056f0:	1c42      	adds	r2, r0, #1
 80056f2:	4606      	mov	r6, r0
 80056f4:	d1d6      	bne.n	80056a4 <_svfiprintf_r+0x174>
 80056f6:	89ab      	ldrh	r3, [r5, #12]
 80056f8:	065b      	lsls	r3, r3, #25
 80056fa:	f53f af2d 	bmi.w	8005558 <_svfiprintf_r+0x28>
 80056fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005700:	b01d      	add	sp, #116	; 0x74
 8005702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005706:	ab03      	add	r3, sp, #12
 8005708:	9300      	str	r3, [sp, #0]
 800570a:	462a      	mov	r2, r5
 800570c:	4b05      	ldr	r3, [pc, #20]	; (8005724 <_svfiprintf_r+0x1f4>)
 800570e:	a904      	add	r1, sp, #16
 8005710:	4638      	mov	r0, r7
 8005712:	f000 f879 	bl	8005808 <_printf_i>
 8005716:	e7eb      	b.n	80056f0 <_svfiprintf_r+0x1c0>
 8005718:	080060d8 	.word	0x080060d8
 800571c:	080060e2 	.word	0x080060e2
 8005720:	00000000 	.word	0x00000000
 8005724:	0800547d 	.word	0x0800547d
 8005728:	080060de 	.word	0x080060de

0800572c <_printf_common>:
 800572c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005730:	4616      	mov	r6, r2
 8005732:	4699      	mov	r9, r3
 8005734:	688a      	ldr	r2, [r1, #8]
 8005736:	690b      	ldr	r3, [r1, #16]
 8005738:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800573c:	4293      	cmp	r3, r2
 800573e:	bfb8      	it	lt
 8005740:	4613      	movlt	r3, r2
 8005742:	6033      	str	r3, [r6, #0]
 8005744:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005748:	4607      	mov	r7, r0
 800574a:	460c      	mov	r4, r1
 800574c:	b10a      	cbz	r2, 8005752 <_printf_common+0x26>
 800574e:	3301      	adds	r3, #1
 8005750:	6033      	str	r3, [r6, #0]
 8005752:	6823      	ldr	r3, [r4, #0]
 8005754:	0699      	lsls	r1, r3, #26
 8005756:	bf42      	ittt	mi
 8005758:	6833      	ldrmi	r3, [r6, #0]
 800575a:	3302      	addmi	r3, #2
 800575c:	6033      	strmi	r3, [r6, #0]
 800575e:	6825      	ldr	r5, [r4, #0]
 8005760:	f015 0506 	ands.w	r5, r5, #6
 8005764:	d106      	bne.n	8005774 <_printf_common+0x48>
 8005766:	f104 0a19 	add.w	sl, r4, #25
 800576a:	68e3      	ldr	r3, [r4, #12]
 800576c:	6832      	ldr	r2, [r6, #0]
 800576e:	1a9b      	subs	r3, r3, r2
 8005770:	42ab      	cmp	r3, r5
 8005772:	dc26      	bgt.n	80057c2 <_printf_common+0x96>
 8005774:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005778:	1e13      	subs	r3, r2, #0
 800577a:	6822      	ldr	r2, [r4, #0]
 800577c:	bf18      	it	ne
 800577e:	2301      	movne	r3, #1
 8005780:	0692      	lsls	r2, r2, #26
 8005782:	d42b      	bmi.n	80057dc <_printf_common+0xb0>
 8005784:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005788:	4649      	mov	r1, r9
 800578a:	4638      	mov	r0, r7
 800578c:	47c0      	blx	r8
 800578e:	3001      	adds	r0, #1
 8005790:	d01e      	beq.n	80057d0 <_printf_common+0xa4>
 8005792:	6823      	ldr	r3, [r4, #0]
 8005794:	6922      	ldr	r2, [r4, #16]
 8005796:	f003 0306 	and.w	r3, r3, #6
 800579a:	2b04      	cmp	r3, #4
 800579c:	bf02      	ittt	eq
 800579e:	68e5      	ldreq	r5, [r4, #12]
 80057a0:	6833      	ldreq	r3, [r6, #0]
 80057a2:	1aed      	subeq	r5, r5, r3
 80057a4:	68a3      	ldr	r3, [r4, #8]
 80057a6:	bf0c      	ite	eq
 80057a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057ac:	2500      	movne	r5, #0
 80057ae:	4293      	cmp	r3, r2
 80057b0:	bfc4      	itt	gt
 80057b2:	1a9b      	subgt	r3, r3, r2
 80057b4:	18ed      	addgt	r5, r5, r3
 80057b6:	2600      	movs	r6, #0
 80057b8:	341a      	adds	r4, #26
 80057ba:	42b5      	cmp	r5, r6
 80057bc:	d11a      	bne.n	80057f4 <_printf_common+0xc8>
 80057be:	2000      	movs	r0, #0
 80057c0:	e008      	b.n	80057d4 <_printf_common+0xa8>
 80057c2:	2301      	movs	r3, #1
 80057c4:	4652      	mov	r2, sl
 80057c6:	4649      	mov	r1, r9
 80057c8:	4638      	mov	r0, r7
 80057ca:	47c0      	blx	r8
 80057cc:	3001      	adds	r0, #1
 80057ce:	d103      	bne.n	80057d8 <_printf_common+0xac>
 80057d0:	f04f 30ff 	mov.w	r0, #4294967295
 80057d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057d8:	3501      	adds	r5, #1
 80057da:	e7c6      	b.n	800576a <_printf_common+0x3e>
 80057dc:	18e1      	adds	r1, r4, r3
 80057de:	1c5a      	adds	r2, r3, #1
 80057e0:	2030      	movs	r0, #48	; 0x30
 80057e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057e6:	4422      	add	r2, r4
 80057e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057f0:	3302      	adds	r3, #2
 80057f2:	e7c7      	b.n	8005784 <_printf_common+0x58>
 80057f4:	2301      	movs	r3, #1
 80057f6:	4622      	mov	r2, r4
 80057f8:	4649      	mov	r1, r9
 80057fa:	4638      	mov	r0, r7
 80057fc:	47c0      	blx	r8
 80057fe:	3001      	adds	r0, #1
 8005800:	d0e6      	beq.n	80057d0 <_printf_common+0xa4>
 8005802:	3601      	adds	r6, #1
 8005804:	e7d9      	b.n	80057ba <_printf_common+0x8e>
	...

08005808 <_printf_i>:
 8005808:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800580c:	7e0f      	ldrb	r7, [r1, #24]
 800580e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005810:	2f78      	cmp	r7, #120	; 0x78
 8005812:	4691      	mov	r9, r2
 8005814:	4680      	mov	r8, r0
 8005816:	460c      	mov	r4, r1
 8005818:	469a      	mov	sl, r3
 800581a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800581e:	d807      	bhi.n	8005830 <_printf_i+0x28>
 8005820:	2f62      	cmp	r7, #98	; 0x62
 8005822:	d80a      	bhi.n	800583a <_printf_i+0x32>
 8005824:	2f00      	cmp	r7, #0
 8005826:	f000 80d4 	beq.w	80059d2 <_printf_i+0x1ca>
 800582a:	2f58      	cmp	r7, #88	; 0x58
 800582c:	f000 80c0 	beq.w	80059b0 <_printf_i+0x1a8>
 8005830:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005834:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005838:	e03a      	b.n	80058b0 <_printf_i+0xa8>
 800583a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800583e:	2b15      	cmp	r3, #21
 8005840:	d8f6      	bhi.n	8005830 <_printf_i+0x28>
 8005842:	a101      	add	r1, pc, #4	; (adr r1, 8005848 <_printf_i+0x40>)
 8005844:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005848:	080058a1 	.word	0x080058a1
 800584c:	080058b5 	.word	0x080058b5
 8005850:	08005831 	.word	0x08005831
 8005854:	08005831 	.word	0x08005831
 8005858:	08005831 	.word	0x08005831
 800585c:	08005831 	.word	0x08005831
 8005860:	080058b5 	.word	0x080058b5
 8005864:	08005831 	.word	0x08005831
 8005868:	08005831 	.word	0x08005831
 800586c:	08005831 	.word	0x08005831
 8005870:	08005831 	.word	0x08005831
 8005874:	080059b9 	.word	0x080059b9
 8005878:	080058e1 	.word	0x080058e1
 800587c:	08005973 	.word	0x08005973
 8005880:	08005831 	.word	0x08005831
 8005884:	08005831 	.word	0x08005831
 8005888:	080059db 	.word	0x080059db
 800588c:	08005831 	.word	0x08005831
 8005890:	080058e1 	.word	0x080058e1
 8005894:	08005831 	.word	0x08005831
 8005898:	08005831 	.word	0x08005831
 800589c:	0800597b 	.word	0x0800597b
 80058a0:	682b      	ldr	r3, [r5, #0]
 80058a2:	1d1a      	adds	r2, r3, #4
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	602a      	str	r2, [r5, #0]
 80058a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058b0:	2301      	movs	r3, #1
 80058b2:	e09f      	b.n	80059f4 <_printf_i+0x1ec>
 80058b4:	6820      	ldr	r0, [r4, #0]
 80058b6:	682b      	ldr	r3, [r5, #0]
 80058b8:	0607      	lsls	r7, r0, #24
 80058ba:	f103 0104 	add.w	r1, r3, #4
 80058be:	6029      	str	r1, [r5, #0]
 80058c0:	d501      	bpl.n	80058c6 <_printf_i+0xbe>
 80058c2:	681e      	ldr	r6, [r3, #0]
 80058c4:	e003      	b.n	80058ce <_printf_i+0xc6>
 80058c6:	0646      	lsls	r6, r0, #25
 80058c8:	d5fb      	bpl.n	80058c2 <_printf_i+0xba>
 80058ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 80058ce:	2e00      	cmp	r6, #0
 80058d0:	da03      	bge.n	80058da <_printf_i+0xd2>
 80058d2:	232d      	movs	r3, #45	; 0x2d
 80058d4:	4276      	negs	r6, r6
 80058d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058da:	485a      	ldr	r0, [pc, #360]	; (8005a44 <_printf_i+0x23c>)
 80058dc:	230a      	movs	r3, #10
 80058de:	e012      	b.n	8005906 <_printf_i+0xfe>
 80058e0:	682b      	ldr	r3, [r5, #0]
 80058e2:	6820      	ldr	r0, [r4, #0]
 80058e4:	1d19      	adds	r1, r3, #4
 80058e6:	6029      	str	r1, [r5, #0]
 80058e8:	0605      	lsls	r5, r0, #24
 80058ea:	d501      	bpl.n	80058f0 <_printf_i+0xe8>
 80058ec:	681e      	ldr	r6, [r3, #0]
 80058ee:	e002      	b.n	80058f6 <_printf_i+0xee>
 80058f0:	0641      	lsls	r1, r0, #25
 80058f2:	d5fb      	bpl.n	80058ec <_printf_i+0xe4>
 80058f4:	881e      	ldrh	r6, [r3, #0]
 80058f6:	4853      	ldr	r0, [pc, #332]	; (8005a44 <_printf_i+0x23c>)
 80058f8:	2f6f      	cmp	r7, #111	; 0x6f
 80058fa:	bf0c      	ite	eq
 80058fc:	2308      	moveq	r3, #8
 80058fe:	230a      	movne	r3, #10
 8005900:	2100      	movs	r1, #0
 8005902:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005906:	6865      	ldr	r5, [r4, #4]
 8005908:	60a5      	str	r5, [r4, #8]
 800590a:	2d00      	cmp	r5, #0
 800590c:	bfa2      	ittt	ge
 800590e:	6821      	ldrge	r1, [r4, #0]
 8005910:	f021 0104 	bicge.w	r1, r1, #4
 8005914:	6021      	strge	r1, [r4, #0]
 8005916:	b90e      	cbnz	r6, 800591c <_printf_i+0x114>
 8005918:	2d00      	cmp	r5, #0
 800591a:	d04b      	beq.n	80059b4 <_printf_i+0x1ac>
 800591c:	4615      	mov	r5, r2
 800591e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005922:	fb03 6711 	mls	r7, r3, r1, r6
 8005926:	5dc7      	ldrb	r7, [r0, r7]
 8005928:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800592c:	4637      	mov	r7, r6
 800592e:	42bb      	cmp	r3, r7
 8005930:	460e      	mov	r6, r1
 8005932:	d9f4      	bls.n	800591e <_printf_i+0x116>
 8005934:	2b08      	cmp	r3, #8
 8005936:	d10b      	bne.n	8005950 <_printf_i+0x148>
 8005938:	6823      	ldr	r3, [r4, #0]
 800593a:	07de      	lsls	r6, r3, #31
 800593c:	d508      	bpl.n	8005950 <_printf_i+0x148>
 800593e:	6923      	ldr	r3, [r4, #16]
 8005940:	6861      	ldr	r1, [r4, #4]
 8005942:	4299      	cmp	r1, r3
 8005944:	bfde      	ittt	le
 8005946:	2330      	movle	r3, #48	; 0x30
 8005948:	f805 3c01 	strble.w	r3, [r5, #-1]
 800594c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005950:	1b52      	subs	r2, r2, r5
 8005952:	6122      	str	r2, [r4, #16]
 8005954:	f8cd a000 	str.w	sl, [sp]
 8005958:	464b      	mov	r3, r9
 800595a:	aa03      	add	r2, sp, #12
 800595c:	4621      	mov	r1, r4
 800595e:	4640      	mov	r0, r8
 8005960:	f7ff fee4 	bl	800572c <_printf_common>
 8005964:	3001      	adds	r0, #1
 8005966:	d14a      	bne.n	80059fe <_printf_i+0x1f6>
 8005968:	f04f 30ff 	mov.w	r0, #4294967295
 800596c:	b004      	add	sp, #16
 800596e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005972:	6823      	ldr	r3, [r4, #0]
 8005974:	f043 0320 	orr.w	r3, r3, #32
 8005978:	6023      	str	r3, [r4, #0]
 800597a:	4833      	ldr	r0, [pc, #204]	; (8005a48 <_printf_i+0x240>)
 800597c:	2778      	movs	r7, #120	; 0x78
 800597e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005982:	6823      	ldr	r3, [r4, #0]
 8005984:	6829      	ldr	r1, [r5, #0]
 8005986:	061f      	lsls	r7, r3, #24
 8005988:	f851 6b04 	ldr.w	r6, [r1], #4
 800598c:	d402      	bmi.n	8005994 <_printf_i+0x18c>
 800598e:	065f      	lsls	r7, r3, #25
 8005990:	bf48      	it	mi
 8005992:	b2b6      	uxthmi	r6, r6
 8005994:	07df      	lsls	r7, r3, #31
 8005996:	bf48      	it	mi
 8005998:	f043 0320 	orrmi.w	r3, r3, #32
 800599c:	6029      	str	r1, [r5, #0]
 800599e:	bf48      	it	mi
 80059a0:	6023      	strmi	r3, [r4, #0]
 80059a2:	b91e      	cbnz	r6, 80059ac <_printf_i+0x1a4>
 80059a4:	6823      	ldr	r3, [r4, #0]
 80059a6:	f023 0320 	bic.w	r3, r3, #32
 80059aa:	6023      	str	r3, [r4, #0]
 80059ac:	2310      	movs	r3, #16
 80059ae:	e7a7      	b.n	8005900 <_printf_i+0xf8>
 80059b0:	4824      	ldr	r0, [pc, #144]	; (8005a44 <_printf_i+0x23c>)
 80059b2:	e7e4      	b.n	800597e <_printf_i+0x176>
 80059b4:	4615      	mov	r5, r2
 80059b6:	e7bd      	b.n	8005934 <_printf_i+0x12c>
 80059b8:	682b      	ldr	r3, [r5, #0]
 80059ba:	6826      	ldr	r6, [r4, #0]
 80059bc:	6961      	ldr	r1, [r4, #20]
 80059be:	1d18      	adds	r0, r3, #4
 80059c0:	6028      	str	r0, [r5, #0]
 80059c2:	0635      	lsls	r5, r6, #24
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	d501      	bpl.n	80059cc <_printf_i+0x1c4>
 80059c8:	6019      	str	r1, [r3, #0]
 80059ca:	e002      	b.n	80059d2 <_printf_i+0x1ca>
 80059cc:	0670      	lsls	r0, r6, #25
 80059ce:	d5fb      	bpl.n	80059c8 <_printf_i+0x1c0>
 80059d0:	8019      	strh	r1, [r3, #0]
 80059d2:	2300      	movs	r3, #0
 80059d4:	6123      	str	r3, [r4, #16]
 80059d6:	4615      	mov	r5, r2
 80059d8:	e7bc      	b.n	8005954 <_printf_i+0x14c>
 80059da:	682b      	ldr	r3, [r5, #0]
 80059dc:	1d1a      	adds	r2, r3, #4
 80059de:	602a      	str	r2, [r5, #0]
 80059e0:	681d      	ldr	r5, [r3, #0]
 80059e2:	6862      	ldr	r2, [r4, #4]
 80059e4:	2100      	movs	r1, #0
 80059e6:	4628      	mov	r0, r5
 80059e8:	f7fa fc02 	bl	80001f0 <memchr>
 80059ec:	b108      	cbz	r0, 80059f2 <_printf_i+0x1ea>
 80059ee:	1b40      	subs	r0, r0, r5
 80059f0:	6060      	str	r0, [r4, #4]
 80059f2:	6863      	ldr	r3, [r4, #4]
 80059f4:	6123      	str	r3, [r4, #16]
 80059f6:	2300      	movs	r3, #0
 80059f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059fc:	e7aa      	b.n	8005954 <_printf_i+0x14c>
 80059fe:	6923      	ldr	r3, [r4, #16]
 8005a00:	462a      	mov	r2, r5
 8005a02:	4649      	mov	r1, r9
 8005a04:	4640      	mov	r0, r8
 8005a06:	47d0      	blx	sl
 8005a08:	3001      	adds	r0, #1
 8005a0a:	d0ad      	beq.n	8005968 <_printf_i+0x160>
 8005a0c:	6823      	ldr	r3, [r4, #0]
 8005a0e:	079b      	lsls	r3, r3, #30
 8005a10:	d413      	bmi.n	8005a3a <_printf_i+0x232>
 8005a12:	68e0      	ldr	r0, [r4, #12]
 8005a14:	9b03      	ldr	r3, [sp, #12]
 8005a16:	4298      	cmp	r0, r3
 8005a18:	bfb8      	it	lt
 8005a1a:	4618      	movlt	r0, r3
 8005a1c:	e7a6      	b.n	800596c <_printf_i+0x164>
 8005a1e:	2301      	movs	r3, #1
 8005a20:	4632      	mov	r2, r6
 8005a22:	4649      	mov	r1, r9
 8005a24:	4640      	mov	r0, r8
 8005a26:	47d0      	blx	sl
 8005a28:	3001      	adds	r0, #1
 8005a2a:	d09d      	beq.n	8005968 <_printf_i+0x160>
 8005a2c:	3501      	adds	r5, #1
 8005a2e:	68e3      	ldr	r3, [r4, #12]
 8005a30:	9903      	ldr	r1, [sp, #12]
 8005a32:	1a5b      	subs	r3, r3, r1
 8005a34:	42ab      	cmp	r3, r5
 8005a36:	dcf2      	bgt.n	8005a1e <_printf_i+0x216>
 8005a38:	e7eb      	b.n	8005a12 <_printf_i+0x20a>
 8005a3a:	2500      	movs	r5, #0
 8005a3c:	f104 0619 	add.w	r6, r4, #25
 8005a40:	e7f5      	b.n	8005a2e <_printf_i+0x226>
 8005a42:	bf00      	nop
 8005a44:	080060e9 	.word	0x080060e9
 8005a48:	080060fa 	.word	0x080060fa

08005a4c <memmove>:
 8005a4c:	4288      	cmp	r0, r1
 8005a4e:	b510      	push	{r4, lr}
 8005a50:	eb01 0402 	add.w	r4, r1, r2
 8005a54:	d902      	bls.n	8005a5c <memmove+0x10>
 8005a56:	4284      	cmp	r4, r0
 8005a58:	4623      	mov	r3, r4
 8005a5a:	d807      	bhi.n	8005a6c <memmove+0x20>
 8005a5c:	1e43      	subs	r3, r0, #1
 8005a5e:	42a1      	cmp	r1, r4
 8005a60:	d008      	beq.n	8005a74 <memmove+0x28>
 8005a62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a6a:	e7f8      	b.n	8005a5e <memmove+0x12>
 8005a6c:	4402      	add	r2, r0
 8005a6e:	4601      	mov	r1, r0
 8005a70:	428a      	cmp	r2, r1
 8005a72:	d100      	bne.n	8005a76 <memmove+0x2a>
 8005a74:	bd10      	pop	{r4, pc}
 8005a76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a7e:	e7f7      	b.n	8005a70 <memmove+0x24>

08005a80 <_sbrk_r>:
 8005a80:	b538      	push	{r3, r4, r5, lr}
 8005a82:	4d06      	ldr	r5, [pc, #24]	; (8005a9c <_sbrk_r+0x1c>)
 8005a84:	2300      	movs	r3, #0
 8005a86:	4604      	mov	r4, r0
 8005a88:	4608      	mov	r0, r1
 8005a8a:	602b      	str	r3, [r5, #0]
 8005a8c:	f7fb ff44 	bl	8001918 <_sbrk>
 8005a90:	1c43      	adds	r3, r0, #1
 8005a92:	d102      	bne.n	8005a9a <_sbrk_r+0x1a>
 8005a94:	682b      	ldr	r3, [r5, #0]
 8005a96:	b103      	cbz	r3, 8005a9a <_sbrk_r+0x1a>
 8005a98:	6023      	str	r3, [r4, #0]
 8005a9a:	bd38      	pop	{r3, r4, r5, pc}
 8005a9c:	200003bc 	.word	0x200003bc

08005aa0 <_realloc_r>:
 8005aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aa4:	4680      	mov	r8, r0
 8005aa6:	4614      	mov	r4, r2
 8005aa8:	460e      	mov	r6, r1
 8005aaa:	b921      	cbnz	r1, 8005ab6 <_realloc_r+0x16>
 8005aac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ab0:	4611      	mov	r1, r2
 8005ab2:	f7ff bc57 	b.w	8005364 <_malloc_r>
 8005ab6:	b92a      	cbnz	r2, 8005ac4 <_realloc_r+0x24>
 8005ab8:	f7ff fbe8 	bl	800528c <_free_r>
 8005abc:	4625      	mov	r5, r4
 8005abe:	4628      	mov	r0, r5
 8005ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ac4:	f000 f81b 	bl	8005afe <_malloc_usable_size_r>
 8005ac8:	4284      	cmp	r4, r0
 8005aca:	4607      	mov	r7, r0
 8005acc:	d802      	bhi.n	8005ad4 <_realloc_r+0x34>
 8005ace:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005ad2:	d812      	bhi.n	8005afa <_realloc_r+0x5a>
 8005ad4:	4621      	mov	r1, r4
 8005ad6:	4640      	mov	r0, r8
 8005ad8:	f7ff fc44 	bl	8005364 <_malloc_r>
 8005adc:	4605      	mov	r5, r0
 8005ade:	2800      	cmp	r0, #0
 8005ae0:	d0ed      	beq.n	8005abe <_realloc_r+0x1e>
 8005ae2:	42bc      	cmp	r4, r7
 8005ae4:	4622      	mov	r2, r4
 8005ae6:	4631      	mov	r1, r6
 8005ae8:	bf28      	it	cs
 8005aea:	463a      	movcs	r2, r7
 8005aec:	f7ff fbc0 	bl	8005270 <memcpy>
 8005af0:	4631      	mov	r1, r6
 8005af2:	4640      	mov	r0, r8
 8005af4:	f7ff fbca 	bl	800528c <_free_r>
 8005af8:	e7e1      	b.n	8005abe <_realloc_r+0x1e>
 8005afa:	4635      	mov	r5, r6
 8005afc:	e7df      	b.n	8005abe <_realloc_r+0x1e>

08005afe <_malloc_usable_size_r>:
 8005afe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b02:	1f18      	subs	r0, r3, #4
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	bfbc      	itt	lt
 8005b08:	580b      	ldrlt	r3, [r1, r0]
 8005b0a:	18c0      	addlt	r0, r0, r3
 8005b0c:	4770      	bx	lr
	...

08005b10 <_init>:
 8005b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b12:	bf00      	nop
 8005b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b16:	bc08      	pop	{r3}
 8005b18:	469e      	mov	lr, r3
 8005b1a:	4770      	bx	lr

08005b1c <_fini>:
 8005b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b1e:	bf00      	nop
 8005b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b22:	bc08      	pop	{r3}
 8005b24:	469e      	mov	lr, r3
 8005b26:	4770      	bx	lr
