
TX_F302R8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009548  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000648  080096d8  080096d8  000196d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d20  08009d20  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08009d20  08009d20  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009d20  08009d20  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d20  08009d20  00019d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d24  08009d24  00019d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08009d28  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001db8  20000068  08009d90  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e20  08009d90  00021e20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cfc5  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ba1  00000000  00000000  0003d0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017e0  00000000  00000000  00040c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000129e  00000000  00000000  00042428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dd52  00000000  00000000  000436c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bfbf  00000000  00000000  00061418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b28fc  00000000  00000000  0007d3d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000069b0  00000000  00000000  0012fcd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  00136684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080096c0 	.word	0x080096c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080096c0 	.word	0x080096c0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 800028c:	4b0b      	ldr	r3, [pc, #44]	; (80002bc <NRF24_DelayMicroSeconds+0x3c>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a0b      	ldr	r2, [pc, #44]	; (80002c0 <NRF24_DelayMicroSeconds+0x40>)
 8000292:	fba2 2303 	umull	r2, r3, r2, r3
 8000296:	0c9a      	lsrs	r2, r3, #18
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	fb02 f303 	mul.w	r3, r2, r3
 800029e:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80002a0:	bf00      	nop
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	1e5a      	subs	r2, r3, #1
 80002a6:	60fa      	str	r2, [r7, #12]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d1fa      	bne.n	80002a2 <NRF24_DelayMicroSeconds+0x22>
}
 80002ac:	bf00      	nop
 80002ae:	bf00      	nop
 80002b0:	3714      	adds	r7, #20
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	20000008 	.word	0x20000008
 80002c0:	165e9f81 	.word	0x165e9f81

080002c4 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d008      	beq.n	80002e4 <NRF24_csn+0x20>
 80002d2:	4b0a      	ldr	r3, [pc, #40]	; (80002fc <NRF24_csn+0x38>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	4a0a      	ldr	r2, [pc, #40]	; (8000300 <NRF24_csn+0x3c>)
 80002d8:	8811      	ldrh	r1, [r2, #0]
 80002da:	2201      	movs	r2, #1
 80002dc:	4618      	mov	r0, r3
 80002de:	f001 ffbd 	bl	800225c <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 80002e2:	e007      	b.n	80002f4 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80002e4:	4b05      	ldr	r3, [pc, #20]	; (80002fc <NRF24_csn+0x38>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a05      	ldr	r2, [pc, #20]	; (8000300 <NRF24_csn+0x3c>)
 80002ea:	8811      	ldrh	r1, [r2, #0]
 80002ec:	2200      	movs	r2, #0
 80002ee:	4618      	mov	r0, r3
 80002f0:	f001 ffb4 	bl	800225c <HAL_GPIO_WritePin>
}
 80002f4:	bf00      	nop
 80002f6:	3708      	adds	r7, #8
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	2000008c 	.word	0x2000008c
 8000300:	20000090 	.word	0x20000090

08000304 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	2b00      	cmp	r3, #0
 8000310:	d008      	beq.n	8000324 <NRF24_ce+0x20>
 8000312:	4b0a      	ldr	r3, [pc, #40]	; (800033c <NRF24_ce+0x38>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	4a0a      	ldr	r2, [pc, #40]	; (8000340 <NRF24_ce+0x3c>)
 8000318:	8811      	ldrh	r1, [r2, #0]
 800031a:	2201      	movs	r2, #1
 800031c:	4618      	mov	r0, r3
 800031e:	f001 ff9d 	bl	800225c <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000322:	e007      	b.n	8000334 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000324:	4b05      	ldr	r3, [pc, #20]	; (800033c <NRF24_ce+0x38>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a05      	ldr	r2, [pc, #20]	; (8000340 <NRF24_ce+0x3c>)
 800032a:	8811      	ldrh	r1, [r2, #0]
 800032c:	2200      	movs	r2, #0
 800032e:	4618      	mov	r0, r3
 8000330:	f001 ff94 	bl	800225c <HAL_GPIO_WritePin>
}
 8000334:	bf00      	nop
 8000336:	3708      	adds	r7, #8
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}
 800033c:	2000008c 	.word	0x2000008c
 8000340:	20000092 	.word	0x20000092

08000344 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b084      	sub	sp, #16
 8000348:	af00      	add	r7, sp, #0
 800034a:	4603      	mov	r3, r0
 800034c:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800034e:	2000      	movs	r0, #0
 8000350:	f7ff ffb8 	bl	80002c4 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000354:	79fb      	ldrb	r3, [r7, #7]
 8000356:	f003 031f 	and.w	r3, r3, #31
 800035a:	b2db      	uxtb	r3, r3
 800035c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800035e:	f107 010c 	add.w	r1, r7, #12
 8000362:	2364      	movs	r3, #100	; 0x64
 8000364:	2201      	movs	r2, #1
 8000366:	480a      	ldr	r0, [pc, #40]	; (8000390 <NRF24_read_register+0x4c>)
 8000368:	f003 fae1 	bl	800392e <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 800036c:	f107 030c 	add.w	r3, r7, #12
 8000370:	1c59      	adds	r1, r3, #1
 8000372:	2364      	movs	r3, #100	; 0x64
 8000374:	2201      	movs	r2, #1
 8000376:	4806      	ldr	r0, [pc, #24]	; (8000390 <NRF24_read_register+0x4c>)
 8000378:	f003 fc4e 	bl	8003c18 <HAL_SPI_Receive>
	retData = spiBuf[1];
 800037c:	7b7b      	ldrb	r3, [r7, #13]
 800037e:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8000380:	2001      	movs	r0, #1
 8000382:	f7ff ff9f 	bl	80002c4 <NRF24_csn>
	return retData;
 8000386:	7bfb      	ldrb	r3, [r7, #15]
}
 8000388:	4618      	mov	r0, r3
 800038a:	3710      	adds	r7, #16
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	20000094 	.word	0x20000094

08000394 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b084      	sub	sp, #16
 8000398:	af00      	add	r7, sp, #0
 800039a:	4603      	mov	r3, r0
 800039c:	6039      	str	r1, [r7, #0]
 800039e:	71fb      	strb	r3, [r7, #7]
 80003a0:	4613      	mov	r3, r2
 80003a2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80003a4:	2000      	movs	r0, #0
 80003a6:	f7ff ff8d 	bl	80002c4 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80003aa:	79fb      	ldrb	r3, [r7, #7]
 80003ac:	f003 031f 	and.w	r3, r3, #31
 80003b0:	b2db      	uxtb	r3, r3
 80003b2:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80003b4:	f107 010c 	add.w	r1, r7, #12
 80003b8:	2364      	movs	r3, #100	; 0x64
 80003ba:	2201      	movs	r2, #1
 80003bc:	4808      	ldr	r0, [pc, #32]	; (80003e0 <NRF24_read_registerN+0x4c>)
 80003be:	f003 fab6 	bl	800392e <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 80003c2:	79bb      	ldrb	r3, [r7, #6]
 80003c4:	b29a      	uxth	r2, r3
 80003c6:	2364      	movs	r3, #100	; 0x64
 80003c8:	6839      	ldr	r1, [r7, #0]
 80003ca:	4805      	ldr	r0, [pc, #20]	; (80003e0 <NRF24_read_registerN+0x4c>)
 80003cc:	f003 fc24 	bl	8003c18 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 80003d0:	2001      	movs	r0, #1
 80003d2:	f7ff ff77 	bl	80002c4 <NRF24_csn>
}
 80003d6:	bf00      	nop
 80003d8:	3710      	adds	r7, #16
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	20000094 	.word	0x20000094

080003e4 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b084      	sub	sp, #16
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	4603      	mov	r3, r0
 80003ec:	460a      	mov	r2, r1
 80003ee:	71fb      	strb	r3, [r7, #7]
 80003f0:	4613      	mov	r3, r2
 80003f2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80003f4:	2000      	movs	r0, #0
 80003f6:	f7ff ff65 	bl	80002c4 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80003fa:	79fb      	ldrb	r3, [r7, #7]
 80003fc:	f043 0320 	orr.w	r3, r3, #32
 8000400:	b2db      	uxtb	r3, r3
 8000402:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000404:	79bb      	ldrb	r3, [r7, #6]
 8000406:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000408:	f107 010c 	add.w	r1, r7, #12
 800040c:	2364      	movs	r3, #100	; 0x64
 800040e:	2202      	movs	r2, #2
 8000410:	4804      	ldr	r0, [pc, #16]	; (8000424 <NRF24_write_register+0x40>)
 8000412:	f003 fa8c 	bl	800392e <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000416:	2001      	movs	r0, #1
 8000418:	f7ff ff54 	bl	80002c4 <NRF24_csn>
}
 800041c:	bf00      	nop
 800041e:	3710      	adds	r7, #16
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	20000094 	.word	0x20000094

08000428 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b084      	sub	sp, #16
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	6039      	str	r1, [r7, #0]
 8000432:	71fb      	strb	r3, [r7, #7]
 8000434:	4613      	mov	r3, r2
 8000436:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000438:	2000      	movs	r0, #0
 800043a:	f7ff ff43 	bl	80002c4 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800043e:	79fb      	ldrb	r3, [r7, #7]
 8000440:	f043 0320 	orr.w	r3, r3, #32
 8000444:	b2db      	uxtb	r3, r3
 8000446:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000448:	f107 010c 	add.w	r1, r7, #12
 800044c:	2364      	movs	r3, #100	; 0x64
 800044e:	2201      	movs	r2, #1
 8000450:	4808      	ldr	r0, [pc, #32]	; (8000474 <NRF24_write_registerN+0x4c>)
 8000452:	f003 fa6c 	bl	800392e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000456:	79bb      	ldrb	r3, [r7, #6]
 8000458:	b29a      	uxth	r2, r3
 800045a:	2364      	movs	r3, #100	; 0x64
 800045c:	6839      	ldr	r1, [r7, #0]
 800045e:	4805      	ldr	r0, [pc, #20]	; (8000474 <NRF24_write_registerN+0x4c>)
 8000460:	f003 fa65 	bl	800392e <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000464:	2001      	movs	r0, #1
 8000466:	f7ff ff2d 	bl	80002c4 <NRF24_csn>
}
 800046a:	bf00      	nop
 800046c:	3710      	adds	r7, #16
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	20000094 	.word	0x20000094

08000478 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
 8000480:	460b      	mov	r3, r1
 8000482:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8000484:	2000      	movs	r0, #0
 8000486:	f7ff ff1d 	bl	80002c4 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 800048a:	23a0      	movs	r3, #160	; 0xa0
 800048c:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 800048e:	f107 010f 	add.w	r1, r7, #15
 8000492:	2364      	movs	r3, #100	; 0x64
 8000494:	2201      	movs	r2, #1
 8000496:	4808      	ldr	r0, [pc, #32]	; (80004b8 <NRF24_write_payload+0x40>)
 8000498:	f003 fa49 	bl	800392e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 800049c:	78fb      	ldrb	r3, [r7, #3]
 800049e:	b29a      	uxth	r2, r3
 80004a0:	2364      	movs	r3, #100	; 0x64
 80004a2:	6879      	ldr	r1, [r7, #4]
 80004a4:	4804      	ldr	r0, [pc, #16]	; (80004b8 <NRF24_write_payload+0x40>)
 80004a6:	f003 fa42 	bl	800392e <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80004aa:	2001      	movs	r0, #1
 80004ac:	f7ff ff0a 	bl	80002c4 <NRF24_csn>
}
 80004b0:	bf00      	nop
 80004b2:	3710      	adds	r7, #16
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	20000094 	.word	0x20000094

080004bc <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80004c0:	21ff      	movs	r1, #255	; 0xff
 80004c2:	20e1      	movs	r0, #225	; 0xe1
 80004c4:	f7ff ff8e 	bl	80003e4 <NRF24_write_register>
}
 80004c8:	bf00      	nop
 80004ca:	bd80      	pop	{r7, pc}

080004cc <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 80004d0:	21ff      	movs	r1, #255	; 0xff
 80004d2:	20e2      	movs	r0, #226	; 0xe2
 80004d4:	f7ff ff86 	bl	80003e4 <NRF24_write_register>
}
 80004d8:	bf00      	nop
 80004da:	bd80      	pop	{r7, pc}

080004dc <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 80004e2:	2007      	movs	r0, #7
 80004e4:	f7ff ff2e 	bl	8000344 <NRF24_read_register>
 80004e8:	4603      	mov	r3, r0
 80004ea:	71fb      	strb	r3, [r7, #7]
	return statReg;
 80004ec:	79fb      	ldrb	r3, [r7, #7]
}
 80004ee:	4618      	mov	r0, r3
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
	...

080004f8 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 80004f8:	b082      	sub	sp, #8
 80004fa:	b580      	push	{r7, lr}
 80004fc:	b084      	sub	sp, #16
 80004fe:	af00      	add	r7, sp, #0
 8000500:	6078      	str	r0, [r7, #4]
 8000502:	61fb      	str	r3, [r7, #28]
 8000504:	460b      	mov	r3, r1
 8000506:	807b      	strh	r3, [r7, #2]
 8000508:	4613      	mov	r3, r2
 800050a:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 800050c:	4b66      	ldr	r3, [pc, #408]	; (80006a8 <NRF24_begin+0x1b0>)
 800050e:	4618      	mov	r0, r3
 8000510:	f107 031c 	add.w	r3, r7, #28
 8000514:	2264      	movs	r2, #100	; 0x64
 8000516:	4619      	mov	r1, r3
 8000518:	f008 fc82 	bl	8008e20 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 800051c:	4a63      	ldr	r2, [pc, #396]	; (80006ac <NRF24_begin+0x1b4>)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000522:	4a63      	ldr	r2, [pc, #396]	; (80006b0 <NRF24_begin+0x1b8>)
 8000524:	887b      	ldrh	r3, [r7, #2]
 8000526:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000528:	4a62      	ldr	r2, [pc, #392]	; (80006b4 <NRF24_begin+0x1bc>)
 800052a:	883b      	ldrh	r3, [r7, #0]
 800052c:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 800052e:	2001      	movs	r0, #1
 8000530:	f7ff fec8 	bl	80002c4 <NRF24_csn>
	NRF24_ce(0);
 8000534:	2000      	movs	r0, #0
 8000536:	f7ff fee5 	bl	8000304 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 800053a:	2005      	movs	r0, #5
 800053c:	f001 fb9e 	bl	8001c7c <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000540:	2108      	movs	r1, #8
 8000542:	2000      	movs	r0, #0
 8000544:	f7ff ff4e 	bl	80003e4 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000548:	213f      	movs	r1, #63	; 0x3f
 800054a:	2001      	movs	r0, #1
 800054c:	f7ff ff4a 	bl	80003e4 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000550:	2103      	movs	r1, #3
 8000552:	2002      	movs	r0, #2
 8000554:	f7ff ff46 	bl	80003e4 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000558:	2103      	movs	r1, #3
 800055a:	2003      	movs	r0, #3
 800055c:	f7ff ff42 	bl	80003e4 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000560:	2103      	movs	r1, #3
 8000562:	2004      	movs	r0, #4
 8000564:	f7ff ff3e 	bl	80003e4 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000568:	2102      	movs	r1, #2
 800056a:	2005      	movs	r0, #5
 800056c:	f7ff ff3a 	bl	80003e4 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000570:	210f      	movs	r1, #15
 8000572:	2006      	movs	r0, #6
 8000574:	f7ff ff36 	bl	80003e4 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000578:	210e      	movs	r1, #14
 800057a:	2007      	movs	r0, #7
 800057c:	f7ff ff32 	bl	80003e4 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000580:	2100      	movs	r1, #0
 8000582:	2008      	movs	r0, #8
 8000584:	f7ff ff2e 	bl	80003e4 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000588:	2100      	movs	r1, #0
 800058a:	2009      	movs	r0, #9
 800058c:	f7ff ff2a 	bl	80003e4 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000590:	23e7      	movs	r3, #231	; 0xe7
 8000592:	733b      	strb	r3, [r7, #12]
 8000594:	23e7      	movs	r3, #231	; 0xe7
 8000596:	72fb      	strb	r3, [r7, #11]
 8000598:	23e7      	movs	r3, #231	; 0xe7
 800059a:	72bb      	strb	r3, [r7, #10]
 800059c:	23e7      	movs	r3, #231	; 0xe7
 800059e:	727b      	strb	r3, [r7, #9]
 80005a0:	23e7      	movs	r3, #231	; 0xe7
 80005a2:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80005a4:	f107 0308 	add.w	r3, r7, #8
 80005a8:	2205      	movs	r2, #5
 80005aa:	4619      	mov	r1, r3
 80005ac:	200a      	movs	r0, #10
 80005ae:	f7ff ff3b 	bl	8000428 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 80005b2:	23c2      	movs	r3, #194	; 0xc2
 80005b4:	733b      	strb	r3, [r7, #12]
 80005b6:	23c2      	movs	r3, #194	; 0xc2
 80005b8:	72fb      	strb	r3, [r7, #11]
 80005ba:	23c2      	movs	r3, #194	; 0xc2
 80005bc:	72bb      	strb	r3, [r7, #10]
 80005be:	23c2      	movs	r3, #194	; 0xc2
 80005c0:	727b      	strb	r3, [r7, #9]
 80005c2:	23c2      	movs	r3, #194	; 0xc2
 80005c4:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80005c6:	f107 0308 	add.w	r3, r7, #8
 80005ca:	2205      	movs	r2, #5
 80005cc:	4619      	mov	r1, r3
 80005ce:	200b      	movs	r0, #11
 80005d0:	f7ff ff2a 	bl	8000428 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 80005d4:	21c3      	movs	r1, #195	; 0xc3
 80005d6:	200c      	movs	r0, #12
 80005d8:	f7ff ff04 	bl	80003e4 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 80005dc:	21c4      	movs	r1, #196	; 0xc4
 80005de:	200d      	movs	r0, #13
 80005e0:	f7ff ff00 	bl	80003e4 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 80005e4:	21c5      	movs	r1, #197	; 0xc5
 80005e6:	200e      	movs	r0, #14
 80005e8:	f7ff fefc 	bl	80003e4 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 80005ec:	21c6      	movs	r1, #198	; 0xc6
 80005ee:	200f      	movs	r0, #15
 80005f0:	f7ff fef8 	bl	80003e4 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 80005f4:	23e7      	movs	r3, #231	; 0xe7
 80005f6:	733b      	strb	r3, [r7, #12]
 80005f8:	23e7      	movs	r3, #231	; 0xe7
 80005fa:	72fb      	strb	r3, [r7, #11]
 80005fc:	23e7      	movs	r3, #231	; 0xe7
 80005fe:	72bb      	strb	r3, [r7, #10]
 8000600:	23e7      	movs	r3, #231	; 0xe7
 8000602:	727b      	strb	r3, [r7, #9]
 8000604:	23e7      	movs	r3, #231	; 0xe7
 8000606:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000608:	f107 0308 	add.w	r3, r7, #8
 800060c:	2205      	movs	r2, #5
 800060e:	4619      	mov	r1, r3
 8000610:	2010      	movs	r0, #16
 8000612:	f7ff ff09 	bl	8000428 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000616:	2100      	movs	r1, #0
 8000618:	2011      	movs	r0, #17
 800061a:	f7ff fee3 	bl	80003e4 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 800061e:	2100      	movs	r1, #0
 8000620:	2012      	movs	r0, #18
 8000622:	f7ff fedf 	bl	80003e4 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000626:	2100      	movs	r1, #0
 8000628:	2013      	movs	r0, #19
 800062a:	f7ff fedb 	bl	80003e4 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 800062e:	2100      	movs	r1, #0
 8000630:	2014      	movs	r0, #20
 8000632:	f7ff fed7 	bl	80003e4 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000636:	2100      	movs	r1, #0
 8000638:	2015      	movs	r0, #21
 800063a:	f7ff fed3 	bl	80003e4 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 800063e:	2100      	movs	r1, #0
 8000640:	2016      	movs	r0, #22
 8000642:	f7ff fecf 	bl	80003e4 <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 8000646:	f000 fabb 	bl	8000bc0 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 800064a:	2100      	movs	r1, #0
 800064c:	201c      	movs	r0, #28
 800064e:	f7ff fec9 	bl	80003e4 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000652:	2100      	movs	r1, #0
 8000654:	201d      	movs	r0, #29
 8000656:	f7ff fec5 	bl	80003e4 <NRF24_write_register>
	printRadioSettings();
 800065a:	f000 facb 	bl	8000bf4 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 800065e:	210f      	movs	r1, #15
 8000660:	200f      	movs	r0, #15
 8000662:	f000 f8ad 	bl	80007c0 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000666:	2003      	movs	r0, #3
 8000668:	f000 f959 	bl	800091e <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 800066c:	2001      	movs	r0, #1
 800066e:	f000 f98f 	bl	8000990 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000672:	2002      	movs	r0, #2
 8000674:	f000 f9d2 	bl	8000a1c <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000678:	f000 f924 	bl	80008c4 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 800067c:	2020      	movs	r0, #32
 800067e:	f000 f8cf 	bl	8000820 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8000682:	f000 fa94 	bl	8000bae <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000686:	204c      	movs	r0, #76	; 0x4c
 8000688:	f000 f8b5 	bl	80007f6 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 800068c:	f7ff ff16 	bl	80004bc <NRF24_flush_tx>
	NRF24_flush_rx();
 8000690:	f7ff ff1c 	bl	80004cc <NRF24_flush_rx>
	
	NRF24_powerDown();
 8000694:	f000 f9ea 	bl	8000a6c <NRF24_powerDown>
	
}
 8000698:	bf00      	nop
 800069a:	3710      	adds	r7, #16
 800069c:	46bd      	mov	sp, r7
 800069e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006a2:	b002      	add	sp, #8
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	20000094 	.word	0x20000094
 80006ac:	2000008c 	.word	0x2000008c
 80006b0:	20000090 	.word	0x20000090
 80006b4:	20000092 	.word	0x20000092

080006b8 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 80006bc:	2000      	movs	r0, #0
 80006be:	f7ff fe21 	bl	8000304 <NRF24_ce>
	NRF24_flush_tx();
 80006c2:	f7ff fefb 	bl	80004bc <NRF24_flush_tx>
	NRF24_flush_rx();
 80006c6:	f7ff ff01 	bl	80004cc <NRF24_flush_rx>
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
	...

080006d0 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	460b      	mov	r3, r1
 80006da:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 80006dc:	f000 fa67 	bl	8000bae <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 80006e0:	78fb      	ldrb	r3, [r7, #3]
 80006e2:	4619      	mov	r1, r3
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f000 fa00 	bl	8000aea <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 80006ea:	f001 fabb 	bl	8001c64 <HAL_GetTick>
 80006ee:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 80006f0:	230a      	movs	r3, #10
 80006f2:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 80006f4:	f107 030d 	add.w	r3, r7, #13
 80006f8:	2201      	movs	r2, #1
 80006fa:	4619      	mov	r1, r3
 80006fc:	2008      	movs	r0, #8
 80006fe:	f7ff fe49 	bl	8000394 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8000702:	f7ff feeb 	bl	80004dc <NRF24_get_status>
 8000706:	4603      	mov	r3, r0
 8000708:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 800070a:	7bfb      	ldrb	r3, [r7, #15]
 800070c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000710:	2b00      	cmp	r3, #0
 8000712:	d107      	bne.n	8000724 <NRF24_write+0x54>
 8000714:	f001 faa6 	bl	8001c64 <HAL_GetTick>
 8000718:	4602      	mov	r2, r0
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	1ad3      	subs	r3, r2, r3
 800071e:	693a      	ldr	r2, [r7, #16]
 8000720:	429a      	cmp	r2, r3
 8000722:	d8e7      	bhi.n	80006f4 <NRF24_write+0x24>
	
//	printConfigReg();
//	printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8000724:	f107 010b 	add.w	r1, r7, #11
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	4a0c      	ldr	r2, [pc, #48]	; (8000760 <NRF24_write+0x90>)
 800072e:	4618      	mov	r0, r3
 8000730:	f000 fa0a 	bl	8000b48 <NRF24_whatHappened>
	retStatus = tx_ok;
 8000734:	7b3b      	ldrb	r3, [r7, #12]
 8000736:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <NRF24_write+0x90>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d005      	beq.n	800074c <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8000740:	f000 f886 	bl	8000850 <NRF24_getDynamicPayloadSize>
 8000744:	4603      	mov	r3, r0
 8000746:	461a      	mov	r2, r3
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <NRF24_write+0x94>)
 800074a:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 800074c:	f000 f80c 	bl	8000768 <NRF24_available>
	NRF24_flush_tx();
 8000750:	f7ff feb4 	bl	80004bc <NRF24_flush_tx>
	return retStatus;
 8000754:	7bbb      	ldrb	r3, [r7, #14]
}
 8000756:	4618      	mov	r0, r3
 8000758:	3718      	adds	r7, #24
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000084 	.word	0x20000084
 8000764:	20000085 	.word	0x20000085

08000768 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 800076c:	2000      	movs	r0, #0
 800076e:	f000 f98c 	bl	8000a8a <NRF24_availablePipe>
 8000772:	4603      	mov	r3, r0
}
 8000774:	4618      	mov	r0, r3
 8000776:	bd80      	pop	{r7, pc}

08000778 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8000782:	463b      	mov	r3, r7
 8000784:	2205      	movs	r2, #5
 8000786:	4619      	mov	r1, r3
 8000788:	200a      	movs	r0, #10
 800078a:	f7ff fe4d 	bl	8000428 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 800078e:	463b      	mov	r3, r7
 8000790:	2205      	movs	r2, #5
 8000792:	4619      	mov	r1, r3
 8000794:	2010      	movs	r0, #16
 8000796:	f7ff fe47 	bl	8000428 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 800079a:	2320      	movs	r3, #32
 800079c:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 800079e:	4b07      	ldr	r3, [pc, #28]	; (80007bc <NRF24_openWritingPipe+0x44>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	7bfa      	ldrb	r2, [r7, #15]
 80007a4:	4293      	cmp	r3, r2
 80007a6:	bf28      	it	cs
 80007a8:	4613      	movcs	r3, r2
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	4619      	mov	r1, r3
 80007ae:	2011      	movs	r0, #17
 80007b0:	f7ff fe18 	bl	80003e4 <NRF24_write_register>
}
 80007b4:	bf00      	nop
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000086 	.word	0x20000086

080007c0 <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	460a      	mov	r2, r1
 80007ca:	71fb      	strb	r3, [r7, #7]
 80007cc:	4613      	mov	r3, r2
 80007ce:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	011b      	lsls	r3, r3, #4
 80007d4:	b25a      	sxtb	r2, r3
 80007d6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80007da:	f003 030f 	and.w	r3, r3, #15
 80007de:	b25b      	sxtb	r3, r3
 80007e0:	4313      	orrs	r3, r2
 80007e2:	b25b      	sxtb	r3, r3
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	4619      	mov	r1, r3
 80007e8:	2004      	movs	r0, #4
 80007ea:	f7ff fdfb 	bl	80003e4 <NRF24_write_register>
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b084      	sub	sp, #16
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	4603      	mov	r3, r0
 80007fe:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000800:	237f      	movs	r3, #127	; 0x7f
 8000802:	73fb      	strb	r3, [r7, #15]
	NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000804:	7bfa      	ldrb	r2, [r7, #15]
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	4293      	cmp	r3, r2
 800080a:	bf28      	it	cs
 800080c:	4613      	movcs	r3, r2
 800080e:	b2db      	uxtb	r3, r3
 8000810:	4619      	mov	r1, r3
 8000812:	2005      	movs	r0, #5
 8000814:	f7ff fde6 	bl	80003e4 <NRF24_write_register>
}
 8000818:	bf00      	nop
 800081a:	3710      	adds	r7, #16
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 800082a:	2320      	movs	r3, #32
 800082c:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 800082e:	7bfa      	ldrb	r2, [r7, #15]
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	4293      	cmp	r3, r2
 8000834:	bf28      	it	cs
 8000836:	4613      	movcs	r3, r2
 8000838:	b2da      	uxtb	r2, r3
 800083a:	4b04      	ldr	r3, [pc, #16]	; (800084c <NRF24_setPayloadSize+0x2c>)
 800083c:	701a      	strb	r2, [r3, #0]
}
 800083e:	bf00      	nop
 8000840:	3714      	adds	r7, #20
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	20000086 	.word	0x20000086

08000850 <NRF24_getDynamicPayloadSize>:
{
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000854:	2060      	movs	r0, #96	; 0x60
 8000856:	f7ff fd75 	bl	8000344 <NRF24_read_register>
 800085a:	4603      	mov	r3, r0
}
 800085c:	4618      	mov	r0, r3
 800085e:	bd80      	pop	{r7, pc}

08000860 <NRF24_enableDynamicPayloads>:
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
}
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8000864:	201d      	movs	r0, #29
 8000866:	f7ff fd6d 	bl	8000344 <NRF24_read_register>
 800086a:	4603      	mov	r3, r0
 800086c:	f043 0304 	orr.w	r3, r3, #4
 8000870:	b2db      	uxtb	r3, r3
 8000872:	4619      	mov	r1, r3
 8000874:	201d      	movs	r0, #29
 8000876:	f7ff fdb5 	bl	80003e4 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 800087a:	201d      	movs	r0, #29
 800087c:	f7ff fd62 	bl	8000344 <NRF24_read_register>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d10c      	bne.n	80008a0 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8000886:	f000 f99b 	bl	8000bc0 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 800088a:	201d      	movs	r0, #29
 800088c:	f7ff fd5a 	bl	8000344 <NRF24_read_register>
 8000890:	4603      	mov	r3, r0
 8000892:	f043 0304 	orr.w	r3, r3, #4
 8000896:	b2db      	uxtb	r3, r3
 8000898:	4619      	mov	r1, r3
 800089a:	201d      	movs	r0, #29
 800089c:	f7ff fda2 	bl	80003e4 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 80008a0:	201c      	movs	r0, #28
 80008a2:	f7ff fd4f 	bl	8000344 <NRF24_read_register>
 80008a6:	4603      	mov	r3, r0
 80008a8:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	4619      	mov	r1, r3
 80008b0:	201c      	movs	r0, #28
 80008b2:	f7ff fd97 	bl	80003e4 <NRF24_write_register>
  dynamic_payloads_enabled = true;
 80008b6:	4b02      	ldr	r3, [pc, #8]	; (80008c0 <NRF24_enableDynamicPayloads+0x60>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	701a      	strb	r2, [r3, #0]
	
}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000087 	.word	0x20000087

080008c4 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 80008c8:	201d      	movs	r0, #29
 80008ca:	f7ff fd3b 	bl	8000344 <NRF24_read_register>
 80008ce:	4603      	mov	r3, r0
 80008d0:	f023 0304 	bic.w	r3, r3, #4
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	4619      	mov	r1, r3
 80008d8:	201d      	movs	r0, #29
 80008da:	f7ff fd83 	bl	80003e4 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 80008de:	2100      	movs	r1, #0
 80008e0:	201c      	movs	r0, #28
 80008e2:	f7ff fd7f 	bl	80003e4 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 80008e6:	4b02      	ldr	r3, [pc, #8]	; (80008f0 <NRF24_disableDynamicPayloads+0x2c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	701a      	strb	r2, [r3, #0]
}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000087 	.word	0x20000087

080008f4 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d004      	beq.n	800090e <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000904:	213f      	movs	r1, #63	; 0x3f
 8000906:	2001      	movs	r0, #1
 8000908:	f7ff fd6c 	bl	80003e4 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 800090c:	e003      	b.n	8000916 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 800090e:	2100      	movs	r1, #0
 8000910:	2001      	movs	r0, #1
 8000912:	f7ff fd67 	bl	80003e4 <NRF24_write_register>
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b084      	sub	sp, #16
 8000922:	af00      	add	r7, sp, #0
 8000924:	4603      	mov	r3, r0
 8000926:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000928:	2006      	movs	r0, #6
 800092a:	f7ff fd0b 	bl	8000344 <NRF24_read_register>
 800092e:	4603      	mov	r3, r0
 8000930:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000932:	7bfb      	ldrb	r3, [r7, #15]
 8000934:	f023 0306 	bic.w	r3, r3, #6
 8000938:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	2b03      	cmp	r3, #3
 800093e:	d104      	bne.n	800094a <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000940:	7bfb      	ldrb	r3, [r7, #15]
 8000942:	f043 0306 	orr.w	r3, r3, #6
 8000946:	73fb      	strb	r3, [r7, #15]
 8000948:	e019      	b.n	800097e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	2b02      	cmp	r3, #2
 800094e:	d104      	bne.n	800095a <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000950:	7bfb      	ldrb	r3, [r7, #15]
 8000952:	f043 0304 	orr.w	r3, r3, #4
 8000956:	73fb      	strb	r3, [r7, #15]
 8000958:	e011      	b.n	800097e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	2b01      	cmp	r3, #1
 800095e:	d104      	bne.n	800096a <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000960:	7bfb      	ldrb	r3, [r7, #15]
 8000962:	f043 0302 	orr.w	r3, r3, #2
 8000966:	73fb      	strb	r3, [r7, #15]
 8000968:	e009      	b.n	800097e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d006      	beq.n	800097e <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	2b04      	cmp	r3, #4
 8000974:	d103      	bne.n	800097e <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000976:	7bfb      	ldrb	r3, [r7, #15]
 8000978:	f043 0306 	orr.w	r3, r3, #6
 800097c:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 800097e:	7bfb      	ldrb	r3, [r7, #15]
 8000980:	4619      	mov	r1, r3
 8000982:	2006      	movs	r0, #6
 8000984:	f7ff fd2e 	bl	80003e4 <NRF24_write_register>
}
 8000988:	bf00      	nop
 800098a:	3710      	adds	r7, #16
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 800099a:	2300      	movs	r3, #0
 800099c:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 800099e:	2006      	movs	r0, #6
 80009a0:	f7ff fcd0 	bl	8000344 <NRF24_read_register>
 80009a4:	4603      	mov	r3, r0
 80009a6:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 80009a8:	4b1b      	ldr	r3, [pc, #108]	; (8000a18 <NRF24_setDataRate+0x88>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 80009ae:	7bbb      	ldrb	r3, [r7, #14]
 80009b0:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80009b4:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 80009b6:	79fb      	ldrb	r3, [r7, #7]
 80009b8:	2b02      	cmp	r3, #2
 80009ba:	d107      	bne.n	80009cc <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 80009bc:	4b16      	ldr	r3, [pc, #88]	; (8000a18 <NRF24_setDataRate+0x88>)
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 80009c2:	7bbb      	ldrb	r3, [r7, #14]
 80009c4:	f043 0320 	orr.w	r3, r3, #32
 80009c8:	73bb      	strb	r3, [r7, #14]
 80009ca:	e00d      	b.n	80009e8 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d107      	bne.n	80009e2 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 80009d2:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <NRF24_setDataRate+0x88>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 80009d8:	7bbb      	ldrb	r3, [r7, #14]
 80009da:	f043 0308 	orr.w	r3, r3, #8
 80009de:	73bb      	strb	r3, [r7, #14]
 80009e0:	e002      	b.n	80009e8 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 80009e2:	4b0d      	ldr	r3, [pc, #52]	; (8000a18 <NRF24_setDataRate+0x88>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 80009e8:	7bbb      	ldrb	r3, [r7, #14]
 80009ea:	4619      	mov	r1, r3
 80009ec:	2006      	movs	r0, #6
 80009ee:	f7ff fcf9 	bl	80003e4 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 80009f2:	2006      	movs	r0, #6
 80009f4:	f7ff fca6 	bl	8000344 <NRF24_read_register>
 80009f8:	4603      	mov	r3, r0
 80009fa:	461a      	mov	r2, r3
 80009fc:	7bbb      	ldrb	r3, [r7, #14]
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d102      	bne.n	8000a08 <NRF24_setDataRate+0x78>
  {
    result = true;
 8000a02:	2301      	movs	r3, #1
 8000a04:	73fb      	strb	r3, [r7, #15]
 8000a06:	e002      	b.n	8000a0e <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000a08:	4b03      	ldr	r3, [pc, #12]	; (8000a18 <NRF24_setDataRate+0x88>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8000a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000088 	.word	0x20000088

08000a1c <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000a26:	2000      	movs	r0, #0
 8000a28:	f7ff fc8c 	bl	8000344 <NRF24_read_register>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	f023 030c 	bic.w	r3, r3, #12
 8000a32:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d00f      	beq.n	8000a5a <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d104      	bne.n	8000a4a <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000a40:	7bfb      	ldrb	r3, [r7, #15]
 8000a42:	f043 0308 	orr.w	r3, r3, #8
 8000a46:	73fb      	strb	r3, [r7, #15]
 8000a48:	e007      	b.n	8000a5a <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000a4a:	7bfb      	ldrb	r3, [r7, #15]
 8000a4c:	f043 0308 	orr.w	r3, r3, #8
 8000a50:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000a52:	7bfb      	ldrb	r3, [r7, #15]
 8000a54:	f043 0304 	orr.w	r3, r3, #4
 8000a58:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000a5a:	7bfb      	ldrb	r3, [r7, #15]
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	2000      	movs	r0, #0
 8000a60:	f7ff fcc0 	bl	80003e4 <NRF24_write_register>
}
 8000a64:	bf00      	nop
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000a70:	2000      	movs	r0, #0
 8000a72:	f7ff fc67 	bl	8000344 <NRF24_read_register>
 8000a76:	4603      	mov	r3, r0
 8000a78:	f023 0302 	bic.w	r3, r3, #2
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	4619      	mov	r1, r3
 8000a80:	2000      	movs	r0, #0
 8000a82:	f7ff fcaf 	bl	80003e4 <NRF24_write_register>
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b084      	sub	sp, #16
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000a92:	f7ff fd23 	bl	80004dc <NRF24_get_status>
 8000a96:	4603      	mov	r3, r0
 8000a98:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8000a9a:	7bfb      	ldrb	r3, [r7, #15]
 8000a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	bf14      	ite	ne
 8000aa4:	2301      	movne	r3, #1
 8000aa6:	2300      	moveq	r3, #0
 8000aa8:	73bb      	strb	r3, [r7, #14]

  if (result)
 8000aaa:	7bbb      	ldrb	r3, [r7, #14]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d017      	beq.n	8000ae0 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d007      	beq.n	8000ac6 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8000ab6:	7bfb      	ldrb	r3, [r7, #15]
 8000ab8:	085b      	lsrs	r3, r3, #1
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	f003 0307 	and.w	r3, r3, #7
 8000ac0:	b2da      	uxtb	r2, r3
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8000ac6:	2140      	movs	r1, #64	; 0x40
 8000ac8:	2007      	movs	r0, #7
 8000aca:	f7ff fc8b 	bl	80003e4 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8000ace:	7bfb      	ldrb	r3, [r7, #15]
 8000ad0:	f003 0320 	and.w	r3, r3, #32
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d003      	beq.n	8000ae0 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8000ad8:	2120      	movs	r1, #32
 8000ada:	2007      	movs	r0, #7
 8000adc:	f7ff fc82 	bl	80003e4 <NRF24_write_register>
    }
  }
  return result;
 8000ae0:	7bbb      	ldrb	r3, [r7, #14]
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3710      	adds	r7, #16
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b082      	sub	sp, #8
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
 8000af2:	460b      	mov	r3, r1
 8000af4:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 8000af6:	2000      	movs	r0, #0
 8000af8:	f7ff fc04 	bl	8000304 <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8000afc:	2000      	movs	r0, #0
 8000afe:	f7ff fc21 	bl	8000344 <NRF24_read_register>
 8000b02:	4603      	mov	r3, r0
 8000b04:	f043 0302 	orr.w	r3, r3, #2
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	f023 0301 	bic.w	r3, r3, #1
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	4619      	mov	r1, r3
 8000b12:	2000      	movs	r0, #0
 8000b14:	f7ff fc66 	bl	80003e4 <NRF24_write_register>
  NRF24_ce(1);
 8000b18:	2001      	movs	r0, #1
 8000b1a:	f7ff fbf3 	bl	8000304 <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 8000b1e:	2096      	movs	r0, #150	; 0x96
 8000b20:	f7ff fbae 	bl	8000280 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8000b24:	78fb      	ldrb	r3, [r7, #3]
 8000b26:	4619      	mov	r1, r3
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f7ff fca5 	bl	8000478 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8000b2e:	2001      	movs	r0, #1
 8000b30:	f7ff fbe8 	bl	8000304 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8000b34:	200f      	movs	r0, #15
 8000b36:	f7ff fba3 	bl	8000280 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f7ff fbe2 	bl	8000304 <NRF24_ce>
}
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000b54:	f7ff fcc2 	bl	80004dc <NRF24_get_status>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000b62:	2170      	movs	r1, #112	; 0x70
 8000b64:	2007      	movs	r0, #7
 8000b66:	f7ff fc3d 	bl	80003e4 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8000b6a:	7dfb      	ldrb	r3, [r7, #23]
 8000b6c:	f003 0320 	and.w	r3, r3, #32
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	bf14      	ite	ne
 8000b74:	2301      	movne	r3, #1
 8000b76:	2300      	moveq	r3, #0
 8000b78:	b2da      	uxtb	r2, r3
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 8000b7e:	7dfb      	ldrb	r3, [r7, #23]
 8000b80:	f003 0310 	and.w	r3, r3, #16
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	bf14      	ite	ne
 8000b88:	2301      	movne	r3, #1
 8000b8a:	2300      	moveq	r3, #0
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8000b92:	7dfb      	ldrb	r3, [r7, #23]
 8000b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	bf14      	ite	ne
 8000b9c:	2301      	movne	r3, #1
 8000b9e:	2300      	moveq	r3, #0
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	701a      	strb	r2, [r3, #0]
}
 8000ba6:	bf00      	nop
 8000ba8:	3718      	adds	r7, #24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000bb2:	2170      	movs	r1, #112	; 0x70
 8000bb4:	2007      	movs	r0, #7
 8000bb6:	f7ff fc15 	bl	80003e4 <NRF24_write_register>
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000bc6:	2000      	movs	r0, #0
 8000bc8:	f7ff fb7c 	bl	80002c4 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8000bcc:	2350      	movs	r3, #80	; 0x50
 8000bce:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8000bd0:	2373      	movs	r3, #115	; 0x73
 8000bd2:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8000bd4:	1d39      	adds	r1, r7, #4
 8000bd6:	2364      	movs	r3, #100	; 0x64
 8000bd8:	2202      	movs	r2, #2
 8000bda:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <NRF24_ACTIVATE_cmd+0x30>)
 8000bdc:	f002 fea7 	bl	800392e <HAL_SPI_Transmit>
	NRF24_csn(1);
 8000be0:	2001      	movs	r0, #1
 8000be2:	f7ff fb6f 	bl	80002c4 <NRF24_csn>
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000094 	.word	0x20000094

08000bf4 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8000bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bf6:	b0a1      	sub	sp, #132	; 0x84
 8000bf8:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8000bfa:	f107 0308 	add.w	r3, r7, #8
 8000bfe:	49c3      	ldr	r1, [pc, #780]	; (8000f0c <printRadioSettings+0x318>)
 8000c00:	4618      	mov	r0, r3
 8000c02:	f008 f863 	bl	8008ccc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000c06:	f107 0308 	add.w	r3, r7, #8
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff fae0 	bl	80001d0 <strlen>
 8000c10:	4603      	mov	r3, r0
 8000c12:	b29a      	uxth	r2, r3
 8000c14:	f107 0108 	add.w	r1, r7, #8
 8000c18:	230a      	movs	r3, #10
 8000c1a:	48bd      	ldr	r0, [pc, #756]	; (8000f10 <printRadioSettings+0x31c>)
 8000c1c:	f003 ffea 	bl	8004bf4 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8000c20:	2000      	movs	r0, #0
 8000c22:	f7ff fb8f 	bl	8000344 <NRF24_read_register>
 8000c26:	4603      	mov	r3, r0
 8000c28:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8000c2c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c30:	f003 0308 	and.w	r3, r3, #8
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d013      	beq.n	8000c60 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8000c38:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d006      	beq.n	8000c52 <printRadioSettings+0x5e>
 8000c44:	f107 0308 	add.w	r3, r7, #8
 8000c48:	49b2      	ldr	r1, [pc, #712]	; (8000f14 <printRadioSettings+0x320>)
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f008 f83e 	bl	8008ccc <siprintf>
 8000c50:	e00c      	b.n	8000c6c <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 8000c52:	f107 0308 	add.w	r3, r7, #8
 8000c56:	49b0      	ldr	r1, [pc, #704]	; (8000f18 <printRadioSettings+0x324>)
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f008 f837 	bl	8008ccc <siprintf>
 8000c5e:	e005      	b.n	8000c6c <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8000c60:	f107 0308 	add.w	r3, r7, #8
 8000c64:	49ad      	ldr	r1, [pc, #692]	; (8000f1c <printRadioSettings+0x328>)
 8000c66:	4618      	mov	r0, r3
 8000c68:	f008 f830 	bl	8008ccc <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000c6c:	f107 0308 	add.w	r3, r7, #8
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff faad 	bl	80001d0 <strlen>
 8000c76:	4603      	mov	r3, r0
 8000c78:	b29a      	uxth	r2, r3
 8000c7a:	f107 0108 	add.w	r1, r7, #8
 8000c7e:	230a      	movs	r3, #10
 8000c80:	48a3      	ldr	r0, [pc, #652]	; (8000f10 <printRadioSettings+0x31c>)
 8000c82:	f003 ffb7 	bl	8004bf4 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8000c86:	2001      	movs	r0, #1
 8000c88:	f7ff fb5c 	bl	8000344 <NRF24_read_register>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000c92:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c96:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	bfcc      	ite	gt
 8000c9e:	2301      	movgt	r3, #1
 8000ca0:	2300      	movle	r3, #0
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000ca6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000caa:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	bfcc      	ite	gt
 8000cb2:	2301      	movgt	r3, #1
 8000cb4:	2300      	movle	r3, #0
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000cba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000cbe:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	bfcc      	ite	gt
 8000cc6:	2301      	movgt	r3, #1
 8000cc8:	2300      	movle	r3, #0
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000cce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000cd2:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	bfcc      	ite	gt
 8000cda:	2301      	movgt	r3, #1
 8000cdc:	2300      	movle	r3, #0
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000ce2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ce6:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	bfcc      	ite	gt
 8000cee:	2301      	movgt	r3, #1
 8000cf0:	2300      	movle	r3, #0
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000cf6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000cfa:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	bfcc      	ite	gt
 8000d02:	2301      	movgt	r3, #1
 8000d04:	2300      	movle	r3, #0
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	f107 0008 	add.w	r0, r7, #8
 8000d0c:	9303      	str	r3, [sp, #12]
 8000d0e:	9402      	str	r4, [sp, #8]
 8000d10:	9101      	str	r1, [sp, #4]
 8000d12:	9200      	str	r2, [sp, #0]
 8000d14:	4633      	mov	r3, r6
 8000d16:	462a      	mov	r2, r5
 8000d18:	4981      	ldr	r1, [pc, #516]	; (8000f20 <printRadioSettings+0x32c>)
 8000d1a:	f007 ffd7 	bl	8008ccc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000d1e:	f107 0308 	add.w	r3, r7, #8
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fa54 	bl	80001d0 <strlen>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	b29a      	uxth	r2, r3
 8000d2c:	f107 0108 	add.w	r1, r7, #8
 8000d30:	230a      	movs	r3, #10
 8000d32:	4877      	ldr	r0, [pc, #476]	; (8000f10 <printRadioSettings+0x31c>)
 8000d34:	f003 ff5e 	bl	8004bf4 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8000d38:	2002      	movs	r0, #2
 8000d3a:	f7ff fb03 	bl	8000344 <NRF24_read_register>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d44:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d48:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	bfcc      	ite	gt
 8000d50:	2301      	movgt	r3, #1
 8000d52:	2300      	movle	r3, #0
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d58:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d5c:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	bfcc      	ite	gt
 8000d64:	2301      	movgt	r3, #1
 8000d66:	2300      	movle	r3, #0
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d6c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d70:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	bfcc      	ite	gt
 8000d78:	2301      	movgt	r3, #1
 8000d7a:	2300      	movle	r3, #0
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d80:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d84:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	bfcc      	ite	gt
 8000d8c:	2301      	movgt	r3, #1
 8000d8e:	2300      	movle	r3, #0
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d94:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d98:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	bfcc      	ite	gt
 8000da0:	2301      	movgt	r3, #1
 8000da2:	2300      	movle	r3, #0
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000da8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000dac:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	bfcc      	ite	gt
 8000db4:	2301      	movgt	r3, #1
 8000db6:	2300      	movle	r3, #0
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	f107 0008 	add.w	r0, r7, #8
 8000dbe:	9303      	str	r3, [sp, #12]
 8000dc0:	9402      	str	r4, [sp, #8]
 8000dc2:	9101      	str	r1, [sp, #4]
 8000dc4:	9200      	str	r2, [sp, #0]
 8000dc6:	4633      	mov	r3, r6
 8000dc8:	462a      	mov	r2, r5
 8000dca:	4956      	ldr	r1, [pc, #344]	; (8000f24 <printRadioSettings+0x330>)
 8000dcc:	f007 ff7e 	bl	8008ccc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000dd0:	f107 0308 	add.w	r3, r7, #8
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff f9fb 	bl	80001d0 <strlen>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	b29a      	uxth	r2, r3
 8000dde:	f107 0108 	add.w	r1, r7, #8
 8000de2:	230a      	movs	r3, #10
 8000de4:	484a      	ldr	r0, [pc, #296]	; (8000f10 <printRadioSettings+0x31c>)
 8000de6:	f003 ff05 	bl	8004bf4 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8000dea:	2003      	movs	r0, #3
 8000dec:	f7ff faaa 	bl	8000344 <NRF24_read_register>
 8000df0:	4603      	mov	r3, r0
 8000df2:	f003 0303 	and.w	r3, r3, #3
 8000df6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8000dfa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000dfe:	3302      	adds	r3, #2
 8000e00:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8000e04:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000e08:	f107 0308 	add.w	r3, r7, #8
 8000e0c:	4946      	ldr	r1, [pc, #280]	; (8000f28 <printRadioSettings+0x334>)
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f007 ff5c 	bl	8008ccc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000e14:	f107 0308 	add.w	r3, r7, #8
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff f9d9 	bl	80001d0 <strlen>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	b29a      	uxth	r2, r3
 8000e22:	f107 0108 	add.w	r1, r7, #8
 8000e26:	230a      	movs	r3, #10
 8000e28:	4839      	ldr	r0, [pc, #228]	; (8000f10 <printRadioSettings+0x31c>)
 8000e2a:	f003 fee3 	bl	8004bf4 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8000e2e:	2005      	movs	r0, #5
 8000e30:	f7ff fa88 	bl	8000344 <NRF24_read_register>
 8000e34:	4603      	mov	r3, r0
 8000e36:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8000e3a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000e42:	f107 0308 	add.w	r3, r7, #8
 8000e46:	4939      	ldr	r1, [pc, #228]	; (8000f2c <printRadioSettings+0x338>)
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f007 ff3f 	bl	8008ccc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000e4e:	f107 0308 	add.w	r3, r7, #8
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff f9bc 	bl	80001d0 <strlen>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	b29a      	uxth	r2, r3
 8000e5c:	f107 0108 	add.w	r1, r7, #8
 8000e60:	230a      	movs	r3, #10
 8000e62:	482b      	ldr	r0, [pc, #172]	; (8000f10 <printRadioSettings+0x31c>)
 8000e64:	f003 fec6 	bl	8004bf4 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8000e68:	2006      	movs	r0, #6
 8000e6a:	f7ff fa6b 	bl	8000344 <NRF24_read_register>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8000e74:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e78:	f003 0308 	and.w	r3, r3, #8
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d006      	beq.n	8000e8e <printRadioSettings+0x29a>
 8000e80:	f107 0308 	add.w	r3, r7, #8
 8000e84:	492a      	ldr	r1, [pc, #168]	; (8000f30 <printRadioSettings+0x33c>)
 8000e86:	4618      	mov	r0, r3
 8000e88:	f007 ff20 	bl	8008ccc <siprintf>
 8000e8c:	e005      	b.n	8000e9a <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8000e8e:	f107 0308 	add.w	r3, r7, #8
 8000e92:	4928      	ldr	r1, [pc, #160]	; (8000f34 <printRadioSettings+0x340>)
 8000e94:	4618      	mov	r0, r3
 8000e96:	f007 ff19 	bl	8008ccc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000e9a:	f107 0308 	add.w	r3, r7, #8
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff f996 	bl	80001d0 <strlen>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	b29a      	uxth	r2, r3
 8000ea8:	f107 0108 	add.w	r1, r7, #8
 8000eac:	230a      	movs	r3, #10
 8000eae:	4818      	ldr	r0, [pc, #96]	; (8000f10 <printRadioSettings+0x31c>)
 8000eb0:	f003 fea0 	bl	8004bf4 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8000eb4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000eb8:	f003 0306 	and.w	r3, r3, #6
 8000ebc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8000ec0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ec4:	085b      	lsrs	r3, r3, #1
 8000ec6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8000eca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d106      	bne.n	8000ee0 <printRadioSettings+0x2ec>
 8000ed2:	f107 0308 	add.w	r3, r7, #8
 8000ed6:	4918      	ldr	r1, [pc, #96]	; (8000f38 <printRadioSettings+0x344>)
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f007 fef7 	bl	8008ccc <siprintf>
 8000ede:	e03b      	b.n	8000f58 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8000ee0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d106      	bne.n	8000ef6 <printRadioSettings+0x302>
 8000ee8:	f107 0308 	add.w	r3, r7, #8
 8000eec:	4913      	ldr	r1, [pc, #76]	; (8000f3c <printRadioSettings+0x348>)
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f007 feec 	bl	8008ccc <siprintf>
 8000ef4:	e030      	b.n	8000f58 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8000ef6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d122      	bne.n	8000f44 <printRadioSettings+0x350>
 8000efe:	f107 0308 	add.w	r3, r7, #8
 8000f02:	490f      	ldr	r1, [pc, #60]	; (8000f40 <printRadioSettings+0x34c>)
 8000f04:	4618      	mov	r0, r3
 8000f06:	f007 fee1 	bl	8008ccc <siprintf>
 8000f0a:	e025      	b.n	8000f58 <printRadioSettings+0x364>
 8000f0c:	080096d8 	.word	0x080096d8
 8000f10:	200000f8 	.word	0x200000f8
 8000f14:	0800970c 	.word	0x0800970c
 8000f18:	08009728 	.word	0x08009728
 8000f1c:	08009744 	.word	0x08009744
 8000f20:	08009758 	.word	0x08009758
 8000f24:	0800979c 	.word	0x0800979c
 8000f28:	080097e8 	.word	0x080097e8
 8000f2c:	08009804 	.word	0x08009804
 8000f30:	08009818 	.word	0x08009818
 8000f34:	08009830 	.word	0x08009830
 8000f38:	08009848 	.word	0x08009848
 8000f3c:	0800985c 	.word	0x0800985c
 8000f40:	08009870 	.word	0x08009870
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8000f44:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f48:	2b03      	cmp	r3, #3
 8000f4a:	d105      	bne.n	8000f58 <printRadioSettings+0x364>
 8000f4c:	f107 0308 	add.w	r3, r7, #8
 8000f50:	49d7      	ldr	r1, [pc, #860]	; (80012b0 <printRadioSettings+0x6bc>)
 8000f52:	4618      	mov	r0, r3
 8000f54:	f007 feba 	bl	8008ccc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000f58:	f107 0308 	add.w	r3, r7, #8
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff f937 	bl	80001d0 <strlen>
 8000f62:	4603      	mov	r3, r0
 8000f64:	b29a      	uxth	r2, r3
 8000f66:	f107 0108 	add.w	r1, r7, #8
 8000f6a:	230a      	movs	r3, #10
 8000f6c:	48d1      	ldr	r0, [pc, #836]	; (80012b4 <printRadioSettings+0x6c0>)
 8000f6e:	f003 fe41 	bl	8004bf4 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8000f72:	463b      	mov	r3, r7
 8000f74:	2205      	movs	r2, #5
 8000f76:	4619      	mov	r1, r3
 8000f78:	200a      	movs	r0, #10
 8000f7a:	f7ff fa0b 	bl	8000394 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8000f7e:	793b      	ldrb	r3, [r7, #4]
 8000f80:	461c      	mov	r4, r3
 8000f82:	78fb      	ldrb	r3, [r7, #3]
 8000f84:	461d      	mov	r5, r3
 8000f86:	78bb      	ldrb	r3, [r7, #2]
 8000f88:	787a      	ldrb	r2, [r7, #1]
 8000f8a:	7839      	ldrb	r1, [r7, #0]
 8000f8c:	f107 0008 	add.w	r0, r7, #8
 8000f90:	9102      	str	r1, [sp, #8]
 8000f92:	9201      	str	r2, [sp, #4]
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	462b      	mov	r3, r5
 8000f98:	4622      	mov	r2, r4
 8000f9a:	49c7      	ldr	r1, [pc, #796]	; (80012b8 <printRadioSettings+0x6c4>)
 8000f9c:	f007 fe96 	bl	8008ccc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000fa0:	f107 0308 	add.w	r3, r7, #8
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff f913 	bl	80001d0 <strlen>
 8000faa:	4603      	mov	r3, r0
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	f107 0108 	add.w	r1, r7, #8
 8000fb2:	230a      	movs	r3, #10
 8000fb4:	48bf      	ldr	r0, [pc, #764]	; (80012b4 <printRadioSettings+0x6c0>)
 8000fb6:	f003 fe1d 	bl	8004bf4 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8000fba:	463b      	mov	r3, r7
 8000fbc:	2205      	movs	r2, #5
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	200b      	movs	r0, #11
 8000fc2:	f7ff f9e7 	bl	8000394 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8000fc6:	793b      	ldrb	r3, [r7, #4]
 8000fc8:	461c      	mov	r4, r3
 8000fca:	78fb      	ldrb	r3, [r7, #3]
 8000fcc:	461d      	mov	r5, r3
 8000fce:	78bb      	ldrb	r3, [r7, #2]
 8000fd0:	787a      	ldrb	r2, [r7, #1]
 8000fd2:	7839      	ldrb	r1, [r7, #0]
 8000fd4:	f107 0008 	add.w	r0, r7, #8
 8000fd8:	9102      	str	r1, [sp, #8]
 8000fda:	9201      	str	r2, [sp, #4]
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	462b      	mov	r3, r5
 8000fe0:	4622      	mov	r2, r4
 8000fe2:	49b6      	ldr	r1, [pc, #728]	; (80012bc <printRadioSettings+0x6c8>)
 8000fe4:	f007 fe72 	bl	8008ccc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000fe8:	f107 0308 	add.w	r3, r7, #8
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff f8ef 	bl	80001d0 <strlen>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	f107 0108 	add.w	r1, r7, #8
 8000ffa:	230a      	movs	r3, #10
 8000ffc:	48ad      	ldr	r0, [pc, #692]	; (80012b4 <printRadioSettings+0x6c0>)
 8000ffe:	f003 fdf9 	bl	8004bf4 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8001002:	463b      	mov	r3, r7
 8001004:	2201      	movs	r2, #1
 8001006:	4619      	mov	r1, r3
 8001008:	200c      	movs	r0, #12
 800100a:	f7ff f9c3 	bl	8000394 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800100e:	783b      	ldrb	r3, [r7, #0]
 8001010:	461a      	mov	r2, r3
 8001012:	f107 0308 	add.w	r3, r7, #8
 8001016:	49aa      	ldr	r1, [pc, #680]	; (80012c0 <printRadioSettings+0x6cc>)
 8001018:	4618      	mov	r0, r3
 800101a:	f007 fe57 	bl	8008ccc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800101e:	f107 0308 	add.w	r3, r7, #8
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff f8d4 	bl	80001d0 <strlen>
 8001028:	4603      	mov	r3, r0
 800102a:	b29a      	uxth	r2, r3
 800102c:	f107 0108 	add.w	r1, r7, #8
 8001030:	230a      	movs	r3, #10
 8001032:	48a0      	ldr	r0, [pc, #640]	; (80012b4 <printRadioSettings+0x6c0>)
 8001034:	f003 fdde 	bl	8004bf4 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8001038:	463b      	mov	r3, r7
 800103a:	2201      	movs	r2, #1
 800103c:	4619      	mov	r1, r3
 800103e:	200d      	movs	r0, #13
 8001040:	f7ff f9a8 	bl	8000394 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001044:	783b      	ldrb	r3, [r7, #0]
 8001046:	461a      	mov	r2, r3
 8001048:	f107 0308 	add.w	r3, r7, #8
 800104c:	499d      	ldr	r1, [pc, #628]	; (80012c4 <printRadioSettings+0x6d0>)
 800104e:	4618      	mov	r0, r3
 8001050:	f007 fe3c 	bl	8008ccc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001054:	f107 0308 	add.w	r3, r7, #8
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff f8b9 	bl	80001d0 <strlen>
 800105e:	4603      	mov	r3, r0
 8001060:	b29a      	uxth	r2, r3
 8001062:	f107 0108 	add.w	r1, r7, #8
 8001066:	230a      	movs	r3, #10
 8001068:	4892      	ldr	r0, [pc, #584]	; (80012b4 <printRadioSettings+0x6c0>)
 800106a:	f003 fdc3 	bl	8004bf4 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 800106e:	463b      	mov	r3, r7
 8001070:	2201      	movs	r2, #1
 8001072:	4619      	mov	r1, r3
 8001074:	200e      	movs	r0, #14
 8001076:	f7ff f98d 	bl	8000394 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800107a:	783b      	ldrb	r3, [r7, #0]
 800107c:	461a      	mov	r2, r3
 800107e:	f107 0308 	add.w	r3, r7, #8
 8001082:	4991      	ldr	r1, [pc, #580]	; (80012c8 <printRadioSettings+0x6d4>)
 8001084:	4618      	mov	r0, r3
 8001086:	f007 fe21 	bl	8008ccc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800108a:	f107 0308 	add.w	r3, r7, #8
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff f89e 	bl	80001d0 <strlen>
 8001094:	4603      	mov	r3, r0
 8001096:	b29a      	uxth	r2, r3
 8001098:	f107 0108 	add.w	r1, r7, #8
 800109c:	230a      	movs	r3, #10
 800109e:	4885      	ldr	r0, [pc, #532]	; (80012b4 <printRadioSettings+0x6c0>)
 80010a0:	f003 fda8 	bl	8004bf4 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 80010a4:	463b      	mov	r3, r7
 80010a6:	2201      	movs	r2, #1
 80010a8:	4619      	mov	r1, r3
 80010aa:	200f      	movs	r0, #15
 80010ac:	f7ff f972 	bl	8000394 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80010b0:	783b      	ldrb	r3, [r7, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	f107 0308 	add.w	r3, r7, #8
 80010b8:	4984      	ldr	r1, [pc, #528]	; (80012cc <printRadioSettings+0x6d8>)
 80010ba:	4618      	mov	r0, r3
 80010bc:	f007 fe06 	bl	8008ccc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010c0:	f107 0308 	add.w	r3, r7, #8
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff f883 	bl	80001d0 <strlen>
 80010ca:	4603      	mov	r3, r0
 80010cc:	b29a      	uxth	r2, r3
 80010ce:	f107 0108 	add.w	r1, r7, #8
 80010d2:	230a      	movs	r3, #10
 80010d4:	4877      	ldr	r0, [pc, #476]	; (80012b4 <printRadioSettings+0x6c0>)
 80010d6:	f003 fd8d 	bl	8004bf4 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 80010da:	463b      	mov	r3, r7
 80010dc:	2205      	movs	r2, #5
 80010de:	4619      	mov	r1, r3
 80010e0:	2010      	movs	r0, #16
 80010e2:	f7ff f957 	bl	8000394 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80010e6:	793b      	ldrb	r3, [r7, #4]
 80010e8:	461c      	mov	r4, r3
 80010ea:	78fb      	ldrb	r3, [r7, #3]
 80010ec:	461d      	mov	r5, r3
 80010ee:	78bb      	ldrb	r3, [r7, #2]
 80010f0:	787a      	ldrb	r2, [r7, #1]
 80010f2:	7839      	ldrb	r1, [r7, #0]
 80010f4:	f107 0008 	add.w	r0, r7, #8
 80010f8:	9102      	str	r1, [sp, #8]
 80010fa:	9201      	str	r2, [sp, #4]
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	462b      	mov	r3, r5
 8001100:	4622      	mov	r2, r4
 8001102:	4973      	ldr	r1, [pc, #460]	; (80012d0 <printRadioSettings+0x6dc>)
 8001104:	f007 fde2 	bl	8008ccc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001108:	f107 0308 	add.w	r3, r7, #8
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff f85f 	bl	80001d0 <strlen>
 8001112:	4603      	mov	r3, r0
 8001114:	b29a      	uxth	r2, r3
 8001116:	f107 0108 	add.w	r1, r7, #8
 800111a:	230a      	movs	r3, #10
 800111c:	4865      	ldr	r0, [pc, #404]	; (80012b4 <printRadioSettings+0x6c0>)
 800111e:	f003 fd69 	bl	8004bf4 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8001122:	2011      	movs	r0, #17
 8001124:	f7ff f90e 	bl	8000344 <NRF24_read_register>
 8001128:	4603      	mov	r3, r0
 800112a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800112e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001132:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001136:	f107 0308 	add.w	r3, r7, #8
 800113a:	4966      	ldr	r1, [pc, #408]	; (80012d4 <printRadioSettings+0x6e0>)
 800113c:	4618      	mov	r0, r3
 800113e:	f007 fdc5 	bl	8008ccc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001142:	f107 0308 	add.w	r3, r7, #8
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff f842 	bl	80001d0 <strlen>
 800114c:	4603      	mov	r3, r0
 800114e:	b29a      	uxth	r2, r3
 8001150:	f107 0108 	add.w	r1, r7, #8
 8001154:	230a      	movs	r3, #10
 8001156:	4857      	ldr	r0, [pc, #348]	; (80012b4 <printRadioSettings+0x6c0>)
 8001158:	f003 fd4c 	bl	8004bf4 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 800115c:	2012      	movs	r0, #18
 800115e:	f7ff f8f1 	bl	8000344 <NRF24_read_register>
 8001162:	4603      	mov	r3, r0
 8001164:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001168:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800116c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001170:	f107 0308 	add.w	r3, r7, #8
 8001174:	4958      	ldr	r1, [pc, #352]	; (80012d8 <printRadioSettings+0x6e4>)
 8001176:	4618      	mov	r0, r3
 8001178:	f007 fda8 	bl	8008ccc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800117c:	f107 0308 	add.w	r3, r7, #8
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff f825 	bl	80001d0 <strlen>
 8001186:	4603      	mov	r3, r0
 8001188:	b29a      	uxth	r2, r3
 800118a:	f107 0108 	add.w	r1, r7, #8
 800118e:	230a      	movs	r3, #10
 8001190:	4848      	ldr	r0, [pc, #288]	; (80012b4 <printRadioSettings+0x6c0>)
 8001192:	f003 fd2f 	bl	8004bf4 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 8001196:	2013      	movs	r0, #19
 8001198:	f7ff f8d4 	bl	8000344 <NRF24_read_register>
 800119c:	4603      	mov	r3, r0
 800119e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80011a2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80011aa:	f107 0308 	add.w	r3, r7, #8
 80011ae:	494b      	ldr	r1, [pc, #300]	; (80012dc <printRadioSettings+0x6e8>)
 80011b0:	4618      	mov	r0, r3
 80011b2:	f007 fd8b 	bl	8008ccc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011b6:	f107 0308 	add.w	r3, r7, #8
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff f808 	bl	80001d0 <strlen>
 80011c0:	4603      	mov	r3, r0
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	f107 0108 	add.w	r1, r7, #8
 80011c8:	230a      	movs	r3, #10
 80011ca:	483a      	ldr	r0, [pc, #232]	; (80012b4 <printRadioSettings+0x6c0>)
 80011cc:	f003 fd12 	bl	8004bf4 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 80011d0:	2014      	movs	r0, #20
 80011d2:	f7ff f8b7 	bl	8000344 <NRF24_read_register>
 80011d6:	4603      	mov	r3, r0
 80011d8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80011dc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011e0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80011e4:	f107 0308 	add.w	r3, r7, #8
 80011e8:	493d      	ldr	r1, [pc, #244]	; (80012e0 <printRadioSettings+0x6ec>)
 80011ea:	4618      	mov	r0, r3
 80011ec:	f007 fd6e 	bl	8008ccc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011f0:	f107 0308 	add.w	r3, r7, #8
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7fe ffeb 	bl	80001d0 <strlen>
 80011fa:	4603      	mov	r3, r0
 80011fc:	b29a      	uxth	r2, r3
 80011fe:	f107 0108 	add.w	r1, r7, #8
 8001202:	230a      	movs	r3, #10
 8001204:	482b      	ldr	r0, [pc, #172]	; (80012b4 <printRadioSettings+0x6c0>)
 8001206:	f003 fcf5 	bl	8004bf4 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 800120a:	2015      	movs	r0, #21
 800120c:	f7ff f89a 	bl	8000344 <NRF24_read_register>
 8001210:	4603      	mov	r3, r0
 8001212:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001216:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800121a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800121e:	f107 0308 	add.w	r3, r7, #8
 8001222:	4930      	ldr	r1, [pc, #192]	; (80012e4 <printRadioSettings+0x6f0>)
 8001224:	4618      	mov	r0, r3
 8001226:	f007 fd51 	bl	8008ccc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800122a:	f107 0308 	add.w	r3, r7, #8
 800122e:	4618      	mov	r0, r3
 8001230:	f7fe ffce 	bl	80001d0 <strlen>
 8001234:	4603      	mov	r3, r0
 8001236:	b29a      	uxth	r2, r3
 8001238:	f107 0108 	add.w	r1, r7, #8
 800123c:	230a      	movs	r3, #10
 800123e:	481d      	ldr	r0, [pc, #116]	; (80012b4 <printRadioSettings+0x6c0>)
 8001240:	f003 fcd8 	bl	8004bf4 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 8001244:	2016      	movs	r0, #22
 8001246:	f7ff f87d 	bl	8000344 <NRF24_read_register>
 800124a:	4603      	mov	r3, r0
 800124c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001250:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001254:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001258:	f107 0308 	add.w	r3, r7, #8
 800125c:	4922      	ldr	r1, [pc, #136]	; (80012e8 <printRadioSettings+0x6f4>)
 800125e:	4618      	mov	r0, r3
 8001260:	f007 fd34 	bl	8008ccc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001264:	f107 0308 	add.w	r3, r7, #8
 8001268:	4618      	mov	r0, r3
 800126a:	f7fe ffb1 	bl	80001d0 <strlen>
 800126e:	4603      	mov	r3, r0
 8001270:	b29a      	uxth	r2, r3
 8001272:	f107 0108 	add.w	r1, r7, #8
 8001276:	230a      	movs	r3, #10
 8001278:	480e      	ldr	r0, [pc, #56]	; (80012b4 <printRadioSettings+0x6c0>)
 800127a:	f003 fcbb 	bl	8004bf4 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 800127e:	201c      	movs	r0, #28
 8001280:	f7ff f860 	bl	8000344 <NRF24_read_register>
 8001284:	4603      	mov	r3, r0
 8001286:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800128a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800128e:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001292:	2b00      	cmp	r3, #0
 8001294:	bfcc      	ite	gt
 8001296:	2301      	movgt	r3, #1
 8001298:	2300      	movle	r3, #0
 800129a:	b2db      	uxtb	r3, r3
 800129c:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800129e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012a2:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	bfcc      	ite	gt
 80012aa:	2301      	movgt	r3, #1
 80012ac:	2300      	movle	r3, #0
 80012ae:	e01d      	b.n	80012ec <printRadioSettings+0x6f8>
 80012b0:	08009884 	.word	0x08009884
 80012b4:	200000f8 	.word	0x200000f8
 80012b8:	08009898 	.word	0x08009898
 80012bc:	080098c8 	.word	0x080098c8
 80012c0:	080098f8 	.word	0x080098f8
 80012c4:	08009920 	.word	0x08009920
 80012c8:	08009948 	.word	0x08009948
 80012cc:	08009970 	.word	0x08009970
 80012d0:	08009998 	.word	0x08009998
 80012d4:	080099c4 	.word	0x080099c4
 80012d8:	080099e0 	.word	0x080099e0
 80012dc:	080099fc 	.word	0x080099fc
 80012e0:	08009a18 	.word	0x08009a18
 80012e4:	08009a34 	.word	0x08009a34
 80012e8:	08009a50 	.word	0x08009a50
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80012f0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012f4:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	bfcc      	ite	gt
 80012fc:	2301      	movgt	r3, #1
 80012fe:	2300      	movle	r3, #0
 8001300:	b2db      	uxtb	r3, r3
 8001302:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001304:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001308:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800130c:	2b00      	cmp	r3, #0
 800130e:	bfcc      	ite	gt
 8001310:	2301      	movgt	r3, #1
 8001312:	2300      	movle	r3, #0
 8001314:	b2db      	uxtb	r3, r3
 8001316:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001318:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800131c:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001320:	2b00      	cmp	r3, #0
 8001322:	bfcc      	ite	gt
 8001324:	2301      	movgt	r3, #1
 8001326:	2300      	movle	r3, #0
 8001328:	b2db      	uxtb	r3, r3
 800132a:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800132c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001330:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001334:	2b00      	cmp	r3, #0
 8001336:	bfcc      	ite	gt
 8001338:	2301      	movgt	r3, #1
 800133a:	2300      	movle	r3, #0
 800133c:	b2db      	uxtb	r3, r3
 800133e:	f107 0008 	add.w	r0, r7, #8
 8001342:	9303      	str	r3, [sp, #12]
 8001344:	9402      	str	r4, [sp, #8]
 8001346:	9101      	str	r1, [sp, #4]
 8001348:	9200      	str	r2, [sp, #0]
 800134a:	4633      	mov	r3, r6
 800134c:	462a      	mov	r2, r5
 800134e:	4936      	ldr	r1, [pc, #216]	; (8001428 <printRadioSettings+0x834>)
 8001350:	f007 fcbc 	bl	8008ccc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001354:	f107 0308 	add.w	r3, r7, #8
 8001358:	4618      	mov	r0, r3
 800135a:	f7fe ff39 	bl	80001d0 <strlen>
 800135e:	4603      	mov	r3, r0
 8001360:	b29a      	uxth	r2, r3
 8001362:	f107 0108 	add.w	r1, r7, #8
 8001366:	230a      	movs	r3, #10
 8001368:	4830      	ldr	r0, [pc, #192]	; (800142c <printRadioSettings+0x838>)
 800136a:	f003 fc43 	bl	8004bf4 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 800136e:	201d      	movs	r0, #29
 8001370:	f7fe ffe8 	bl	8000344 <NRF24_read_register>
 8001374:	4603      	mov	r3, r0
 8001376:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 800137a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800137e:	f003 0304 	and.w	r3, r3, #4
 8001382:	2b00      	cmp	r3, #0
 8001384:	d006      	beq.n	8001394 <printRadioSettings+0x7a0>
 8001386:	f107 0308 	add.w	r3, r7, #8
 800138a:	4929      	ldr	r1, [pc, #164]	; (8001430 <printRadioSettings+0x83c>)
 800138c:	4618      	mov	r0, r3
 800138e:	f007 fc9d 	bl	8008ccc <siprintf>
 8001392:	e005      	b.n	80013a0 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001394:	f107 0308 	add.w	r3, r7, #8
 8001398:	4926      	ldr	r1, [pc, #152]	; (8001434 <printRadioSettings+0x840>)
 800139a:	4618      	mov	r0, r3
 800139c:	f007 fc96 	bl	8008ccc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013a0:	f107 0308 	add.w	r3, r7, #8
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7fe ff13 	bl	80001d0 <strlen>
 80013aa:	4603      	mov	r3, r0
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	f107 0108 	add.w	r1, r7, #8
 80013b2:	230a      	movs	r3, #10
 80013b4:	481d      	ldr	r0, [pc, #116]	; (800142c <printRadioSettings+0x838>)
 80013b6:	f003 fc1d 	bl	8004bf4 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 80013ba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d006      	beq.n	80013d4 <printRadioSettings+0x7e0>
 80013c6:	f107 0308 	add.w	r3, r7, #8
 80013ca:	491b      	ldr	r1, [pc, #108]	; (8001438 <printRadioSettings+0x844>)
 80013cc:	4618      	mov	r0, r3
 80013ce:	f007 fc7d 	bl	8008ccc <siprintf>
 80013d2:	e005      	b.n	80013e0 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 80013d4:	f107 0308 	add.w	r3, r7, #8
 80013d8:	4918      	ldr	r1, [pc, #96]	; (800143c <printRadioSettings+0x848>)
 80013da:	4618      	mov	r0, r3
 80013dc:	f007 fc76 	bl	8008ccc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013e0:	f107 0308 	add.w	r3, r7, #8
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7fe fef3 	bl	80001d0 <strlen>
 80013ea:	4603      	mov	r3, r0
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	f107 0108 	add.w	r1, r7, #8
 80013f2:	230a      	movs	r3, #10
 80013f4:	480d      	ldr	r0, [pc, #52]	; (800142c <printRadioSettings+0x838>)
 80013f6:	f003 fbfd 	bl	8004bf4 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80013fa:	f107 0308 	add.w	r3, r7, #8
 80013fe:	4910      	ldr	r1, [pc, #64]	; (8001440 <printRadioSettings+0x84c>)
 8001400:	4618      	mov	r0, r3
 8001402:	f007 fc63 	bl	8008ccc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001406:	f107 0308 	add.w	r3, r7, #8
 800140a:	4618      	mov	r0, r3
 800140c:	f7fe fee0 	bl	80001d0 <strlen>
 8001410:	4603      	mov	r3, r0
 8001412:	b29a      	uxth	r2, r3
 8001414:	f107 0108 	add.w	r1, r7, #8
 8001418:	230a      	movs	r3, #10
 800141a:	4804      	ldr	r0, [pc, #16]	; (800142c <printRadioSettings+0x838>)
 800141c:	f003 fbea 	bl	8004bf4 <HAL_UART_Transmit>
}
 8001420:	bf00      	nop
 8001422:	3774      	adds	r7, #116	; 0x74
 8001424:	46bd      	mov	sp, r7
 8001426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001428:	08009a6c 	.word	0x08009a6c
 800142c:	200000f8 	.word	0x200000f8
 8001430:	08009ab8 	.word	0x08009ab8
 8001434:	08009ad0 	.word	0x08009ad0
 8001438:	08009ae8 	.word	0x08009ae8
 800143c:	08009b04 	.word	0x08009b04
 8001440:	080096d8 	.word	0x080096d8

08001444 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8001444:	b084      	sub	sp, #16
 8001446:	b580      	push	{r7, lr}
 8001448:	af00      	add	r7, sp, #0
 800144a:	f107 0c08 	add.w	ip, r7, #8
 800144e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8001452:	4b07      	ldr	r3, [pc, #28]	; (8001470 <nrf24_DebugUART_Init+0x2c>)
 8001454:	4618      	mov	r0, r3
 8001456:	f107 0308 	add.w	r3, r7, #8
 800145a:	2288      	movs	r2, #136	; 0x88
 800145c:	4619      	mov	r1, r3
 800145e:	f007 fcdf 	bl	8008e20 <memcpy>
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800146a:	b004      	add	sp, #16
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	200000f8 	.word	0x200000f8

08001474 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001474:	b590      	push	{r4, r7, lr}
 8001476:	b09f      	sub	sp, #124	; 0x7c
 8001478:	af1e      	add	r7, sp, #120	; 0x78
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800147a:	f000 fbc9 	bl	8001c10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800147e:	f000 f861 	bl	8001544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001482:	f000 f909 	bl	8001698 <MX_GPIO_Init>
  MX_SPI2_Init();
 8001486:	f000 f899 	bl	80015bc <MX_SPI2_Init>
  MX_USART2_UART_Init();
 800148a:	f000 f8d5 	bl	8001638 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //**** GPIO(PORT), GPIO_PIN_(CSN), GPIO_PIN_(CE), SPI_HANDLE ****//
  NRF24_begin(GPIOB, GPIO_PIN_8, GPIO_PIN_9, hspi2); //CSN and CE share port
 800148e:	4c23      	ldr	r4, [pc, #140]	; (800151c <main+0xa8>)
 8001490:	4668      	mov	r0, sp
 8001492:	1d23      	adds	r3, r4, #4
 8001494:	2260      	movs	r2, #96	; 0x60
 8001496:	4619      	mov	r1, r3
 8001498:	f007 fcc2 	bl	8008e20 <memcpy>
 800149c:	6823      	ldr	r3, [r4, #0]
 800149e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014a6:	481e      	ldr	r0, [pc, #120]	; (8001520 <main+0xac>)
 80014a8:	f7ff f826 	bl	80004f8 <NRF24_begin>
  nrf24_DebugUART_Init(huart2); //USART port for debugging
 80014ac:	4c1d      	ldr	r4, [pc, #116]	; (8001524 <main+0xb0>)
 80014ae:	4668      	mov	r0, sp
 80014b0:	f104 0310 	add.w	r3, r4, #16
 80014b4:	2278      	movs	r2, #120	; 0x78
 80014b6:	4619      	mov	r1, r3
 80014b8:	f007 fcb2 	bl	8008e20 <memcpy>
 80014bc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80014c0:	f7ff ffc0 	bl	8001444 <nrf24_DebugUART_Init>
  NRF24_stopListening(); //Transmitter config
 80014c4:	f7ff f8f8 	bl	80006b8 <NRF24_stopListening>
  NRF24_openWritingPipe(txPipeAddrs);
 80014c8:	4b17      	ldr	r3, [pc, #92]	; (8001528 <main+0xb4>)
 80014ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ce:	4610      	mov	r0, r2
 80014d0:	4619      	mov	r1, r3
 80014d2:	f7ff f951 	bl	8000778 <NRF24_openWritingPipe>
  //**** DISABLE TRANSMIT - ACK ****//
  NRF24_setAutoAck(false);
 80014d6:	2000      	movs	r0, #0
 80014d8:	f7ff fa0c 	bl	80008f4 <NRF24_setAutoAck>
  NRF24_setChannel(52);
 80014dc:	2034      	movs	r0, #52	; 0x34
 80014de:	f7ff f98a 	bl	80007f6 <NRF24_setChannel>
  NRF24_setPayloadSize(6);
 80014e2:	2006      	movs	r0, #6
 80014e4:	f7ff f99c 	bl	8000820 <NRF24_setPayloadSize>
  NRF24_enableDynamicPayloads();
 80014e8:	f7ff f9ba 	bl	8000860 <NRF24_enableDynamicPayloads>
  //NRF24_enableAckPayload();
  printRadioSettings(); //NRF24L01+ register dump
 80014ec:	f7ff fb82 	bl	8000bf4 <printRadioSettings>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80014f0:	f004 fe7c 	bl	80061ec <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of sendData */
  sendDataHandle = osThreadNew(StartSendData, NULL, &sendData_attributes);
 80014f4:	4a0d      	ldr	r2, [pc, #52]	; (800152c <main+0xb8>)
 80014f6:	2100      	movs	r1, #0
 80014f8:	480d      	ldr	r0, [pc, #52]	; (8001530 <main+0xbc>)
 80014fa:	f004 fedf 	bl	80062bc <osThreadNew>
 80014fe:	4603      	mov	r3, r0
 8001500:	4a0c      	ldr	r2, [pc, #48]	; (8001534 <main+0xc0>)
 8001502:	6013      	str	r3, [r2, #0]

  /* creation of rcvData */
  rcvDataHandle = osThreadNew(StartRcvData, NULL, &rcvData_attributes);
 8001504:	4a0c      	ldr	r2, [pc, #48]	; (8001538 <main+0xc4>)
 8001506:	2100      	movs	r1, #0
 8001508:	480c      	ldr	r0, [pc, #48]	; (800153c <main+0xc8>)
 800150a:	f004 fed7 	bl	80062bc <osThreadNew>
 800150e:	4603      	mov	r3, r0
 8001510:	4a0b      	ldr	r2, [pc, #44]	; (8001540 <main+0xcc>)
 8001512:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001514:	f004 fe9e 	bl	8006254 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001518:	e7fe      	b.n	8001518 <main+0xa4>
 800151a:	bf00      	nop
 800151c:	20000180 	.word	0x20000180
 8001520:	48000400 	.word	0x48000400
 8001524:	200001e4 	.word	0x200001e4
 8001528:	20000000 	.word	0x20000000
 800152c:	08009c6c 	.word	0x08009c6c
 8001530:	08001775 	.word	0x08001775
 8001534:	2000026c 	.word	0x2000026c
 8001538:	08009c90 	.word	0x08009c90
 800153c:	080017f1 	.word	0x080017f1
 8001540:	20000270 	.word	0x20000270

08001544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b090      	sub	sp, #64	; 0x40
 8001548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800154a:	f107 0318 	add.w	r3, r7, #24
 800154e:	2228      	movs	r2, #40	; 0x28
 8001550:	2100      	movs	r1, #0
 8001552:	4618      	mov	r0, r3
 8001554:	f007 fbda 	bl	8008d0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	60da      	str	r2, [r3, #12]
 8001564:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001566:	2302      	movs	r3, #2
 8001568:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800156a:	2301      	movs	r3, #1
 800156c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800156e:	2310      	movs	r3, #16
 8001570:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001572:	2300      	movs	r3, #0
 8001574:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001576:	f107 0318 	add.w	r3, r7, #24
 800157a:	4618      	mov	r0, r3
 800157c:	f000 fe86 	bl	800228c <HAL_RCC_OscConfig>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001586:	f000 f971 	bl	800186c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800158a:	230f      	movs	r3, #15
 800158c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800158e:	2300      	movs	r3, #0
 8001590:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001596:	2300      	movs	r3, #0
 8001598:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800159a:	2300      	movs	r3, #0
 800159c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800159e:	1d3b      	adds	r3, r7, #4
 80015a0:	2100      	movs	r1, #0
 80015a2:	4618      	mov	r0, r3
 80015a4:	f001 feb0 	bl	8003308 <HAL_RCC_ClockConfig>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80015ae:	f000 f95d 	bl	800186c <Error_Handler>
  }
}
 80015b2:	bf00      	nop
 80015b4:	3740      	adds	r7, #64	; 0x40
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
	...

080015bc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80015c0:	4b1b      	ldr	r3, [pc, #108]	; (8001630 <MX_SPI2_Init+0x74>)
 80015c2:	4a1c      	ldr	r2, [pc, #112]	; (8001634 <MX_SPI2_Init+0x78>)
 80015c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80015c6:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <MX_SPI2_Init+0x74>)
 80015c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015cc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80015ce:	4b18      	ldr	r3, [pc, #96]	; (8001630 <MX_SPI2_Init+0x74>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80015d4:	4b16      	ldr	r3, [pc, #88]	; (8001630 <MX_SPI2_Init+0x74>)
 80015d6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80015da:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015dc:	4b14      	ldr	r3, [pc, #80]	; (8001630 <MX_SPI2_Init+0x74>)
 80015de:	2200      	movs	r2, #0
 80015e0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015e2:	4b13      	ldr	r3, [pc, #76]	; (8001630 <MX_SPI2_Init+0x74>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80015e8:	4b11      	ldr	r3, [pc, #68]	; (8001630 <MX_SPI2_Init+0x74>)
 80015ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ee:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015f0:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <MX_SPI2_Init+0x74>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015f6:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <MX_SPI2_Init+0x74>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015fc:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <MX_SPI2_Init+0x74>)
 80015fe:	2200      	movs	r2, #0
 8001600:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001602:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <MX_SPI2_Init+0x74>)
 8001604:	2200      	movs	r2, #0
 8001606:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001608:	4b09      	ldr	r3, [pc, #36]	; (8001630 <MX_SPI2_Init+0x74>)
 800160a:	2207      	movs	r2, #7
 800160c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800160e:	4b08      	ldr	r3, [pc, #32]	; (8001630 <MX_SPI2_Init+0x74>)
 8001610:	2200      	movs	r2, #0
 8001612:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <MX_SPI2_Init+0x74>)
 8001616:	2208      	movs	r2, #8
 8001618:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800161a:	4805      	ldr	r0, [pc, #20]	; (8001630 <MX_SPI2_Init+0x74>)
 800161c:	f002 f8dc 	bl	80037d8 <HAL_SPI_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001626:	f000 f921 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000180 	.word	0x20000180
 8001634:	40003800 	.word	0x40003800

08001638 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800163c:	4b14      	ldr	r3, [pc, #80]	; (8001690 <MX_USART2_UART_Init+0x58>)
 800163e:	4a15      	ldr	r2, [pc, #84]	; (8001694 <MX_USART2_UART_Init+0x5c>)
 8001640:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001642:	4b13      	ldr	r3, [pc, #76]	; (8001690 <MX_USART2_UART_Init+0x58>)
 8001644:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001648:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800164a:	4b11      	ldr	r3, [pc, #68]	; (8001690 <MX_USART2_UART_Init+0x58>)
 800164c:	2200      	movs	r2, #0
 800164e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001650:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <MX_USART2_UART_Init+0x58>)
 8001652:	2200      	movs	r2, #0
 8001654:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001656:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <MX_USART2_UART_Init+0x58>)
 8001658:	2200      	movs	r2, #0
 800165a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <MX_USART2_UART_Init+0x58>)
 800165e:	220c      	movs	r2, #12
 8001660:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001662:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <MX_USART2_UART_Init+0x58>)
 8001664:	2200      	movs	r2, #0
 8001666:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001668:	4b09      	ldr	r3, [pc, #36]	; (8001690 <MX_USART2_UART_Init+0x58>)
 800166a:	2200      	movs	r2, #0
 800166c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800166e:	4b08      	ldr	r3, [pc, #32]	; (8001690 <MX_USART2_UART_Init+0x58>)
 8001670:	2200      	movs	r2, #0
 8001672:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <MX_USART2_UART_Init+0x58>)
 8001676:	2200      	movs	r2, #0
 8001678:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800167a:	4805      	ldr	r0, [pc, #20]	; (8001690 <MX_USART2_UART_Init+0x58>)
 800167c:	f003 fa6c 	bl	8004b58 <HAL_UART_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001686:	f000 f8f1 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	200001e4 	.word	0x200001e4
 8001694:	40004400 	.word	0x40004400

08001698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	; 0x28
 800169c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169e:	f107 0314 	add.w	r3, r7, #20
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
 80016ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016ae:	4b2e      	ldr	r3, [pc, #184]	; (8001768 <MX_GPIO_Init+0xd0>)
 80016b0:	695b      	ldr	r3, [r3, #20]
 80016b2:	4a2d      	ldr	r2, [pc, #180]	; (8001768 <MX_GPIO_Init+0xd0>)
 80016b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016b8:	6153      	str	r3, [r2, #20]
 80016ba:	4b2b      	ldr	r3, [pc, #172]	; (8001768 <MX_GPIO_Init+0xd0>)
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c6:	4b28      	ldr	r3, [pc, #160]	; (8001768 <MX_GPIO_Init+0xd0>)
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	4a27      	ldr	r2, [pc, #156]	; (8001768 <MX_GPIO_Init+0xd0>)
 80016cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80016d0:	6153      	str	r3, [r2, #20]
 80016d2:	4b25      	ldr	r3, [pc, #148]	; (8001768 <MX_GPIO_Init+0xd0>)
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016de:	4b22      	ldr	r3, [pc, #136]	; (8001768 <MX_GPIO_Init+0xd0>)
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	4a21      	ldr	r2, [pc, #132]	; (8001768 <MX_GPIO_Init+0xd0>)
 80016e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e8:	6153      	str	r3, [r2, #20]
 80016ea:	4b1f      	ldr	r3, [pc, #124]	; (8001768 <MX_GPIO_Init+0xd0>)
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f6:	4b1c      	ldr	r3, [pc, #112]	; (8001768 <MX_GPIO_Init+0xd0>)
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	4a1b      	ldr	r2, [pc, #108]	; (8001768 <MX_GPIO_Init+0xd0>)
 80016fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001700:	6153      	str	r3, [r2, #20]
 8001702:	4b19      	ldr	r3, [pc, #100]	; (8001768 <MX_GPIO_Init+0xd0>)
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_LED_GPIO_Port, EXT_LED_Pin, GPIO_PIN_RESET);
 800170e:	2200      	movs	r2, #0
 8001710:	2101      	movs	r1, #1
 8001712:	4816      	ldr	r0, [pc, #88]	; (800176c <MX_GPIO_Init+0xd4>)
 8001714:	f000 fda2 	bl	800225c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CSN_Pin|CE_Pin, GPIO_PIN_RESET);
 8001718:	2200      	movs	r2, #0
 800171a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800171e:	4814      	ldr	r0, [pc, #80]	; (8001770 <MX_GPIO_Init+0xd8>)
 8001720:	f000 fd9c 	bl	800225c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EXT_LED_Pin */
  GPIO_InitStruct.Pin = EXT_LED_Pin;
 8001724:	2301      	movs	r3, #1
 8001726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001728:	2301      	movs	r3, #1
 800172a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001730:	2300      	movs	r3, #0
 8001732:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EXT_LED_GPIO_Port, &GPIO_InitStruct);
 8001734:	f107 0314 	add.w	r3, r7, #20
 8001738:	4619      	mov	r1, r3
 800173a:	480c      	ldr	r0, [pc, #48]	; (800176c <MX_GPIO_Init+0xd4>)
 800173c:	f000 fc1c 	bl	8001f78 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSN_Pin CE_Pin */
  GPIO_InitStruct.Pin = CSN_Pin|CE_Pin;
 8001740:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001746:	2301      	movs	r3, #1
 8001748:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174e:	2300      	movs	r3, #0
 8001750:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001752:	f107 0314 	add.w	r3, r7, #20
 8001756:	4619      	mov	r1, r3
 8001758:	4805      	ldr	r0, [pc, #20]	; (8001770 <MX_GPIO_Init+0xd8>)
 800175a:	f000 fc0d 	bl	8001f78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800175e:	bf00      	nop
 8001760:	3728      	adds	r7, #40	; 0x28
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40021000 	.word	0x40021000
 800176c:	48000800 	.word	0x48000800
 8001770:	48000400 	.word	0x48000400

08001774 <StartSendData>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSendData */
void StartSendData(void *argument)
{
 8001774:	b5b0      	push	{r4, r5, r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af04      	add	r7, sp, #16
 800177a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	    if(NRF24_write(payload, 6))
 800177c:	2106      	movs	r1, #6
 800177e:	4818      	ldr	r0, [pc, #96]	; (80017e0 <StartSendData+0x6c>)
 8001780:	f7fe ffa6 	bl	80006d0 <NRF24_write>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d024      	beq.n	80017d4 <StartSendData+0x60>
		{
			//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
			//NRF24_read(ackPayload, 32);
			sprintf(formattedPayload, "%02X %02X %02X %02X %02X %02X \r\n", payload[0], payload[1], payload[2], payload[3], payload[4], payload[5]);
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <StartSendData+0x6c>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	461c      	mov	r4, r3
 8001790:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <StartSendData+0x6c>)
 8001792:	785b      	ldrb	r3, [r3, #1]
 8001794:	461d      	mov	r5, r3
 8001796:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <StartSendData+0x6c>)
 8001798:	789b      	ldrb	r3, [r3, #2]
 800179a:	461a      	mov	r2, r3
 800179c:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <StartSendData+0x6c>)
 800179e:	78db      	ldrb	r3, [r3, #3]
 80017a0:	4619      	mov	r1, r3
 80017a2:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <StartSendData+0x6c>)
 80017a4:	791b      	ldrb	r3, [r3, #4]
 80017a6:	4618      	mov	r0, r3
 80017a8:	4b0d      	ldr	r3, [pc, #52]	; (80017e0 <StartSendData+0x6c>)
 80017aa:	795b      	ldrb	r3, [r3, #5]
 80017ac:	9303      	str	r3, [sp, #12]
 80017ae:	9002      	str	r0, [sp, #8]
 80017b0:	9101      	str	r1, [sp, #4]
 80017b2:	9200      	str	r2, [sp, #0]
 80017b4:	462b      	mov	r3, r5
 80017b6:	4622      	mov	r2, r4
 80017b8:	490a      	ldr	r1, [pc, #40]	; (80017e4 <StartSendData+0x70>)
 80017ba:	480b      	ldr	r0, [pc, #44]	; (80017e8 <StartSendData+0x74>)
 80017bc:	f007 fa86 	bl	8008ccc <siprintf>
			HAL_UART_Transmit_IT(&huart2, (uint8_t *)formattedPayload, strlen(formattedPayload));
 80017c0:	4809      	ldr	r0, [pc, #36]	; (80017e8 <StartSendData+0x74>)
 80017c2:	f7fe fd05 	bl	80001d0 <strlen>
 80017c6:	4603      	mov	r3, r0
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	461a      	mov	r2, r3
 80017cc:	4906      	ldr	r1, [pc, #24]	; (80017e8 <StartSendData+0x74>)
 80017ce:	4807      	ldr	r0, [pc, #28]	; (80017ec <StartSendData+0x78>)
 80017d0:	f003 fa9a 	bl	8004d08 <HAL_UART_Transmit_IT>
			//HAL_UART_Transmit_IT(&huart2, (uint8_t *)"Transmit Successful\r\n", strlen("Transmit Successful\r\n"));
			//char myDataAck[80];
			//sprintf(myDataAck, "ackPayload:  %s \r\n", ackPayload);
			//HAL_UART_Transmit(&huart2, (uint8_t *)myDataAck, strlen(myDataAck), 10);
		}
	    osDelay(1000);
 80017d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017d8:	f004 fe1a 	bl	8006410 <osDelay>
	    if(NRF24_write(payload, 6))
 80017dc:	e7ce      	b.n	800177c <StartSendData+0x8>
 80017de:	bf00      	nop
 80017e0:	2000027c 	.word	0x2000027c
 80017e4:	08009c30 	.word	0x08009c30
 80017e8:	20000284 	.word	0x20000284
 80017ec:	200001e4 	.word	0x200001e4

080017f0 <StartRcvData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRcvData */
void StartRcvData(void *argument)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRcvData */
  /* Infinite loop */
  for(;;)
  {
	    HAL_UART_Receive_IT(&huart2, buffer, 8);
 80017f8:	2208      	movs	r2, #8
 80017fa:	4910      	ldr	r1, [pc, #64]	; (800183c <StartRcvData+0x4c>)
 80017fc:	4810      	ldr	r0, [pc, #64]	; (8001840 <StartRcvData+0x50>)
 80017fe:	f003 fae1 	bl	8004dc4 <HAL_UART_Receive_IT>
		//sprintf(formattedPayload, "%02X %02X %02X %02X %02X %02X %02X %02X \r\n", buffer[0], buffer[1], buffer[2], buffer[3], buffer[4], buffer[5], buffer[6], buffer[7]);
		//HAL_UART_Transmit(&huart2, (uint8_t *)formattedPayload, strlen(formattedPayload), 10);
		//HAL_Delay(500);
		for (int i = 0; i < 6; i++) {
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	e010      	b.n	800182a <StartRcvData+0x3a>
				payload[i] = buffer[i+2];
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	3302      	adds	r3, #2
 800180c:	4a0b      	ldr	r2, [pc, #44]	; (800183c <StartRcvData+0x4c>)
 800180e:	5cd1      	ldrb	r1, [r2, r3]
 8001810:	4a0c      	ldr	r2, [pc, #48]	; (8001844 <StartRcvData+0x54>)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	4413      	add	r3, r2
 8001816:	460a      	mov	r2, r1
 8001818:	701a      	strb	r2, [r3, #0]
				buffer[i+2] = 0xFF; //Buffer reset for default (not found) value
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	3302      	adds	r3, #2
 800181e:	4a07      	ldr	r2, [pc, #28]	; (800183c <StartRcvData+0x4c>)
 8001820:	21ff      	movs	r1, #255	; 0xff
 8001822:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < 6; i++) {
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	3301      	adds	r3, #1
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2b05      	cmp	r3, #5
 800182e:	ddeb      	ble.n	8001808 <StartRcvData+0x18>
			}
		osDelay(1000);
 8001830:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001834:	f004 fdec 	bl	8006410 <osDelay>
	    HAL_UART_Receive_IT(&huart2, buffer, 8);
 8001838:	e7de      	b.n	80017f8 <StartRcvData+0x8>
 800183a:	bf00      	nop
 800183c:	20000274 	.word	0x20000274
 8001840:	200001e4 	.word	0x200001e4
 8001844:	2000027c 	.word	0x2000027c

08001848 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a04      	ldr	r2, [pc, #16]	; (8001868 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d101      	bne.n	800185e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800185a:	f000 f9ef 	bl	8001c3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40001000 	.word	0x40001000

0800186c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001870:	b672      	cpsid	i
}
 8001872:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001874:	e7fe      	b.n	8001874 <Error_Handler+0x8>
	...

08001878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800187e:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <HAL_MspInit+0x4c>)
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	4a10      	ldr	r2, [pc, #64]	; (80018c4 <HAL_MspInit+0x4c>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6193      	str	r3, [r2, #24]
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <HAL_MspInit+0x4c>)
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	607b      	str	r3, [r7, #4]
 8001894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001896:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <HAL_MspInit+0x4c>)
 8001898:	69db      	ldr	r3, [r3, #28]
 800189a:	4a0a      	ldr	r2, [pc, #40]	; (80018c4 <HAL_MspInit+0x4c>)
 800189c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a0:	61d3      	str	r3, [r2, #28]
 80018a2:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <HAL_MspInit+0x4c>)
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018aa:	603b      	str	r3, [r7, #0]
 80018ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018ae:	2200      	movs	r2, #0
 80018b0:	210f      	movs	r1, #15
 80018b2:	f06f 0001 	mvn.w	r0, #1
 80018b6:	f000 fabd 	bl	8001e34 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40021000 	.word	0x40021000

080018c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08a      	sub	sp, #40	; 0x28
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a17      	ldr	r2, [pc, #92]	; (8001944 <HAL_SPI_MspInit+0x7c>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d128      	bne.n	800193c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018ea:	4b17      	ldr	r3, [pc, #92]	; (8001948 <HAL_SPI_MspInit+0x80>)
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	4a16      	ldr	r2, [pc, #88]	; (8001948 <HAL_SPI_MspInit+0x80>)
 80018f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018f4:	61d3      	str	r3, [r2, #28]
 80018f6:	4b14      	ldr	r3, [pc, #80]	; (8001948 <HAL_SPI_MspInit+0x80>)
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001902:	4b11      	ldr	r3, [pc, #68]	; (8001948 <HAL_SPI_MspInit+0x80>)
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	4a10      	ldr	r2, [pc, #64]	; (8001948 <HAL_SPI_MspInit+0x80>)
 8001908:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800190c:	6153      	str	r3, [r2, #20]
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <HAL_SPI_MspInit+0x80>)
 8001910:	695b      	ldr	r3, [r3, #20]
 8001912:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800191a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800191e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001920:	2302      	movs	r3, #2
 8001922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001928:	2303      	movs	r3, #3
 800192a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800192c:	2305      	movs	r3, #5
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	4619      	mov	r1, r3
 8001936:	4805      	ldr	r0, [pc, #20]	; (800194c <HAL_SPI_MspInit+0x84>)
 8001938:	f000 fb1e 	bl	8001f78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800193c:	bf00      	nop
 800193e:	3728      	adds	r7, #40	; 0x28
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40003800 	.word	0x40003800
 8001948:	40021000 	.word	0x40021000
 800194c:	48000400 	.word	0x48000400

08001950 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08a      	sub	sp, #40	; 0x28
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001958:	f107 0314 	add.w	r3, r7, #20
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a1b      	ldr	r2, [pc, #108]	; (80019dc <HAL_UART_MspInit+0x8c>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d130      	bne.n	80019d4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001972:	4b1b      	ldr	r3, [pc, #108]	; (80019e0 <HAL_UART_MspInit+0x90>)
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	4a1a      	ldr	r2, [pc, #104]	; (80019e0 <HAL_UART_MspInit+0x90>)
 8001978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800197c:	61d3      	str	r3, [r2, #28]
 800197e:	4b18      	ldr	r3, [pc, #96]	; (80019e0 <HAL_UART_MspInit+0x90>)
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001986:	613b      	str	r3, [r7, #16]
 8001988:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198a:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <HAL_UART_MspInit+0x90>)
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	4a14      	ldr	r2, [pc, #80]	; (80019e0 <HAL_UART_MspInit+0x90>)
 8001990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001994:	6153      	str	r3, [r2, #20]
 8001996:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <HAL_UART_MspInit+0x90>)
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019a2:	230c      	movs	r3, #12
 80019a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a6:	2302      	movs	r3, #2
 80019a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019ae:	2303      	movs	r3, #3
 80019b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019b2:	2307      	movs	r3, #7
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b6:	f107 0314 	add.w	r3, r7, #20
 80019ba:	4619      	mov	r1, r3
 80019bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019c0:	f000 fada 	bl	8001f78 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80019c4:	2200      	movs	r2, #0
 80019c6:	2105      	movs	r1, #5
 80019c8:	2026      	movs	r0, #38	; 0x26
 80019ca:	f000 fa33 	bl	8001e34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019ce:	2026      	movs	r0, #38	; 0x26
 80019d0:	f000 fa4c 	bl	8001e6c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019d4:	bf00      	nop
 80019d6:	3728      	adds	r7, #40	; 0x28
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40004400 	.word	0x40004400
 80019e0:	40021000 	.word	0x40021000

080019e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08e      	sub	sp, #56	; 0x38
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80019ec:	2300      	movs	r3, #0
 80019ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80019f0:	2300      	movs	r3, #0
 80019f2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80019f4:	4b33      	ldr	r3, [pc, #204]	; (8001ac4 <HAL_InitTick+0xe0>)
 80019f6:	69db      	ldr	r3, [r3, #28]
 80019f8:	4a32      	ldr	r2, [pc, #200]	; (8001ac4 <HAL_InitTick+0xe0>)
 80019fa:	f043 0310 	orr.w	r3, r3, #16
 80019fe:	61d3      	str	r3, [r2, #28]
 8001a00:	4b30      	ldr	r3, [pc, #192]	; (8001ac4 <HAL_InitTick+0xe0>)
 8001a02:	69db      	ldr	r3, [r3, #28]
 8001a04:	f003 0310 	and.w	r3, r3, #16
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a0c:	f107 0210 	add.w	r2, r7, #16
 8001a10:	f107 0314 	add.w	r3, r7, #20
 8001a14:	4611      	mov	r1, r2
 8001a16:	4618      	mov	r0, r3
 8001a18:	f001 feac 	bl	8003774 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001a1c:	6a3b      	ldr	r3, [r7, #32]
 8001a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d103      	bne.n	8001a2e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a26:	f001 fe61 	bl	80036ec <HAL_RCC_GetPCLK1Freq>
 8001a2a:	6378      	str	r0, [r7, #52]	; 0x34
 8001a2c:	e004      	b.n	8001a38 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001a2e:	f001 fe5d 	bl	80036ec <HAL_RCC_GetPCLK1Freq>
 8001a32:	4603      	mov	r3, r0
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a3a:	4a23      	ldr	r2, [pc, #140]	; (8001ac8 <HAL_InitTick+0xe4>)
 8001a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a40:	0c9b      	lsrs	r3, r3, #18
 8001a42:	3b01      	subs	r3, #1
 8001a44:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001a46:	4b21      	ldr	r3, [pc, #132]	; (8001acc <HAL_InitTick+0xe8>)
 8001a48:	4a21      	ldr	r2, [pc, #132]	; (8001ad0 <HAL_InitTick+0xec>)
 8001a4a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001a4c:	4b1f      	ldr	r3, [pc, #124]	; (8001acc <HAL_InitTick+0xe8>)
 8001a4e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a52:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001a54:	4a1d      	ldr	r2, [pc, #116]	; (8001acc <HAL_InitTick+0xe8>)
 8001a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a58:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001a5a:	4b1c      	ldr	r3, [pc, #112]	; (8001acc <HAL_InitTick+0xe8>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a60:	4b1a      	ldr	r3, [pc, #104]	; (8001acc <HAL_InitTick+0xe8>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a66:	4b19      	ldr	r3, [pc, #100]	; (8001acc <HAL_InitTick+0xe8>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001a6c:	4817      	ldr	r0, [pc, #92]	; (8001acc <HAL_InitTick+0xe8>)
 8001a6e:	f002 fde9 	bl	8004644 <HAL_TIM_Base_Init>
 8001a72:	4603      	mov	r3, r0
 8001a74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001a78:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d11b      	bne.n	8001ab8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001a80:	4812      	ldr	r0, [pc, #72]	; (8001acc <HAL_InitTick+0xe8>)
 8001a82:	f002 fe41 	bl	8004708 <HAL_TIM_Base_Start_IT>
 8001a86:	4603      	mov	r3, r0
 8001a88:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001a8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d111      	bne.n	8001ab8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a94:	2036      	movs	r0, #54	; 0x36
 8001a96:	f000 f9e9 	bl	8001e6c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b0f      	cmp	r3, #15
 8001a9e:	d808      	bhi.n	8001ab2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	2036      	movs	r0, #54	; 0x36
 8001aa6:	f000 f9c5 	bl	8001e34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001aaa:	4a0a      	ldr	r2, [pc, #40]	; (8001ad4 <HAL_InitTick+0xf0>)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6013      	str	r3, [r2, #0]
 8001ab0:	e002      	b.n	8001ab8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001ab8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3738      	adds	r7, #56	; 0x38
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	431bde83 	.word	0x431bde83
 8001acc:	200002a4 	.word	0x200002a4
 8001ad0:	40001000 	.word	0x40001000
 8001ad4:	2000000c 	.word	0x2000000c

08001ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001adc:	e7fe      	b.n	8001adc <NMI_Handler+0x4>

08001ade <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ae2:	e7fe      	b.n	8001ae2 <HardFault_Handler+0x4>

08001ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ae8:	e7fe      	b.n	8001ae8 <MemManage_Handler+0x4>

08001aea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aee:	e7fe      	b.n	8001aee <BusFault_Handler+0x4>

08001af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001af4:	e7fe      	b.n	8001af4 <UsageFault_Handler+0x4>

08001af6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b08:	4802      	ldr	r0, [pc, #8]	; (8001b14 <USART2_IRQHandler+0x10>)
 8001b0a:	f003 f99f 	bl	8004e4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	200001e4 	.word	0x200001e4

08001b18 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b1c:	4802      	ldr	r0, [pc, #8]	; (8001b28 <TIM6_DAC_IRQHandler+0x10>)
 8001b1e:	f002 fe47 	bl	80047b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	200002a4 	.word	0x200002a4

08001b2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b34:	4a14      	ldr	r2, [pc, #80]	; (8001b88 <_sbrk+0x5c>)
 8001b36:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <_sbrk+0x60>)
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b40:	4b13      	ldr	r3, [pc, #76]	; (8001b90 <_sbrk+0x64>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d102      	bne.n	8001b4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b48:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <_sbrk+0x64>)
 8001b4a:	4a12      	ldr	r2, [pc, #72]	; (8001b94 <_sbrk+0x68>)
 8001b4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b4e:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <_sbrk+0x64>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4413      	add	r3, r2
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d207      	bcs.n	8001b6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b5c:	f007 f934 	bl	8008dc8 <__errno>
 8001b60:	4603      	mov	r3, r0
 8001b62:	220c      	movs	r2, #12
 8001b64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b66:	f04f 33ff 	mov.w	r3, #4294967295
 8001b6a:	e009      	b.n	8001b80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b6c:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <_sbrk+0x64>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b72:	4b07      	ldr	r3, [pc, #28]	; (8001b90 <_sbrk+0x64>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4413      	add	r3, r2
 8001b7a:	4a05      	ldr	r2, [pc, #20]	; (8001b90 <_sbrk+0x64>)
 8001b7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20004000 	.word	0x20004000
 8001b8c:	00000400 	.word	0x00000400
 8001b90:	200002f0 	.word	0x200002f0
 8001b94:	20001e20 	.word	0x20001e20

08001b98 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <SystemInit+0x20>)
 8001b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ba2:	4a05      	ldr	r2, [pc, #20]	; (8001bb8 <SystemInit+0x20>)
 8001ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ba8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001bbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bf4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bc0:	f7ff ffea 	bl	8001b98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bc4:	480c      	ldr	r0, [pc, #48]	; (8001bf8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bc6:	490d      	ldr	r1, [pc, #52]	; (8001bfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bc8:	4a0d      	ldr	r2, [pc, #52]	; (8001c00 <LoopForever+0xe>)
  movs r3, #0
 8001bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bcc:	e002      	b.n	8001bd4 <LoopCopyDataInit>

08001bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bd2:	3304      	adds	r3, #4

08001bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bd8:	d3f9      	bcc.n	8001bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bda:	4a0a      	ldr	r2, [pc, #40]	; (8001c04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bdc:	4c0a      	ldr	r4, [pc, #40]	; (8001c08 <LoopForever+0x16>)
  movs r3, #0
 8001bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be0:	e001      	b.n	8001be6 <LoopFillZerobss>

08001be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be4:	3204      	adds	r2, #4

08001be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001be8:	d3fb      	bcc.n	8001be2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bea:	f007 f8f3 	bl	8008dd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bee:	f7ff fc41 	bl	8001474 <main>

08001bf2 <LoopForever>:

LoopForever:
    b LoopForever
 8001bf2:	e7fe      	b.n	8001bf2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001bf4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bfc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001c00:	08009d28 	.word	0x08009d28
  ldr r2, =_sbss
 8001c04:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001c08:	20001e20 	.word	0x20001e20

08001c0c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c0c:	e7fe      	b.n	8001c0c <ADC1_IRQHandler>
	...

08001c10 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c14:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <HAL_Init+0x28>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a07      	ldr	r2, [pc, #28]	; (8001c38 <HAL_Init+0x28>)
 8001c1a:	f043 0310 	orr.w	r3, r3, #16
 8001c1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c20:	2003      	movs	r0, #3
 8001c22:	f000 f8fc 	bl	8001e1e <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c26:	200f      	movs	r0, #15
 8001c28:	f7ff fedc 	bl	80019e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c2c:	f7ff fe24 	bl	8001878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40022000 	.word	0x40022000

08001c3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c40:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <HAL_IncTick+0x20>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	461a      	mov	r2, r3
 8001c46:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <HAL_IncTick+0x24>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	4a04      	ldr	r2, [pc, #16]	; (8001c60 <HAL_IncTick+0x24>)
 8001c4e:	6013      	str	r3, [r2, #0]
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	20000010 	.word	0x20000010
 8001c60:	200002f4 	.word	0x200002f4

08001c64 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return uwTick;  
 8001c68:	4b03      	ldr	r3, [pc, #12]	; (8001c78 <HAL_GetTick+0x14>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	200002f4 	.word	0x200002f4

08001c7c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c84:	f7ff ffee 	bl	8001c64 <HAL_GetTick>
 8001c88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c94:	d005      	beq.n	8001ca2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c96:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <HAL_Delay+0x44>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001ca2:	bf00      	nop
 8001ca4:	f7ff ffde 	bl	8001c64 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d8f7      	bhi.n	8001ca4 <HAL_Delay+0x28>
  {
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	bf00      	nop
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000010 	.word	0x20000010

08001cc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd4:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cda:	68ba      	ldr	r2, [r7, #8]
 8001cdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cf6:	4a04      	ldr	r2, [pc, #16]	; (8001d08 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	60d3      	str	r3, [r2, #12]
}
 8001cfc:	bf00      	nop
 8001cfe:	3714      	adds	r7, #20
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d10:	4b04      	ldr	r3, [pc, #16]	; (8001d24 <__NVIC_GetPriorityGrouping+0x18>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	0a1b      	lsrs	r3, r3, #8
 8001d16:	f003 0307 	and.w	r3, r3, #7
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	e000ed00 	.word	0xe000ed00

08001d28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	db0b      	blt.n	8001d52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
 8001d3c:	f003 021f 	and.w	r2, r3, #31
 8001d40:	4907      	ldr	r1, [pc, #28]	; (8001d60 <__NVIC_EnableIRQ+0x38>)
 8001d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d46:	095b      	lsrs	r3, r3, #5
 8001d48:	2001      	movs	r0, #1
 8001d4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	e000e100 	.word	0xe000e100

08001d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	6039      	str	r1, [r7, #0]
 8001d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	db0a      	blt.n	8001d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	490c      	ldr	r1, [pc, #48]	; (8001db0 <__NVIC_SetPriority+0x4c>)
 8001d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d82:	0112      	lsls	r2, r2, #4
 8001d84:	b2d2      	uxtb	r2, r2
 8001d86:	440b      	add	r3, r1
 8001d88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d8c:	e00a      	b.n	8001da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	4908      	ldr	r1, [pc, #32]	; (8001db4 <__NVIC_SetPriority+0x50>)
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	3b04      	subs	r3, #4
 8001d9c:	0112      	lsls	r2, r2, #4
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	440b      	add	r3, r1
 8001da2:	761a      	strb	r2, [r3, #24]
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	e000e100 	.word	0xe000e100
 8001db4:	e000ed00 	.word	0xe000ed00

08001db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b089      	sub	sp, #36	; 0x24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	f1c3 0307 	rsb	r3, r3, #7
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	bf28      	it	cs
 8001dd6:	2304      	movcs	r3, #4
 8001dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	3304      	adds	r3, #4
 8001dde:	2b06      	cmp	r3, #6
 8001de0:	d902      	bls.n	8001de8 <NVIC_EncodePriority+0x30>
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	3b03      	subs	r3, #3
 8001de6:	e000      	b.n	8001dea <NVIC_EncodePriority+0x32>
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dec:	f04f 32ff 	mov.w	r2, #4294967295
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43da      	mvns	r2, r3
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	401a      	ands	r2, r3
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e00:	f04f 31ff 	mov.w	r1, #4294967295
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0a:	43d9      	mvns	r1, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e10:	4313      	orrs	r3, r2
         );
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3724      	adds	r7, #36	; 0x24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff ff4c 	bl	8001cc4 <__NVIC_SetPriorityGrouping>
}
 8001e2c:	bf00      	nop
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
 8001e40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e46:	f7ff ff61 	bl	8001d0c <__NVIC_GetPriorityGrouping>
 8001e4a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	68b9      	ldr	r1, [r7, #8]
 8001e50:	6978      	ldr	r0, [r7, #20]
 8001e52:	f7ff ffb1 	bl	8001db8 <NVIC_EncodePriority>
 8001e56:	4602      	mov	r2, r0
 8001e58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e5c:	4611      	mov	r1, r2
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff ff80 	bl	8001d64 <__NVIC_SetPriority>
}
 8001e64:	bf00      	nop
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff ff54 	bl	8001d28 <__NVIC_EnableIRQ>
}
 8001e80:	bf00      	nop
 8001e82:	3708      	adds	r7, #8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d008      	beq.n	8001eac <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2204      	movs	r2, #4
 8001e9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e020      	b.n	8001eee <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f022 020e 	bic.w	r2, r2, #14
 8001eba:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 0201 	bic.w	r2, r2, #1
 8001eca:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8001eda:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b084      	sub	sp, #16
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f02:	2300      	movs	r3, #0
 8001f04:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d005      	beq.n	8001f1c <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2204      	movs	r2, #4
 8001f14:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	73fb      	strb	r3, [r7, #15]
 8001f1a:	e027      	b.n	8001f6c <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 020e 	bic.w	r2, r2, #14
 8001f2a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 0201 	bic.w	r2, r2, #1
 8001f3a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f44:	2101      	movs	r1, #1
 8001f46:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d003      	beq.n	8001f6c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	4798      	blx	r3
    } 
  }
  return status;
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
	...

08001f78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b087      	sub	sp, #28
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f82:	2300      	movs	r3, #0
 8001f84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f86:	e14e      	b.n	8002226 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	fa01 f303 	lsl.w	r3, r1, r3
 8001f94:	4013      	ands	r3, r2
 8001f96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f000 8140 	beq.w	8002220 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 0303 	and.w	r3, r3, #3
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d005      	beq.n	8001fb8 <HAL_GPIO_Init+0x40>
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 0303 	and.w	r3, r3, #3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d130      	bne.n	800201a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	2203      	movs	r2, #3
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	68da      	ldr	r2, [r3, #12]
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fee:	2201      	movs	r2, #1
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	091b      	lsrs	r3, r3, #4
 8002004:	f003 0201 	and.w	r2, r3, #1
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	4313      	orrs	r3, r2
 8002012:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f003 0303 	and.w	r3, r3, #3
 8002022:	2b03      	cmp	r3, #3
 8002024:	d017      	beq.n	8002056 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	2203      	movs	r2, #3
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43db      	mvns	r3, r3
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	4013      	ands	r3, r2
 800203c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	689a      	ldr	r2, [r3, #8]
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	4313      	orrs	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f003 0303 	and.w	r3, r3, #3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d123      	bne.n	80020aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	08da      	lsrs	r2, r3, #3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	3208      	adds	r2, #8
 800206a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800206e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	220f      	movs	r2, #15
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	43db      	mvns	r3, r3
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	4013      	ands	r3, r2
 8002084:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	691a      	ldr	r2, [r3, #16]
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	4313      	orrs	r3, r2
 800209a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	08da      	lsrs	r2, r3, #3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3208      	adds	r2, #8
 80020a4:	6939      	ldr	r1, [r7, #16]
 80020a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	2203      	movs	r2, #3
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43db      	mvns	r3, r3
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	4013      	ands	r3, r2
 80020c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f003 0203 	and.w	r2, r3, #3
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 809a 	beq.w	8002220 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ec:	4b55      	ldr	r3, [pc, #340]	; (8002244 <HAL_GPIO_Init+0x2cc>)
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	4a54      	ldr	r2, [pc, #336]	; (8002244 <HAL_GPIO_Init+0x2cc>)
 80020f2:	f043 0301 	orr.w	r3, r3, #1
 80020f6:	6193      	str	r3, [r2, #24]
 80020f8:	4b52      	ldr	r3, [pc, #328]	; (8002244 <HAL_GPIO_Init+0x2cc>)
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002104:	4a50      	ldr	r2, [pc, #320]	; (8002248 <HAL_GPIO_Init+0x2d0>)
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	089b      	lsrs	r3, r3, #2
 800210a:	3302      	adds	r3, #2
 800210c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002110:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	f003 0303 	and.w	r3, r3, #3
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	220f      	movs	r2, #15
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	4013      	ands	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800212e:	d013      	beq.n	8002158 <HAL_GPIO_Init+0x1e0>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a46      	ldr	r2, [pc, #280]	; (800224c <HAL_GPIO_Init+0x2d4>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d00d      	beq.n	8002154 <HAL_GPIO_Init+0x1dc>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a45      	ldr	r2, [pc, #276]	; (8002250 <HAL_GPIO_Init+0x2d8>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d007      	beq.n	8002150 <HAL_GPIO_Init+0x1d8>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a44      	ldr	r2, [pc, #272]	; (8002254 <HAL_GPIO_Init+0x2dc>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d101      	bne.n	800214c <HAL_GPIO_Init+0x1d4>
 8002148:	2303      	movs	r3, #3
 800214a:	e006      	b.n	800215a <HAL_GPIO_Init+0x1e2>
 800214c:	2305      	movs	r3, #5
 800214e:	e004      	b.n	800215a <HAL_GPIO_Init+0x1e2>
 8002150:	2302      	movs	r3, #2
 8002152:	e002      	b.n	800215a <HAL_GPIO_Init+0x1e2>
 8002154:	2301      	movs	r3, #1
 8002156:	e000      	b.n	800215a <HAL_GPIO_Init+0x1e2>
 8002158:	2300      	movs	r3, #0
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	f002 0203 	and.w	r2, r2, #3
 8002160:	0092      	lsls	r2, r2, #2
 8002162:	4093      	lsls	r3, r2
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	4313      	orrs	r3, r2
 8002168:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800216a:	4937      	ldr	r1, [pc, #220]	; (8002248 <HAL_GPIO_Init+0x2d0>)
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	089b      	lsrs	r3, r3, #2
 8002170:	3302      	adds	r3, #2
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002178:	4b37      	ldr	r3, [pc, #220]	; (8002258 <HAL_GPIO_Init+0x2e0>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	43db      	mvns	r3, r3
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	4013      	ands	r3, r2
 8002186:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	4313      	orrs	r3, r2
 800219a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800219c:	4a2e      	ldr	r2, [pc, #184]	; (8002258 <HAL_GPIO_Init+0x2e0>)
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021a2:	4b2d      	ldr	r3, [pc, #180]	; (8002258 <HAL_GPIO_Init+0x2e0>)
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	43db      	mvns	r3, r3
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	4013      	ands	r3, r2
 80021b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80021c6:	4a24      	ldr	r2, [pc, #144]	; (8002258 <HAL_GPIO_Init+0x2e0>)
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021cc:	4b22      	ldr	r3, [pc, #136]	; (8002258 <HAL_GPIO_Init+0x2e0>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	43db      	mvns	r3, r3
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	4013      	ands	r3, r2
 80021da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d003      	beq.n	80021f0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80021f0:	4a19      	ldr	r2, [pc, #100]	; (8002258 <HAL_GPIO_Init+0x2e0>)
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021f6:	4b18      	ldr	r3, [pc, #96]	; (8002258 <HAL_GPIO_Init+0x2e0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	43db      	mvns	r3, r3
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	4013      	ands	r3, r2
 8002204:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	4313      	orrs	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800221a:	4a0f      	ldr	r2, [pc, #60]	; (8002258 <HAL_GPIO_Init+0x2e0>)
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	3301      	adds	r3, #1
 8002224:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	fa22 f303 	lsr.w	r3, r2, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	f47f aea9 	bne.w	8001f88 <HAL_GPIO_Init+0x10>
  }
}
 8002236:	bf00      	nop
 8002238:	bf00      	nop
 800223a:	371c      	adds	r7, #28
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	40021000 	.word	0x40021000
 8002248:	40010000 	.word	0x40010000
 800224c:	48000400 	.word	0x48000400
 8002250:	48000800 	.word	0x48000800
 8002254:	48000c00 	.word	0x48000c00
 8002258:	40010400 	.word	0x40010400

0800225c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	460b      	mov	r3, r1
 8002266:	807b      	strh	r3, [r7, #2]
 8002268:	4613      	mov	r3, r2
 800226a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800226c:	787b      	ldrb	r3, [r7, #1]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002272:	887a      	ldrh	r2, [r7, #2]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002278:	e002      	b.n	8002280 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800227a:	887a      	ldrh	r2, [r7, #2]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002292:	af00      	add	r7, sp, #0
 8002294:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002298:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800229c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800229e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d102      	bne.n	80022b2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	f001 b823 	b.w	80032f8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 817d 	beq.w	80025c2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80022c8:	4bbc      	ldr	r3, [pc, #752]	; (80025bc <HAL_RCC_OscConfig+0x330>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 030c 	and.w	r3, r3, #12
 80022d0:	2b04      	cmp	r3, #4
 80022d2:	d00c      	beq.n	80022ee <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022d4:	4bb9      	ldr	r3, [pc, #740]	; (80025bc <HAL_RCC_OscConfig+0x330>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 030c 	and.w	r3, r3, #12
 80022dc:	2b08      	cmp	r3, #8
 80022de:	d15c      	bne.n	800239a <HAL_RCC_OscConfig+0x10e>
 80022e0:	4bb6      	ldr	r3, [pc, #728]	; (80025bc <HAL_RCC_OscConfig+0x330>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ec:	d155      	bne.n	800239a <HAL_RCC_OscConfig+0x10e>
 80022ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022f2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80022fa:	fa93 f3a3 	rbit	r3, r3
 80022fe:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002302:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002306:	fab3 f383 	clz	r3, r3
 800230a:	b2db      	uxtb	r3, r3
 800230c:	095b      	lsrs	r3, r3, #5
 800230e:	b2db      	uxtb	r3, r3
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b01      	cmp	r3, #1
 8002318:	d102      	bne.n	8002320 <HAL_RCC_OscConfig+0x94>
 800231a:	4ba8      	ldr	r3, [pc, #672]	; (80025bc <HAL_RCC_OscConfig+0x330>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	e015      	b.n	800234c <HAL_RCC_OscConfig+0xc0>
 8002320:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002324:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002328:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800232c:	fa93 f3a3 	rbit	r3, r3
 8002330:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002334:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002338:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800233c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002340:	fa93 f3a3 	rbit	r3, r3
 8002344:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002348:	4b9c      	ldr	r3, [pc, #624]	; (80025bc <HAL_RCC_OscConfig+0x330>)
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002350:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002354:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002358:	fa92 f2a2 	rbit	r2, r2
 800235c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002360:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002364:	fab2 f282 	clz	r2, r2
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	f042 0220 	orr.w	r2, r2, #32
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	f002 021f 	and.w	r2, r2, #31
 8002374:	2101      	movs	r1, #1
 8002376:	fa01 f202 	lsl.w	r2, r1, r2
 800237a:	4013      	ands	r3, r2
 800237c:	2b00      	cmp	r3, #0
 800237e:	f000 811f 	beq.w	80025c0 <HAL_RCC_OscConfig+0x334>
 8002382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002386:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	f040 8116 	bne.w	80025c0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	f000 bfaf 	b.w	80032f8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800239a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800239e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023aa:	d106      	bne.n	80023ba <HAL_RCC_OscConfig+0x12e>
 80023ac:	4b83      	ldr	r3, [pc, #524]	; (80025bc <HAL_RCC_OscConfig+0x330>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a82      	ldr	r2, [pc, #520]	; (80025bc <HAL_RCC_OscConfig+0x330>)
 80023b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b6:	6013      	str	r3, [r2, #0]
 80023b8:	e036      	b.n	8002428 <HAL_RCC_OscConfig+0x19c>
 80023ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10c      	bne.n	80023e4 <HAL_RCC_OscConfig+0x158>
 80023ca:	4b7c      	ldr	r3, [pc, #496]	; (80025bc <HAL_RCC_OscConfig+0x330>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a7b      	ldr	r2, [pc, #492]	; (80025bc <HAL_RCC_OscConfig+0x330>)
 80023d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	4b79      	ldr	r3, [pc, #484]	; (80025bc <HAL_RCC_OscConfig+0x330>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a78      	ldr	r2, [pc, #480]	; (80025bc <HAL_RCC_OscConfig+0x330>)
 80023dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e0:	6013      	str	r3, [r2, #0]
 80023e2:	e021      	b.n	8002428 <HAL_RCC_OscConfig+0x19c>
 80023e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023f4:	d10c      	bne.n	8002410 <HAL_RCC_OscConfig+0x184>
 80023f6:	4b71      	ldr	r3, [pc, #452]	; (80025bc <HAL_RCC_OscConfig+0x330>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a70      	ldr	r2, [pc, #448]	; (80025bc <HAL_RCC_OscConfig+0x330>)
 80023fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	4b6e      	ldr	r3, [pc, #440]	; (80025bc <HAL_RCC_OscConfig+0x330>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a6d      	ldr	r2, [pc, #436]	; (80025bc <HAL_RCC_OscConfig+0x330>)
 8002408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	e00b      	b.n	8002428 <HAL_RCC_OscConfig+0x19c>
 8002410:	4b6a      	ldr	r3, [pc, #424]	; (80025bc <HAL_RCC_OscConfig+0x330>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a69      	ldr	r2, [pc, #420]	; (80025bc <HAL_RCC_OscConfig+0x330>)
 8002416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800241a:	6013      	str	r3, [r2, #0]
 800241c:	4b67      	ldr	r3, [pc, #412]	; (80025bc <HAL_RCC_OscConfig+0x330>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a66      	ldr	r2, [pc, #408]	; (80025bc <HAL_RCC_OscConfig+0x330>)
 8002422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002426:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002428:	4b64      	ldr	r3, [pc, #400]	; (80025bc <HAL_RCC_OscConfig+0x330>)
 800242a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242c:	f023 020f 	bic.w	r2, r3, #15
 8002430:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002434:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	495f      	ldr	r1, [pc, #380]	; (80025bc <HAL_RCC_OscConfig+0x330>)
 800243e:	4313      	orrs	r3, r2
 8002440:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002446:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d059      	beq.n	8002506 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002452:	f7ff fc07 	bl	8001c64 <HAL_GetTick>
 8002456:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245a:	e00a      	b.n	8002472 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800245c:	f7ff fc02 	bl	8001c64 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b64      	cmp	r3, #100	; 0x64
 800246a:	d902      	bls.n	8002472 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	f000 bf43 	b.w	80032f8 <HAL_RCC_OscConfig+0x106c>
 8002472:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002476:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800247e:	fa93 f3a3 	rbit	r3, r3
 8002482:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002486:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248a:	fab3 f383 	clz	r3, r3
 800248e:	b2db      	uxtb	r3, r3
 8002490:	095b      	lsrs	r3, r3, #5
 8002492:	b2db      	uxtb	r3, r3
 8002494:	f043 0301 	orr.w	r3, r3, #1
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b01      	cmp	r3, #1
 800249c:	d102      	bne.n	80024a4 <HAL_RCC_OscConfig+0x218>
 800249e:	4b47      	ldr	r3, [pc, #284]	; (80025bc <HAL_RCC_OscConfig+0x330>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	e015      	b.n	80024d0 <HAL_RCC_OscConfig+0x244>
 80024a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024a8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ac:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80024b0:	fa93 f3a3 	rbit	r3, r3
 80024b4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80024b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024bc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80024c0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80024c4:	fa93 f3a3 	rbit	r3, r3
 80024c8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80024cc:	4b3b      	ldr	r3, [pc, #236]	; (80025bc <HAL_RCC_OscConfig+0x330>)
 80024ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024d4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80024d8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80024dc:	fa92 f2a2 	rbit	r2, r2
 80024e0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80024e4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80024e8:	fab2 f282 	clz	r2, r2
 80024ec:	b2d2      	uxtb	r2, r2
 80024ee:	f042 0220 	orr.w	r2, r2, #32
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	f002 021f 	and.w	r2, r2, #31
 80024f8:	2101      	movs	r1, #1
 80024fa:	fa01 f202 	lsl.w	r2, r1, r2
 80024fe:	4013      	ands	r3, r2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0ab      	beq.n	800245c <HAL_RCC_OscConfig+0x1d0>
 8002504:	e05d      	b.n	80025c2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002506:	f7ff fbad 	bl	8001c64 <HAL_GetTick>
 800250a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800250e:	e00a      	b.n	8002526 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002510:	f7ff fba8 	bl	8001c64 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b64      	cmp	r3, #100	; 0x64
 800251e:	d902      	bls.n	8002526 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	f000 bee9 	b.w	80032f8 <HAL_RCC_OscConfig+0x106c>
 8002526:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800252a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002532:	fa93 f3a3 	rbit	r3, r3
 8002536:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800253a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800253e:	fab3 f383 	clz	r3, r3
 8002542:	b2db      	uxtb	r3, r3
 8002544:	095b      	lsrs	r3, r3, #5
 8002546:	b2db      	uxtb	r3, r3
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b01      	cmp	r3, #1
 8002550:	d102      	bne.n	8002558 <HAL_RCC_OscConfig+0x2cc>
 8002552:	4b1a      	ldr	r3, [pc, #104]	; (80025bc <HAL_RCC_OscConfig+0x330>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	e015      	b.n	8002584 <HAL_RCC_OscConfig+0x2f8>
 8002558:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800255c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002560:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002564:	fa93 f3a3 	rbit	r3, r3
 8002568:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800256c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002570:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002574:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002578:	fa93 f3a3 	rbit	r3, r3
 800257c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002580:	4b0e      	ldr	r3, [pc, #56]	; (80025bc <HAL_RCC_OscConfig+0x330>)
 8002582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002584:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002588:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800258c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002590:	fa92 f2a2 	rbit	r2, r2
 8002594:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002598:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800259c:	fab2 f282 	clz	r2, r2
 80025a0:	b2d2      	uxtb	r2, r2
 80025a2:	f042 0220 	orr.w	r2, r2, #32
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	f002 021f 	and.w	r2, r2, #31
 80025ac:	2101      	movs	r1, #1
 80025ae:	fa01 f202 	lsl.w	r2, r1, r2
 80025b2:	4013      	ands	r3, r2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1ab      	bne.n	8002510 <HAL_RCC_OscConfig+0x284>
 80025b8:	e003      	b.n	80025c2 <HAL_RCC_OscConfig+0x336>
 80025ba:	bf00      	nop
 80025bc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 817d 	beq.w	80028d2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80025d8:	4ba6      	ldr	r3, [pc, #664]	; (8002874 <HAL_RCC_OscConfig+0x5e8>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f003 030c 	and.w	r3, r3, #12
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00b      	beq.n	80025fc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80025e4:	4ba3      	ldr	r3, [pc, #652]	; (8002874 <HAL_RCC_OscConfig+0x5e8>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f003 030c 	and.w	r3, r3, #12
 80025ec:	2b08      	cmp	r3, #8
 80025ee:	d172      	bne.n	80026d6 <HAL_RCC_OscConfig+0x44a>
 80025f0:	4ba0      	ldr	r3, [pc, #640]	; (8002874 <HAL_RCC_OscConfig+0x5e8>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d16c      	bne.n	80026d6 <HAL_RCC_OscConfig+0x44a>
 80025fc:	2302      	movs	r3, #2
 80025fe:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002602:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002606:	fa93 f3a3 	rbit	r3, r3
 800260a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800260e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002612:	fab3 f383 	clz	r3, r3
 8002616:	b2db      	uxtb	r3, r3
 8002618:	095b      	lsrs	r3, r3, #5
 800261a:	b2db      	uxtb	r3, r3
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b01      	cmp	r3, #1
 8002624:	d102      	bne.n	800262c <HAL_RCC_OscConfig+0x3a0>
 8002626:	4b93      	ldr	r3, [pc, #588]	; (8002874 <HAL_RCC_OscConfig+0x5e8>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	e013      	b.n	8002654 <HAL_RCC_OscConfig+0x3c8>
 800262c:	2302      	movs	r3, #2
 800262e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002632:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002636:	fa93 f3a3 	rbit	r3, r3
 800263a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800263e:	2302      	movs	r3, #2
 8002640:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002644:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002648:	fa93 f3a3 	rbit	r3, r3
 800264c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002650:	4b88      	ldr	r3, [pc, #544]	; (8002874 <HAL_RCC_OscConfig+0x5e8>)
 8002652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002654:	2202      	movs	r2, #2
 8002656:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800265a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800265e:	fa92 f2a2 	rbit	r2, r2
 8002662:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002666:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800266a:	fab2 f282 	clz	r2, r2
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	f042 0220 	orr.w	r2, r2, #32
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	f002 021f 	and.w	r2, r2, #31
 800267a:	2101      	movs	r1, #1
 800267c:	fa01 f202 	lsl.w	r2, r1, r2
 8002680:	4013      	ands	r3, r2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00a      	beq.n	800269c <HAL_RCC_OscConfig+0x410>
 8002686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800268a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d002      	beq.n	800269c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	f000 be2e 	b.w	80032f8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800269c:	4b75      	ldr	r3, [pc, #468]	; (8002874 <HAL_RCC_OscConfig+0x5e8>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	21f8      	movs	r1, #248	; 0xf8
 80026b2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80026ba:	fa91 f1a1 	rbit	r1, r1
 80026be:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80026c2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80026c6:	fab1 f181 	clz	r1, r1
 80026ca:	b2c9      	uxtb	r1, r1
 80026cc:	408b      	lsls	r3, r1
 80026ce:	4969      	ldr	r1, [pc, #420]	; (8002874 <HAL_RCC_OscConfig+0x5e8>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026d4:	e0fd      	b.n	80028d2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f000 8088 	beq.w	80027f8 <HAL_RCC_OscConfig+0x56c>
 80026e8:	2301      	movs	r3, #1
 80026ea:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ee:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80026f2:	fa93 f3a3 	rbit	r3, r3
 80026f6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80026fa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026fe:	fab3 f383 	clz	r3, r3
 8002702:	b2db      	uxtb	r3, r3
 8002704:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002708:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	461a      	mov	r2, r3
 8002710:	2301      	movs	r3, #1
 8002712:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002714:	f7ff faa6 	bl	8001c64 <HAL_GetTick>
 8002718:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800271c:	e00a      	b.n	8002734 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800271e:	f7ff faa1 	bl	8001c64 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d902      	bls.n	8002734 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	f000 bde2 	b.w	80032f8 <HAL_RCC_OscConfig+0x106c>
 8002734:	2302      	movs	r3, #2
 8002736:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800273e:	fa93 f3a3 	rbit	r3, r3
 8002742:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002746:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800274a:	fab3 f383 	clz	r3, r3
 800274e:	b2db      	uxtb	r3, r3
 8002750:	095b      	lsrs	r3, r3, #5
 8002752:	b2db      	uxtb	r3, r3
 8002754:	f043 0301 	orr.w	r3, r3, #1
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b01      	cmp	r3, #1
 800275c:	d102      	bne.n	8002764 <HAL_RCC_OscConfig+0x4d8>
 800275e:	4b45      	ldr	r3, [pc, #276]	; (8002874 <HAL_RCC_OscConfig+0x5e8>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	e013      	b.n	800278c <HAL_RCC_OscConfig+0x500>
 8002764:	2302      	movs	r3, #2
 8002766:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800276e:	fa93 f3a3 	rbit	r3, r3
 8002772:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002776:	2302      	movs	r3, #2
 8002778:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800277c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002780:	fa93 f3a3 	rbit	r3, r3
 8002784:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002788:	4b3a      	ldr	r3, [pc, #232]	; (8002874 <HAL_RCC_OscConfig+0x5e8>)
 800278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278c:	2202      	movs	r2, #2
 800278e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002792:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002796:	fa92 f2a2 	rbit	r2, r2
 800279a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800279e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80027a2:	fab2 f282 	clz	r2, r2
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	f042 0220 	orr.w	r2, r2, #32
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	f002 021f 	and.w	r2, r2, #31
 80027b2:	2101      	movs	r1, #1
 80027b4:	fa01 f202 	lsl.w	r2, r1, r2
 80027b8:	4013      	ands	r3, r2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d0af      	beq.n	800271e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027be:	4b2d      	ldr	r3, [pc, #180]	; (8002874 <HAL_RCC_OscConfig+0x5e8>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	21f8      	movs	r1, #248	; 0xf8
 80027d4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80027dc:	fa91 f1a1 	rbit	r1, r1
 80027e0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80027e4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80027e8:	fab1 f181 	clz	r1, r1
 80027ec:	b2c9      	uxtb	r1, r1
 80027ee:	408b      	lsls	r3, r1
 80027f0:	4920      	ldr	r1, [pc, #128]	; (8002874 <HAL_RCC_OscConfig+0x5e8>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	600b      	str	r3, [r1, #0]
 80027f6:	e06c      	b.n	80028d2 <HAL_RCC_OscConfig+0x646>
 80027f8:	2301      	movs	r3, #1
 80027fa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002802:	fa93 f3a3 	rbit	r3, r3
 8002806:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800280a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800280e:	fab3 f383 	clz	r3, r3
 8002812:	b2db      	uxtb	r3, r3
 8002814:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002818:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	461a      	mov	r2, r3
 8002820:	2300      	movs	r3, #0
 8002822:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002824:	f7ff fa1e 	bl	8001c64 <HAL_GetTick>
 8002828:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800282c:	e00a      	b.n	8002844 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800282e:	f7ff fa19 	bl	8001c64 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d902      	bls.n	8002844 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	f000 bd5a 	b.w	80032f8 <HAL_RCC_OscConfig+0x106c>
 8002844:	2302      	movs	r3, #2
 8002846:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800284e:	fa93 f3a3 	rbit	r3, r3
 8002852:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002856:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800285a:	fab3 f383 	clz	r3, r3
 800285e:	b2db      	uxtb	r3, r3
 8002860:	095b      	lsrs	r3, r3, #5
 8002862:	b2db      	uxtb	r3, r3
 8002864:	f043 0301 	orr.w	r3, r3, #1
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b01      	cmp	r3, #1
 800286c:	d104      	bne.n	8002878 <HAL_RCC_OscConfig+0x5ec>
 800286e:	4b01      	ldr	r3, [pc, #4]	; (8002874 <HAL_RCC_OscConfig+0x5e8>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	e015      	b.n	80028a0 <HAL_RCC_OscConfig+0x614>
 8002874:	40021000 	.word	0x40021000
 8002878:	2302      	movs	r3, #2
 800287a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002882:	fa93 f3a3 	rbit	r3, r3
 8002886:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800288a:	2302      	movs	r3, #2
 800288c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002890:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002894:	fa93 f3a3 	rbit	r3, r3
 8002898:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800289c:	4bc8      	ldr	r3, [pc, #800]	; (8002bc0 <HAL_RCC_OscConfig+0x934>)
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	2202      	movs	r2, #2
 80028a2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80028a6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80028aa:	fa92 f2a2 	rbit	r2, r2
 80028ae:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80028b2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80028b6:	fab2 f282 	clz	r2, r2
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	f042 0220 	orr.w	r2, r2, #32
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	f002 021f 	and.w	r2, r2, #31
 80028c6:	2101      	movs	r1, #1
 80028c8:	fa01 f202 	lsl.w	r2, r1, r2
 80028cc:	4013      	ands	r3, r2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1ad      	bne.n	800282e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0308 	and.w	r3, r3, #8
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f000 8110 	beq.w	8002b08 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d079      	beq.n	80029ec <HAL_RCC_OscConfig+0x760>
 80028f8:	2301      	movs	r3, #1
 80028fa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002902:	fa93 f3a3 	rbit	r3, r3
 8002906:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800290a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800290e:	fab3 f383 	clz	r3, r3
 8002912:	b2db      	uxtb	r3, r3
 8002914:	461a      	mov	r2, r3
 8002916:	4bab      	ldr	r3, [pc, #684]	; (8002bc4 <HAL_RCC_OscConfig+0x938>)
 8002918:	4413      	add	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	461a      	mov	r2, r3
 800291e:	2301      	movs	r3, #1
 8002920:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002922:	f7ff f99f 	bl	8001c64 <HAL_GetTick>
 8002926:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800292a:	e00a      	b.n	8002942 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800292c:	f7ff f99a 	bl	8001c64 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d902      	bls.n	8002942 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	f000 bcdb 	b.w	80032f8 <HAL_RCC_OscConfig+0x106c>
 8002942:	2302      	movs	r3, #2
 8002944:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002948:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800294c:	fa93 f3a3 	rbit	r3, r3
 8002950:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002954:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002958:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800295c:	2202      	movs	r2, #2
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002964:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	fa93 f2a3 	rbit	r2, r3
 800296e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002972:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800297c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002980:	2202      	movs	r2, #2
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002988:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	fa93 f2a3 	rbit	r2, r3
 8002992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002996:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800299a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800299c:	4b88      	ldr	r3, [pc, #544]	; (8002bc0 <HAL_RCC_OscConfig+0x934>)
 800299e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80029a8:	2102      	movs	r1, #2
 80029aa:	6019      	str	r1, [r3, #0]
 80029ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	fa93 f1a3 	rbit	r1, r3
 80029ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029be:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80029c2:	6019      	str	r1, [r3, #0]
  return result;
 80029c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	fab3 f383 	clz	r3, r3
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	f003 031f 	and.w	r3, r3, #31
 80029de:	2101      	movs	r1, #1
 80029e0:	fa01 f303 	lsl.w	r3, r1, r3
 80029e4:	4013      	ands	r3, r2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d0a0      	beq.n	800292c <HAL_RCC_OscConfig+0x6a0>
 80029ea:	e08d      	b.n	8002b08 <HAL_RCC_OscConfig+0x87c>
 80029ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029f0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80029f4:	2201      	movs	r2, #1
 80029f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029fc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	fa93 f2a3 	rbit	r2, r3
 8002a06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a0a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002a0e:	601a      	str	r2, [r3, #0]
  return result;
 8002a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a14:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002a18:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a1a:	fab3 f383 	clz	r3, r3
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	461a      	mov	r2, r3
 8002a22:	4b68      	ldr	r3, [pc, #416]	; (8002bc4 <HAL_RCC_OscConfig+0x938>)
 8002a24:	4413      	add	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	461a      	mov	r2, r3
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a2e:	f7ff f919 	bl	8001c64 <HAL_GetTick>
 8002a32:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a36:	e00a      	b.n	8002a4e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a38:	f7ff f914 	bl	8001c64 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d902      	bls.n	8002a4e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	f000 bc55 	b.w	80032f8 <HAL_RCC_OscConfig+0x106c>
 8002a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a52:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002a56:	2202      	movs	r2, #2
 8002a58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a5e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	fa93 f2a3 	rbit	r2, r3
 8002a68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a6c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a76:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a82:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	fa93 f2a3 	rbit	r2, r3
 8002a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	fa93 f2a3 	rbit	r2, r3
 8002ab0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002ab8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aba:	4b41      	ldr	r3, [pc, #260]	; (8002bc0 <HAL_RCC_OscConfig+0x934>)
 8002abc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002abe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002ac6:	2102      	movs	r1, #2
 8002ac8:	6019      	str	r1, [r3, #0]
 8002aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ace:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	fa93 f1a3 	rbit	r1, r3
 8002ad8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002adc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002ae0:	6019      	str	r1, [r3, #0]
  return result;
 8002ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	fab3 f383 	clz	r3, r3
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	f003 031f 	and.w	r3, r3, #31
 8002afc:	2101      	movs	r1, #1
 8002afe:	fa01 f303 	lsl.w	r3, r1, r3
 8002b02:	4013      	ands	r3, r2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d197      	bne.n	8002a38 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 81a1 	beq.w	8002e60 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b24:	4b26      	ldr	r3, [pc, #152]	; (8002bc0 <HAL_RCC_OscConfig+0x934>)
 8002b26:	69db      	ldr	r3, [r3, #28]
 8002b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d116      	bne.n	8002b5e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b30:	4b23      	ldr	r3, [pc, #140]	; (8002bc0 <HAL_RCC_OscConfig+0x934>)
 8002b32:	69db      	ldr	r3, [r3, #28]
 8002b34:	4a22      	ldr	r2, [pc, #136]	; (8002bc0 <HAL_RCC_OscConfig+0x934>)
 8002b36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b3a:	61d3      	str	r3, [r2, #28]
 8002b3c:	4b20      	ldr	r3, [pc, #128]	; (8002bc0 <HAL_RCC_OscConfig+0x934>)
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b48:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b52:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002b56:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5e:	4b1a      	ldr	r3, [pc, #104]	; (8002bc8 <HAL_RCC_OscConfig+0x93c>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d11a      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b6a:	4b17      	ldr	r3, [pc, #92]	; (8002bc8 <HAL_RCC_OscConfig+0x93c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a16      	ldr	r2, [pc, #88]	; (8002bc8 <HAL_RCC_OscConfig+0x93c>)
 8002b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b74:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b76:	f7ff f875 	bl	8001c64 <HAL_GetTick>
 8002b7a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b7e:	e009      	b.n	8002b94 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b80:	f7ff f870 	bl	8001c64 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b64      	cmp	r3, #100	; 0x64
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e3b1      	b.n	80032f8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b94:	4b0c      	ldr	r3, [pc, #48]	; (8002bc8 <HAL_RCC_OscConfig+0x93c>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0ef      	beq.n	8002b80 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ba0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d10d      	bne.n	8002bcc <HAL_RCC_OscConfig+0x940>
 8002bb0:	4b03      	ldr	r3, [pc, #12]	; (8002bc0 <HAL_RCC_OscConfig+0x934>)
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	4a02      	ldr	r2, [pc, #8]	; (8002bc0 <HAL_RCC_OscConfig+0x934>)
 8002bb6:	f043 0301 	orr.w	r3, r3, #1
 8002bba:	6213      	str	r3, [r2, #32]
 8002bbc:	e03c      	b.n	8002c38 <HAL_RCC_OscConfig+0x9ac>
 8002bbe:	bf00      	nop
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	10908120 	.word	0x10908120
 8002bc8:	40007000 	.word	0x40007000
 8002bcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10c      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x96a>
 8002bdc:	4bc1      	ldr	r3, [pc, #772]	; (8002ee4 <HAL_RCC_OscConfig+0xc58>)
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	4ac0      	ldr	r2, [pc, #768]	; (8002ee4 <HAL_RCC_OscConfig+0xc58>)
 8002be2:	f023 0301 	bic.w	r3, r3, #1
 8002be6:	6213      	str	r3, [r2, #32]
 8002be8:	4bbe      	ldr	r3, [pc, #760]	; (8002ee4 <HAL_RCC_OscConfig+0xc58>)
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	4abd      	ldr	r2, [pc, #756]	; (8002ee4 <HAL_RCC_OscConfig+0xc58>)
 8002bee:	f023 0304 	bic.w	r3, r3, #4
 8002bf2:	6213      	str	r3, [r2, #32]
 8002bf4:	e020      	b.n	8002c38 <HAL_RCC_OscConfig+0x9ac>
 8002bf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bfa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	2b05      	cmp	r3, #5
 8002c04:	d10c      	bne.n	8002c20 <HAL_RCC_OscConfig+0x994>
 8002c06:	4bb7      	ldr	r3, [pc, #732]	; (8002ee4 <HAL_RCC_OscConfig+0xc58>)
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	4ab6      	ldr	r2, [pc, #728]	; (8002ee4 <HAL_RCC_OscConfig+0xc58>)
 8002c0c:	f043 0304 	orr.w	r3, r3, #4
 8002c10:	6213      	str	r3, [r2, #32]
 8002c12:	4bb4      	ldr	r3, [pc, #720]	; (8002ee4 <HAL_RCC_OscConfig+0xc58>)
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	4ab3      	ldr	r2, [pc, #716]	; (8002ee4 <HAL_RCC_OscConfig+0xc58>)
 8002c18:	f043 0301 	orr.w	r3, r3, #1
 8002c1c:	6213      	str	r3, [r2, #32]
 8002c1e:	e00b      	b.n	8002c38 <HAL_RCC_OscConfig+0x9ac>
 8002c20:	4bb0      	ldr	r3, [pc, #704]	; (8002ee4 <HAL_RCC_OscConfig+0xc58>)
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	4aaf      	ldr	r2, [pc, #700]	; (8002ee4 <HAL_RCC_OscConfig+0xc58>)
 8002c26:	f023 0301 	bic.w	r3, r3, #1
 8002c2a:	6213      	str	r3, [r2, #32]
 8002c2c:	4bad      	ldr	r3, [pc, #692]	; (8002ee4 <HAL_RCC_OscConfig+0xc58>)
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	4aac      	ldr	r2, [pc, #688]	; (8002ee4 <HAL_RCC_OscConfig+0xc58>)
 8002c32:	f023 0304 	bic.w	r3, r3, #4
 8002c36:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f000 8081 	beq.w	8002d4c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c4a:	f7ff f80b 	bl	8001c64 <HAL_GetTick>
 8002c4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c52:	e00b      	b.n	8002c6c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c54:	f7ff f806 	bl	8001c64 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e345      	b.n	80032f8 <HAL_RCC_OscConfig+0x106c>
 8002c6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c70:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002c74:	2202      	movs	r2, #2
 8002c76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c7c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	fa93 f2a3 	rbit	r2, r3
 8002c86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c8a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c94:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002c98:	2202      	movs	r2, #2
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	fa93 f2a3 	rbit	r2, r3
 8002caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cae:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002cb2:	601a      	str	r2, [r3, #0]
  return result;
 8002cb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002cbc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cbe:	fab3 f383 	clz	r3, r3
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	095b      	lsrs	r3, r3, #5
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	f043 0302 	orr.w	r3, r3, #2
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d102      	bne.n	8002cd8 <HAL_RCC_OscConfig+0xa4c>
 8002cd2:	4b84      	ldr	r3, [pc, #528]	; (8002ee4 <HAL_RCC_OscConfig+0xc58>)
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	e013      	b.n	8002d00 <HAL_RCC_OscConfig+0xa74>
 8002cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cdc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002ce0:	2202      	movs	r2, #2
 8002ce2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	fa93 f2a3 	rbit	r2, r3
 8002cf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	4b79      	ldr	r3, [pc, #484]	; (8002ee4 <HAL_RCC_OscConfig+0xc58>)
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d04:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002d08:	2102      	movs	r1, #2
 8002d0a:	6011      	str	r1, [r2, #0]
 8002d0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d10:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002d14:	6812      	ldr	r2, [r2, #0]
 8002d16:	fa92 f1a2 	rbit	r1, r2
 8002d1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d1e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002d22:	6011      	str	r1, [r2, #0]
  return result;
 8002d24:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d28:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002d2c:	6812      	ldr	r2, [r2, #0]
 8002d2e:	fab2 f282 	clz	r2, r2
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d38:	b2d2      	uxtb	r2, r2
 8002d3a:	f002 021f 	and.w	r2, r2, #31
 8002d3e:	2101      	movs	r1, #1
 8002d40:	fa01 f202 	lsl.w	r2, r1, r2
 8002d44:	4013      	ands	r3, r2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d084      	beq.n	8002c54 <HAL_RCC_OscConfig+0x9c8>
 8002d4a:	e07f      	b.n	8002e4c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d4c:	f7fe ff8a 	bl	8001c64 <HAL_GetTick>
 8002d50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d54:	e00b      	b.n	8002d6e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d56:	f7fe ff85 	bl	8001c64 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e2c4      	b.n	80032f8 <HAL_RCC_OscConfig+0x106c>
 8002d6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d72:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002d76:	2202      	movs	r2, #2
 8002d78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d7e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	fa93 f2a3 	rbit	r2, r3
 8002d88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d8c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d96:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	fa93 f2a3 	rbit	r2, r3
 8002dac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002db4:	601a      	str	r2, [r3, #0]
  return result;
 8002db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dba:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002dbe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc0:	fab3 f383 	clz	r3, r3
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	095b      	lsrs	r3, r3, #5
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	f043 0302 	orr.w	r3, r3, #2
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d102      	bne.n	8002dda <HAL_RCC_OscConfig+0xb4e>
 8002dd4:	4b43      	ldr	r3, [pc, #268]	; (8002ee4 <HAL_RCC_OscConfig+0xc58>)
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	e013      	b.n	8002e02 <HAL_RCC_OscConfig+0xb76>
 8002dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dde:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002de2:	2202      	movs	r2, #2
 8002de4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dea:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	fa93 f2a3 	rbit	r2, r3
 8002df4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002dfc:	601a      	str	r2, [r3, #0]
 8002dfe:	4b39      	ldr	r3, [pc, #228]	; (8002ee4 <HAL_RCC_OscConfig+0xc58>)
 8002e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e02:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e06:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002e0a:	2102      	movs	r1, #2
 8002e0c:	6011      	str	r1, [r2, #0]
 8002e0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e12:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002e16:	6812      	ldr	r2, [r2, #0]
 8002e18:	fa92 f1a2 	rbit	r1, r2
 8002e1c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e20:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002e24:	6011      	str	r1, [r2, #0]
  return result;
 8002e26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e2a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002e2e:	6812      	ldr	r2, [r2, #0]
 8002e30:	fab2 f282 	clz	r2, r2
 8002e34:	b2d2      	uxtb	r2, r2
 8002e36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e3a:	b2d2      	uxtb	r2, r2
 8002e3c:	f002 021f 	and.w	r2, r2, #31
 8002e40:	2101      	movs	r1, #1
 8002e42:	fa01 f202 	lsl.w	r2, r1, r2
 8002e46:	4013      	ands	r3, r2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d184      	bne.n	8002d56 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e4c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d105      	bne.n	8002e60 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e54:	4b23      	ldr	r3, [pc, #140]	; (8002ee4 <HAL_RCC_OscConfig+0xc58>)
 8002e56:	69db      	ldr	r3, [r3, #28]
 8002e58:	4a22      	ldr	r2, [pc, #136]	; (8002ee4 <HAL_RCC_OscConfig+0xc58>)
 8002e5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e5e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f000 8242 	beq.w	80032f6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e72:	4b1c      	ldr	r3, [pc, #112]	; (8002ee4 <HAL_RCC_OscConfig+0xc58>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f003 030c 	and.w	r3, r3, #12
 8002e7a:	2b08      	cmp	r3, #8
 8002e7c:	f000 8213 	beq.w	80032a6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	69db      	ldr	r3, [r3, #28]
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	f040 8162 	bne.w	8003156 <HAL_RCC_OscConfig+0xeca>
 8002e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e96:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002e9a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	fa93 f2a3 	rbit	r2, r3
 8002eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002eb6:	601a      	str	r2, [r3, #0]
  return result;
 8002eb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ebc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002ec0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ec2:	fab3 f383 	clz	r3, r3
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ecc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed8:	f7fe fec4 	bl	8001c64 <HAL_GetTick>
 8002edc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ee0:	e00c      	b.n	8002efc <HAL_RCC_OscConfig+0xc70>
 8002ee2:	bf00      	nop
 8002ee4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ee8:	f7fe febc 	bl	8001c64 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e1fd      	b.n	80032f8 <HAL_RCC_OscConfig+0x106c>
 8002efc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f00:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002f04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f0e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	fa93 f2a3 	rbit	r2, r3
 8002f18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f1c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002f20:	601a      	str	r2, [r3, #0]
  return result;
 8002f22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f26:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002f2a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f2c:	fab3 f383 	clz	r3, r3
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	095b      	lsrs	r3, r3, #5
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	f043 0301 	orr.w	r3, r3, #1
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d102      	bne.n	8002f46 <HAL_RCC_OscConfig+0xcba>
 8002f40:	4bb0      	ldr	r3, [pc, #704]	; (8003204 <HAL_RCC_OscConfig+0xf78>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	e027      	b.n	8002f96 <HAL_RCC_OscConfig+0xd0a>
 8002f46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f4a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002f4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f58:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	fa93 f2a3 	rbit	r2, r3
 8002f62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f66:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f70:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002f74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f7e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	fa93 f2a3 	rbit	r2, r3
 8002f88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f8c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	4b9c      	ldr	r3, [pc, #624]	; (8003204 <HAL_RCC_OscConfig+0xf78>)
 8002f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f9a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002f9e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002fa2:	6011      	str	r1, [r2, #0]
 8002fa4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fa8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002fac:	6812      	ldr	r2, [r2, #0]
 8002fae:	fa92 f1a2 	rbit	r1, r2
 8002fb2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fb6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002fba:	6011      	str	r1, [r2, #0]
  return result;
 8002fbc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fc0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002fc4:	6812      	ldr	r2, [r2, #0]
 8002fc6:	fab2 f282 	clz	r2, r2
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	f042 0220 	orr.w	r2, r2, #32
 8002fd0:	b2d2      	uxtb	r2, r2
 8002fd2:	f002 021f 	and.w	r2, r2, #31
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fdc:	4013      	ands	r3, r2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d182      	bne.n	8002ee8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fe2:	4b88      	ldr	r3, [pc, #544]	; (8003204 <HAL_RCC_OscConfig+0xf78>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002fea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ff6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ffa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	430b      	orrs	r3, r1
 8003004:	497f      	ldr	r1, [pc, #508]	; (8003204 <HAL_RCC_OscConfig+0xf78>)
 8003006:	4313      	orrs	r3, r2
 8003008:	604b      	str	r3, [r1, #4]
 800300a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800300e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003012:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003016:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003018:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800301c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	fa93 f2a3 	rbit	r2, r3
 8003026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800302a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800302e:	601a      	str	r2, [r3, #0]
  return result;
 8003030:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003034:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003038:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800303a:	fab3 f383 	clz	r3, r3
 800303e:	b2db      	uxtb	r3, r3
 8003040:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003044:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	461a      	mov	r2, r3
 800304c:	2301      	movs	r3, #1
 800304e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003050:	f7fe fe08 	bl	8001c64 <HAL_GetTick>
 8003054:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003058:	e009      	b.n	800306e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800305a:	f7fe fe03 	bl	8001c64 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e144      	b.n	80032f8 <HAL_RCC_OscConfig+0x106c>
 800306e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003072:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003076:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800307a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003080:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	fa93 f2a3 	rbit	r2, r3
 800308a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800308e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003092:	601a      	str	r2, [r3, #0]
  return result;
 8003094:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003098:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800309c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800309e:	fab3 f383 	clz	r3, r3
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	095b      	lsrs	r3, r3, #5
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	f043 0301 	orr.w	r3, r3, #1
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d102      	bne.n	80030b8 <HAL_RCC_OscConfig+0xe2c>
 80030b2:	4b54      	ldr	r3, [pc, #336]	; (8003204 <HAL_RCC_OscConfig+0xf78>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	e027      	b.n	8003108 <HAL_RCC_OscConfig+0xe7c>
 80030b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030bc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80030c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ca:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	fa93 f2a3 	rbit	r2, r3
 80030d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80030e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	fa93 f2a3 	rbit	r2, r3
 80030fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030fe:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	4b3f      	ldr	r3, [pc, #252]	; (8003204 <HAL_RCC_OscConfig+0xf78>)
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800310c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003110:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003114:	6011      	str	r1, [r2, #0]
 8003116:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800311a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800311e:	6812      	ldr	r2, [r2, #0]
 8003120:	fa92 f1a2 	rbit	r1, r2
 8003124:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003128:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800312c:	6011      	str	r1, [r2, #0]
  return result;
 800312e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003132:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003136:	6812      	ldr	r2, [r2, #0]
 8003138:	fab2 f282 	clz	r2, r2
 800313c:	b2d2      	uxtb	r2, r2
 800313e:	f042 0220 	orr.w	r2, r2, #32
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	f002 021f 	and.w	r2, r2, #31
 8003148:	2101      	movs	r1, #1
 800314a:	fa01 f202 	lsl.w	r2, r1, r2
 800314e:	4013      	ands	r3, r2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d082      	beq.n	800305a <HAL_RCC_OscConfig+0xdce>
 8003154:	e0cf      	b.n	80032f6 <HAL_RCC_OscConfig+0x106a>
 8003156:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800315a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800315e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003162:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003164:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003168:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	fa93 f2a3 	rbit	r2, r3
 8003172:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003176:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800317a:	601a      	str	r2, [r3, #0]
  return result;
 800317c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003180:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003184:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003186:	fab3 f383 	clz	r3, r3
 800318a:	b2db      	uxtb	r3, r3
 800318c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003190:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	461a      	mov	r2, r3
 8003198:	2300      	movs	r3, #0
 800319a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800319c:	f7fe fd62 	bl	8001c64 <HAL_GetTick>
 80031a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031a4:	e009      	b.n	80031ba <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031a6:	f7fe fd5d 	bl	8001c64 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e09e      	b.n	80032f8 <HAL_RCC_OscConfig+0x106c>
 80031ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031be:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80031c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031cc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	fa93 f2a3 	rbit	r2, r3
 80031d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031da:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80031de:	601a      	str	r2, [r3, #0]
  return result;
 80031e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80031e8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031ea:	fab3 f383 	clz	r3, r3
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	095b      	lsrs	r3, r3, #5
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	f043 0301 	orr.w	r3, r3, #1
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d104      	bne.n	8003208 <HAL_RCC_OscConfig+0xf7c>
 80031fe:	4b01      	ldr	r3, [pc, #4]	; (8003204 <HAL_RCC_OscConfig+0xf78>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	e029      	b.n	8003258 <HAL_RCC_OscConfig+0xfcc>
 8003204:	40021000 	.word	0x40021000
 8003208:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800320c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003210:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003214:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003216:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800321a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	fa93 f2a3 	rbit	r2, r3
 8003224:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003228:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003232:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003236:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003240:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	fa93 f2a3 	rbit	r2, r3
 800324a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800324e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	4b2b      	ldr	r3, [pc, #172]	; (8003304 <HAL_RCC_OscConfig+0x1078>)
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800325c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003260:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003264:	6011      	str	r1, [r2, #0]
 8003266:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800326a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800326e:	6812      	ldr	r2, [r2, #0]
 8003270:	fa92 f1a2 	rbit	r1, r2
 8003274:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003278:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800327c:	6011      	str	r1, [r2, #0]
  return result;
 800327e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003282:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003286:	6812      	ldr	r2, [r2, #0]
 8003288:	fab2 f282 	clz	r2, r2
 800328c:	b2d2      	uxtb	r2, r2
 800328e:	f042 0220 	orr.w	r2, r2, #32
 8003292:	b2d2      	uxtb	r2, r2
 8003294:	f002 021f 	and.w	r2, r2, #31
 8003298:	2101      	movs	r1, #1
 800329a:	fa01 f202 	lsl.w	r2, r1, r2
 800329e:	4013      	ands	r3, r2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d180      	bne.n	80031a6 <HAL_RCC_OscConfig+0xf1a>
 80032a4:	e027      	b.n	80032f6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d101      	bne.n	80032ba <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e01e      	b.n	80032f8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032ba:	4b12      	ldr	r3, [pc, #72]	; (8003304 <HAL_RCC_OscConfig+0x1078>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80032c2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80032c6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80032ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d10b      	bne.n	80032f2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80032da:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80032de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80032e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d001      	beq.n	80032f6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e000      	b.n	80032f8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	40021000 	.word	0x40021000

08003308 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b09e      	sub	sp, #120	; 0x78
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003312:	2300      	movs	r3, #0
 8003314:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e162      	b.n	80035e6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003320:	4b90      	ldr	r3, [pc, #576]	; (8003564 <HAL_RCC_ClockConfig+0x25c>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	683a      	ldr	r2, [r7, #0]
 800332a:	429a      	cmp	r2, r3
 800332c:	d910      	bls.n	8003350 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800332e:	4b8d      	ldr	r3, [pc, #564]	; (8003564 <HAL_RCC_ClockConfig+0x25c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f023 0207 	bic.w	r2, r3, #7
 8003336:	498b      	ldr	r1, [pc, #556]	; (8003564 <HAL_RCC_ClockConfig+0x25c>)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	4313      	orrs	r3, r2
 800333c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800333e:	4b89      	ldr	r3, [pc, #548]	; (8003564 <HAL_RCC_ClockConfig+0x25c>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	429a      	cmp	r2, r3
 800334a:	d001      	beq.n	8003350 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e14a      	b.n	80035e6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d008      	beq.n	800336e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800335c:	4b82      	ldr	r3, [pc, #520]	; (8003568 <HAL_RCC_ClockConfig+0x260>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	497f      	ldr	r1, [pc, #508]	; (8003568 <HAL_RCC_ClockConfig+0x260>)
 800336a:	4313      	orrs	r3, r2
 800336c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	2b00      	cmp	r3, #0
 8003378:	f000 80dc 	beq.w	8003534 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d13c      	bne.n	80033fe <HAL_RCC_ClockConfig+0xf6>
 8003384:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003388:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800338c:	fa93 f3a3 	rbit	r3, r3
 8003390:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003392:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003394:	fab3 f383 	clz	r3, r3
 8003398:	b2db      	uxtb	r3, r3
 800339a:	095b      	lsrs	r3, r3, #5
 800339c:	b2db      	uxtb	r3, r3
 800339e:	f043 0301 	orr.w	r3, r3, #1
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d102      	bne.n	80033ae <HAL_RCC_ClockConfig+0xa6>
 80033a8:	4b6f      	ldr	r3, [pc, #444]	; (8003568 <HAL_RCC_ClockConfig+0x260>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	e00f      	b.n	80033ce <HAL_RCC_ClockConfig+0xc6>
 80033ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033b2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033b6:	fa93 f3a3 	rbit	r3, r3
 80033ba:	667b      	str	r3, [r7, #100]	; 0x64
 80033bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033c0:	663b      	str	r3, [r7, #96]	; 0x60
 80033c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033c4:	fa93 f3a3 	rbit	r3, r3
 80033c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033ca:	4b67      	ldr	r3, [pc, #412]	; (8003568 <HAL_RCC_ClockConfig+0x260>)
 80033cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033d2:	65ba      	str	r2, [r7, #88]	; 0x58
 80033d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033d6:	fa92 f2a2 	rbit	r2, r2
 80033da:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80033dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80033de:	fab2 f282 	clz	r2, r2
 80033e2:	b2d2      	uxtb	r2, r2
 80033e4:	f042 0220 	orr.w	r2, r2, #32
 80033e8:	b2d2      	uxtb	r2, r2
 80033ea:	f002 021f 	and.w	r2, r2, #31
 80033ee:	2101      	movs	r1, #1
 80033f0:	fa01 f202 	lsl.w	r2, r1, r2
 80033f4:	4013      	ands	r3, r2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d17b      	bne.n	80034f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e0f3      	b.n	80035e6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2b02      	cmp	r3, #2
 8003404:	d13c      	bne.n	8003480 <HAL_RCC_ClockConfig+0x178>
 8003406:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800340a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800340e:	fa93 f3a3 	rbit	r3, r3
 8003412:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003416:	fab3 f383 	clz	r3, r3
 800341a:	b2db      	uxtb	r3, r3
 800341c:	095b      	lsrs	r3, r3, #5
 800341e:	b2db      	uxtb	r3, r3
 8003420:	f043 0301 	orr.w	r3, r3, #1
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b01      	cmp	r3, #1
 8003428:	d102      	bne.n	8003430 <HAL_RCC_ClockConfig+0x128>
 800342a:	4b4f      	ldr	r3, [pc, #316]	; (8003568 <HAL_RCC_ClockConfig+0x260>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	e00f      	b.n	8003450 <HAL_RCC_ClockConfig+0x148>
 8003430:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003434:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003436:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003438:	fa93 f3a3 	rbit	r3, r3
 800343c:	647b      	str	r3, [r7, #68]	; 0x44
 800343e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003442:	643b      	str	r3, [r7, #64]	; 0x40
 8003444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003446:	fa93 f3a3 	rbit	r3, r3
 800344a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800344c:	4b46      	ldr	r3, [pc, #280]	; (8003568 <HAL_RCC_ClockConfig+0x260>)
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003454:	63ba      	str	r2, [r7, #56]	; 0x38
 8003456:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003458:	fa92 f2a2 	rbit	r2, r2
 800345c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800345e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003460:	fab2 f282 	clz	r2, r2
 8003464:	b2d2      	uxtb	r2, r2
 8003466:	f042 0220 	orr.w	r2, r2, #32
 800346a:	b2d2      	uxtb	r2, r2
 800346c:	f002 021f 	and.w	r2, r2, #31
 8003470:	2101      	movs	r1, #1
 8003472:	fa01 f202 	lsl.w	r2, r1, r2
 8003476:	4013      	ands	r3, r2
 8003478:	2b00      	cmp	r3, #0
 800347a:	d13a      	bne.n	80034f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e0b2      	b.n	80035e6 <HAL_RCC_ClockConfig+0x2de>
 8003480:	2302      	movs	r3, #2
 8003482:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003486:	fa93 f3a3 	rbit	r3, r3
 800348a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800348c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800348e:	fab3 f383 	clz	r3, r3
 8003492:	b2db      	uxtb	r3, r3
 8003494:	095b      	lsrs	r3, r3, #5
 8003496:	b2db      	uxtb	r3, r3
 8003498:	f043 0301 	orr.w	r3, r3, #1
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d102      	bne.n	80034a8 <HAL_RCC_ClockConfig+0x1a0>
 80034a2:	4b31      	ldr	r3, [pc, #196]	; (8003568 <HAL_RCC_ClockConfig+0x260>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	e00d      	b.n	80034c4 <HAL_RCC_ClockConfig+0x1bc>
 80034a8:	2302      	movs	r3, #2
 80034aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ae:	fa93 f3a3 	rbit	r3, r3
 80034b2:	627b      	str	r3, [r7, #36]	; 0x24
 80034b4:	2302      	movs	r3, #2
 80034b6:	623b      	str	r3, [r7, #32]
 80034b8:	6a3b      	ldr	r3, [r7, #32]
 80034ba:	fa93 f3a3 	rbit	r3, r3
 80034be:	61fb      	str	r3, [r7, #28]
 80034c0:	4b29      	ldr	r3, [pc, #164]	; (8003568 <HAL_RCC_ClockConfig+0x260>)
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	2202      	movs	r2, #2
 80034c6:	61ba      	str	r2, [r7, #24]
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	fa92 f2a2 	rbit	r2, r2
 80034ce:	617a      	str	r2, [r7, #20]
  return result;
 80034d0:	697a      	ldr	r2, [r7, #20]
 80034d2:	fab2 f282 	clz	r2, r2
 80034d6:	b2d2      	uxtb	r2, r2
 80034d8:	f042 0220 	orr.w	r2, r2, #32
 80034dc:	b2d2      	uxtb	r2, r2
 80034de:	f002 021f 	and.w	r2, r2, #31
 80034e2:	2101      	movs	r1, #1
 80034e4:	fa01 f202 	lsl.w	r2, r1, r2
 80034e8:	4013      	ands	r3, r2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e079      	b.n	80035e6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034f2:	4b1d      	ldr	r3, [pc, #116]	; (8003568 <HAL_RCC_ClockConfig+0x260>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f023 0203 	bic.w	r2, r3, #3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	491a      	ldr	r1, [pc, #104]	; (8003568 <HAL_RCC_ClockConfig+0x260>)
 8003500:	4313      	orrs	r3, r2
 8003502:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003504:	f7fe fbae 	bl	8001c64 <HAL_GetTick>
 8003508:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800350a:	e00a      	b.n	8003522 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800350c:	f7fe fbaa 	bl	8001c64 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	f241 3288 	movw	r2, #5000	; 0x1388
 800351a:	4293      	cmp	r3, r2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e061      	b.n	80035e6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003522:	4b11      	ldr	r3, [pc, #68]	; (8003568 <HAL_RCC_ClockConfig+0x260>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f003 020c 	and.w	r2, r3, #12
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	429a      	cmp	r2, r3
 8003532:	d1eb      	bne.n	800350c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003534:	4b0b      	ldr	r3, [pc, #44]	; (8003564 <HAL_RCC_ClockConfig+0x25c>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0307 	and.w	r3, r3, #7
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	429a      	cmp	r2, r3
 8003540:	d214      	bcs.n	800356c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003542:	4b08      	ldr	r3, [pc, #32]	; (8003564 <HAL_RCC_ClockConfig+0x25c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f023 0207 	bic.w	r2, r3, #7
 800354a:	4906      	ldr	r1, [pc, #24]	; (8003564 <HAL_RCC_ClockConfig+0x25c>)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	4313      	orrs	r3, r2
 8003550:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003552:	4b04      	ldr	r3, [pc, #16]	; (8003564 <HAL_RCC_ClockConfig+0x25c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	429a      	cmp	r2, r3
 800355e:	d005      	beq.n	800356c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e040      	b.n	80035e6 <HAL_RCC_ClockConfig+0x2de>
 8003564:	40022000 	.word	0x40022000
 8003568:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0304 	and.w	r3, r3, #4
 8003574:	2b00      	cmp	r3, #0
 8003576:	d008      	beq.n	800358a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003578:	4b1d      	ldr	r3, [pc, #116]	; (80035f0 <HAL_RCC_ClockConfig+0x2e8>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	491a      	ldr	r1, [pc, #104]	; (80035f0 <HAL_RCC_ClockConfig+0x2e8>)
 8003586:	4313      	orrs	r3, r2
 8003588:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b00      	cmp	r3, #0
 8003594:	d009      	beq.n	80035aa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003596:	4b16      	ldr	r3, [pc, #88]	; (80035f0 <HAL_RCC_ClockConfig+0x2e8>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	4912      	ldr	r1, [pc, #72]	; (80035f0 <HAL_RCC_ClockConfig+0x2e8>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80035aa:	f000 f829 	bl	8003600 <HAL_RCC_GetSysClockFreq>
 80035ae:	4601      	mov	r1, r0
 80035b0:	4b0f      	ldr	r3, [pc, #60]	; (80035f0 <HAL_RCC_ClockConfig+0x2e8>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035b8:	22f0      	movs	r2, #240	; 0xf0
 80035ba:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	fa92 f2a2 	rbit	r2, r2
 80035c2:	60fa      	str	r2, [r7, #12]
  return result;
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	fab2 f282 	clz	r2, r2
 80035ca:	b2d2      	uxtb	r2, r2
 80035cc:	40d3      	lsrs	r3, r2
 80035ce:	4a09      	ldr	r2, [pc, #36]	; (80035f4 <HAL_RCC_ClockConfig+0x2ec>)
 80035d0:	5cd3      	ldrb	r3, [r2, r3]
 80035d2:	fa21 f303 	lsr.w	r3, r1, r3
 80035d6:	4a08      	ldr	r2, [pc, #32]	; (80035f8 <HAL_RCC_ClockConfig+0x2f0>)
 80035d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80035da:	4b08      	ldr	r3, [pc, #32]	; (80035fc <HAL_RCC_ClockConfig+0x2f4>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4618      	mov	r0, r3
 80035e0:	f7fe fa00 	bl	80019e4 <HAL_InitTick>
  
  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3778      	adds	r7, #120	; 0x78
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40021000 	.word	0x40021000
 80035f4:	08009cb4 	.word	0x08009cb4
 80035f8:	20000008 	.word	0x20000008
 80035fc:	2000000c 	.word	0x2000000c

08003600 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003600:	b480      	push	{r7}
 8003602:	b08b      	sub	sp, #44	; 0x2c
 8003604:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003606:	2300      	movs	r3, #0
 8003608:	61fb      	str	r3, [r7, #28]
 800360a:	2300      	movs	r3, #0
 800360c:	61bb      	str	r3, [r7, #24]
 800360e:	2300      	movs	r3, #0
 8003610:	627b      	str	r3, [r7, #36]	; 0x24
 8003612:	2300      	movs	r3, #0
 8003614:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003616:	2300      	movs	r3, #0
 8003618:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800361a:	4b29      	ldr	r3, [pc, #164]	; (80036c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	f003 030c 	and.w	r3, r3, #12
 8003626:	2b04      	cmp	r3, #4
 8003628:	d002      	beq.n	8003630 <HAL_RCC_GetSysClockFreq+0x30>
 800362a:	2b08      	cmp	r3, #8
 800362c:	d003      	beq.n	8003636 <HAL_RCC_GetSysClockFreq+0x36>
 800362e:	e03c      	b.n	80036aa <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003630:	4b24      	ldr	r3, [pc, #144]	; (80036c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003632:	623b      	str	r3, [r7, #32]
      break;
 8003634:	e03c      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800363c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003640:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003642:	68ba      	ldr	r2, [r7, #8]
 8003644:	fa92 f2a2 	rbit	r2, r2
 8003648:	607a      	str	r2, [r7, #4]
  return result;
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	fab2 f282 	clz	r2, r2
 8003650:	b2d2      	uxtb	r2, r2
 8003652:	40d3      	lsrs	r3, r2
 8003654:	4a1c      	ldr	r2, [pc, #112]	; (80036c8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003656:	5cd3      	ldrb	r3, [r2, r3]
 8003658:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800365a:	4b19      	ldr	r3, [pc, #100]	; (80036c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800365c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365e:	f003 030f 	and.w	r3, r3, #15
 8003662:	220f      	movs	r2, #15
 8003664:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	fa92 f2a2 	rbit	r2, r2
 800366c:	60fa      	str	r2, [r7, #12]
  return result;
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	fab2 f282 	clz	r2, r2
 8003674:	b2d2      	uxtb	r2, r2
 8003676:	40d3      	lsrs	r3, r2
 8003678:	4a14      	ldr	r2, [pc, #80]	; (80036cc <HAL_RCC_GetSysClockFreq+0xcc>)
 800367a:	5cd3      	ldrb	r3, [r2, r3]
 800367c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d008      	beq.n	800369a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003688:	4a0e      	ldr	r2, [pc, #56]	; (80036c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	fb02 f303 	mul.w	r3, r2, r3
 8003696:	627b      	str	r3, [r7, #36]	; 0x24
 8003698:	e004      	b.n	80036a4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	4a0c      	ldr	r2, [pc, #48]	; (80036d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800369e:	fb02 f303 	mul.w	r3, r2, r3
 80036a2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80036a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a6:	623b      	str	r3, [r7, #32]
      break;
 80036a8:	e002      	b.n	80036b0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036aa:	4b06      	ldr	r3, [pc, #24]	; (80036c4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80036ac:	623b      	str	r3, [r7, #32]
      break;
 80036ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036b0:	6a3b      	ldr	r3, [r7, #32]
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	372c      	adds	r7, #44	; 0x2c
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	40021000 	.word	0x40021000
 80036c4:	007a1200 	.word	0x007a1200
 80036c8:	08009ccc 	.word	0x08009ccc
 80036cc:	08009cdc 	.word	0x08009cdc
 80036d0:	003d0900 	.word	0x003d0900

080036d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036d8:	4b03      	ldr	r3, [pc, #12]	; (80036e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80036da:	681b      	ldr	r3, [r3, #0]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	20000008 	.word	0x20000008

080036ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80036f2:	f7ff ffef 	bl	80036d4 <HAL_RCC_GetHCLKFreq>
 80036f6:	4601      	mov	r1, r0
 80036f8:	4b0b      	ldr	r3, [pc, #44]	; (8003728 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003700:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003704:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	fa92 f2a2 	rbit	r2, r2
 800370c:	603a      	str	r2, [r7, #0]
  return result;
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	fab2 f282 	clz	r2, r2
 8003714:	b2d2      	uxtb	r2, r2
 8003716:	40d3      	lsrs	r3, r2
 8003718:	4a04      	ldr	r2, [pc, #16]	; (800372c <HAL_RCC_GetPCLK1Freq+0x40>)
 800371a:	5cd3      	ldrb	r3, [r2, r3]
 800371c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003720:	4618      	mov	r0, r3
 8003722:	3708      	adds	r7, #8
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	40021000 	.word	0x40021000
 800372c:	08009cc4 	.word	0x08009cc4

08003730 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003736:	f7ff ffcd 	bl	80036d4 <HAL_RCC_GetHCLKFreq>
 800373a:	4601      	mov	r1, r0
 800373c:	4b0b      	ldr	r3, [pc, #44]	; (800376c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003744:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003748:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	fa92 f2a2 	rbit	r2, r2
 8003750:	603a      	str	r2, [r7, #0]
  return result;
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	fab2 f282 	clz	r2, r2
 8003758:	b2d2      	uxtb	r2, r2
 800375a:	40d3      	lsrs	r3, r2
 800375c:	4a04      	ldr	r2, [pc, #16]	; (8003770 <HAL_RCC_GetPCLK2Freq+0x40>)
 800375e:	5cd3      	ldrb	r3, [r2, r3]
 8003760:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003764:	4618      	mov	r0, r3
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	40021000 	.word	0x40021000
 8003770:	08009cc4 	.word	0x08009cc4

08003774 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	220f      	movs	r2, #15
 8003782:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003784:	4b12      	ldr	r3, [pc, #72]	; (80037d0 <HAL_RCC_GetClockConfig+0x5c>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f003 0203 	and.w	r2, r3, #3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003790:	4b0f      	ldr	r3, [pc, #60]	; (80037d0 <HAL_RCC_GetClockConfig+0x5c>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800379c:	4b0c      	ldr	r3, [pc, #48]	; (80037d0 <HAL_RCC_GetClockConfig+0x5c>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80037a8:	4b09      	ldr	r3, [pc, #36]	; (80037d0 <HAL_RCC_GetClockConfig+0x5c>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	08db      	lsrs	r3, r3, #3
 80037ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80037b6:	4b07      	ldr	r3, [pc, #28]	; (80037d4 <HAL_RCC_GetClockConfig+0x60>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0207 	and.w	r2, r3, #7
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	601a      	str	r2, [r3, #0]
}
 80037c2:	bf00      	nop
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	40021000 	.word	0x40021000
 80037d4:	40022000 	.word	0x40022000

080037d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e09d      	b.n	8003926 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d108      	bne.n	8003804 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037fa:	d009      	beq.n	8003810 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	61da      	str	r2, [r3, #28]
 8003802:	e005      	b.n	8003810 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d106      	bne.n	8003830 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7fe f84c 	bl	80018c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2202      	movs	r2, #2
 8003834:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003846:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003850:	d902      	bls.n	8003858 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003852:	2300      	movs	r3, #0
 8003854:	60fb      	str	r3, [r7, #12]
 8003856:	e002      	b.n	800385e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800385c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003866:	d007      	beq.n	8003878 <HAL_SPI_Init+0xa0>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003870:	d002      	beq.n	8003878 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003888:	431a      	orrs	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	431a      	orrs	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	431a      	orrs	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038a6:	431a      	orrs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	69db      	ldr	r3, [r3, #28]
 80038ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038b0:	431a      	orrs	r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ba:	ea42 0103 	orr.w	r1, r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	0c1b      	lsrs	r3, r3, #16
 80038d4:	f003 0204 	and.w	r2, r3, #4
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038dc:	f003 0310 	and.w	r3, r3, #16
 80038e0:	431a      	orrs	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	431a      	orrs	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80038f4:	ea42 0103 	orr.w	r1, r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	69da      	ldr	r2, [r3, #28]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003914:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b088      	sub	sp, #32
 8003932:	af00      	add	r7, sp, #0
 8003934:	60f8      	str	r0, [r7, #12]
 8003936:	60b9      	str	r1, [r7, #8]
 8003938:	603b      	str	r3, [r7, #0]
 800393a:	4613      	mov	r3, r2
 800393c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800393e:	2300      	movs	r3, #0
 8003940:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003948:	2b01      	cmp	r3, #1
 800394a:	d101      	bne.n	8003950 <HAL_SPI_Transmit+0x22>
 800394c:	2302      	movs	r3, #2
 800394e:	e15f      	b.n	8003c10 <HAL_SPI_Transmit+0x2e2>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003958:	f7fe f984 	bl	8001c64 <HAL_GetTick>
 800395c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800395e:	88fb      	ldrh	r3, [r7, #6]
 8003960:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b01      	cmp	r3, #1
 800396c:	d002      	beq.n	8003974 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800396e:	2302      	movs	r3, #2
 8003970:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003972:	e148      	b.n	8003c06 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d002      	beq.n	8003980 <HAL_SPI_Transmit+0x52>
 800397a:	88fb      	ldrh	r3, [r7, #6]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d102      	bne.n	8003986 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003984:	e13f      	b.n	8003c06 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2203      	movs	r2, #3
 800398a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	88fa      	ldrh	r2, [r7, #6]
 800399e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	88fa      	ldrh	r2, [r7, #6]
 80039a4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039d0:	d10f      	bne.n	80039f2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039fc:	2b40      	cmp	r3, #64	; 0x40
 80039fe:	d007      	beq.n	8003a10 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a18:	d94f      	bls.n	8003aba <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d002      	beq.n	8003a28 <HAL_SPI_Transmit+0xfa>
 8003a22:	8afb      	ldrh	r3, [r7, #22]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d142      	bne.n	8003aae <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2c:	881a      	ldrh	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a38:	1c9a      	adds	r2, r3, #2
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	3b01      	subs	r3, #1
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a4c:	e02f      	b.n	8003aae <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d112      	bne.n	8003a82 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a60:	881a      	ldrh	r2, [r3, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6c:	1c9a      	adds	r2, r3, #2
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a80:	e015      	b.n	8003aae <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a82:	f7fe f8ef 	bl	8001c64 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d803      	bhi.n	8003a9a <HAL_SPI_Transmit+0x16c>
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a98:	d102      	bne.n	8003aa0 <HAL_SPI_Transmit+0x172>
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d106      	bne.n	8003aae <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003aac:	e0ab      	b.n	8003c06 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1ca      	bne.n	8003a4e <HAL_SPI_Transmit+0x120>
 8003ab8:	e080      	b.n	8003bbc <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d002      	beq.n	8003ac8 <HAL_SPI_Transmit+0x19a>
 8003ac2:	8afb      	ldrh	r3, [r7, #22]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d174      	bne.n	8003bb2 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d912      	bls.n	8003af8 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad6:	881a      	ldrh	r2, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae2:	1c9a      	adds	r2, r3, #2
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	3b02      	subs	r3, #2
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003af6:	e05c      	b.n	8003bb2 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	330c      	adds	r3, #12
 8003b02:	7812      	ldrb	r2, [r2, #0]
 8003b04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0a:	1c5a      	adds	r2, r3, #1
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	3b01      	subs	r3, #1
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003b1e:	e048      	b.n	8003bb2 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d12b      	bne.n	8003b86 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d912      	bls.n	8003b5e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3c:	881a      	ldrh	r2, [r3, #0]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b48:	1c9a      	adds	r2, r3, #2
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	3b02      	subs	r3, #2
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b5c:	e029      	b.n	8003bb2 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	330c      	adds	r3, #12
 8003b68:	7812      	ldrb	r2, [r2, #0]
 8003b6a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b70:	1c5a      	adds	r2, r3, #1
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b84:	e015      	b.n	8003bb2 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b86:	f7fe f86d 	bl	8001c64 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d803      	bhi.n	8003b9e <HAL_SPI_Transmit+0x270>
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b9c:	d102      	bne.n	8003ba4 <HAL_SPI_Transmit+0x276>
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d106      	bne.n	8003bb2 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003bb0:	e029      	b.n	8003c06 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1b1      	bne.n	8003b20 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	6839      	ldr	r1, [r7, #0]
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f000 fcf9 	bl	80045b8 <SPI_EndRxTxTransaction>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d002      	beq.n	8003bd2 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10a      	bne.n	8003bf0 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bda:	2300      	movs	r3, #0
 8003bdc:	613b      	str	r3, [r7, #16]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	613b      	str	r3, [r7, #16]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	613b      	str	r3, [r7, #16]
 8003bee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d002      	beq.n	8003bfe <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	77fb      	strb	r3, [r7, #31]
 8003bfc:	e003      	b.n	8003c06 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003c0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3720      	adds	r7, #32
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b088      	sub	sp, #32
 8003c1c:	af02      	add	r7, sp, #8
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	603b      	str	r3, [r7, #0]
 8003c24:	4613      	mov	r3, r2
 8003c26:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d002      	beq.n	8003c3e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003c38:	2302      	movs	r3, #2
 8003c3a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c3c:	e11a      	b.n	8003e74 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c46:	d112      	bne.n	8003c6e <HAL_SPI_Receive+0x56>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d10e      	bne.n	8003c6e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2204      	movs	r2, #4
 8003c54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003c58:	88fa      	ldrh	r2, [r7, #6]
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	68b9      	ldr	r1, [r7, #8]
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f000 f90e 	bl	8003e86 <HAL_SPI_TransmitReceive>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	e107      	b.n	8003e7e <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d101      	bne.n	8003c7c <HAL_SPI_Receive+0x64>
 8003c78:	2302      	movs	r3, #2
 8003c7a:	e100      	b.n	8003e7e <HAL_SPI_Receive+0x266>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c84:	f7fd ffee 	bl	8001c64 <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d002      	beq.n	8003c96 <HAL_SPI_Receive+0x7e>
 8003c90:	88fb      	ldrh	r3, [r7, #6]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d102      	bne.n	8003c9c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003c9a:	e0eb      	b.n	8003e74 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2204      	movs	r2, #4
 8003ca0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	88fa      	ldrh	r2, [r7, #6]
 8003cb4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	88fa      	ldrh	r2, [r7, #6]
 8003cbc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ce6:	d908      	bls.n	8003cfa <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003cf6:	605a      	str	r2, [r3, #4]
 8003cf8:	e007      	b.n	8003d0a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	685a      	ldr	r2, [r3, #4]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d08:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d12:	d10f      	bne.n	8003d34 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d22:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d32:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d3e:	2b40      	cmp	r3, #64	; 0x40
 8003d40:	d007      	beq.n	8003d52 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d50:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d5a:	d86f      	bhi.n	8003e3c <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003d5c:	e034      	b.n	8003dc8 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d117      	bne.n	8003d9c <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f103 020c 	add.w	r2, r3, #12
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d78:	7812      	ldrb	r2, [r2, #0]
 8003d7a:	b2d2      	uxtb	r2, r2
 8003d7c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	1c5a      	adds	r2, r3, #1
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	3b01      	subs	r3, #1
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003d9a:	e015      	b.n	8003dc8 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d9c:	f7fd ff62 	bl	8001c64 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d803      	bhi.n	8003db4 <HAL_SPI_Receive+0x19c>
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db2:	d102      	bne.n	8003dba <HAL_SPI_Receive+0x1a2>
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d106      	bne.n	8003dc8 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003dc6:	e055      	b.n	8003e74 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1c4      	bne.n	8003d5e <HAL_SPI_Receive+0x146>
 8003dd4:	e038      	b.n	8003e48 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d115      	bne.n	8003e10 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68da      	ldr	r2, [r3, #12]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dee:	b292      	uxth	r2, r2
 8003df0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	1c9a      	adds	r2, r3, #2
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	3b01      	subs	r3, #1
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003e0e:	e015      	b.n	8003e3c <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e10:	f7fd ff28 	bl	8001c64 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d803      	bhi.n	8003e28 <HAL_SPI_Receive+0x210>
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e26:	d102      	bne.n	8003e2e <HAL_SPI_Receive+0x216>
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d106      	bne.n	8003e3c <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003e3a:	e01b      	b.n	8003e74 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1c6      	bne.n	8003dd6 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	6839      	ldr	r1, [r7, #0]
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f000 fb5b 	bl	8004508 <SPI_EndRxTransaction>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d002      	beq.n	8003e5e <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d002      	beq.n	8003e6c <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	75fb      	strb	r3, [r7, #23]
 8003e6a:	e003      	b.n	8003e74 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003e7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3718      	adds	r7, #24
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b08a      	sub	sp, #40	; 0x28
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	60f8      	str	r0, [r7, #12]
 8003e8e:	60b9      	str	r1, [r7, #8]
 8003e90:	607a      	str	r2, [r7, #4]
 8003e92:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003e94:	2301      	movs	r3, #1
 8003e96:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d101      	bne.n	8003eac <HAL_SPI_TransmitReceive+0x26>
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	e20a      	b.n	80042c2 <HAL_SPI_TransmitReceive+0x43c>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003eb4:	f7fd fed6 	bl	8001c64 <HAL_GetTick>
 8003eb8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ec0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003ec8:	887b      	ldrh	r3, [r7, #2]
 8003eca:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003ecc:	887b      	ldrh	r3, [r7, #2]
 8003ece:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ed0:	7efb      	ldrb	r3, [r7, #27]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d00e      	beq.n	8003ef4 <HAL_SPI_TransmitReceive+0x6e>
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003edc:	d106      	bne.n	8003eec <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d102      	bne.n	8003eec <HAL_SPI_TransmitReceive+0x66>
 8003ee6:	7efb      	ldrb	r3, [r7, #27]
 8003ee8:	2b04      	cmp	r3, #4
 8003eea:	d003      	beq.n	8003ef4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003eec:	2302      	movs	r3, #2
 8003eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003ef2:	e1e0      	b.n	80042b6 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d005      	beq.n	8003f06 <HAL_SPI_TransmitReceive+0x80>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d002      	beq.n	8003f06 <HAL_SPI_TransmitReceive+0x80>
 8003f00:	887b      	ldrh	r3, [r7, #2]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d103      	bne.n	8003f0e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003f0c:	e1d3      	b.n	80042b6 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b04      	cmp	r3, #4
 8003f18:	d003      	beq.n	8003f22 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2205      	movs	r2, #5
 8003f1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	887a      	ldrh	r2, [r7, #2]
 8003f32:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	887a      	ldrh	r2, [r7, #2]
 8003f3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	887a      	ldrh	r2, [r7, #2]
 8003f48:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	887a      	ldrh	r2, [r7, #2]
 8003f4e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f64:	d802      	bhi.n	8003f6c <HAL_SPI_TransmitReceive+0xe6>
 8003f66:	8a3b      	ldrh	r3, [r7, #16]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d908      	bls.n	8003f7e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f7a:	605a      	str	r2, [r3, #4]
 8003f7c:	e007      	b.n	8003f8e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f8c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f98:	2b40      	cmp	r3, #64	; 0x40
 8003f9a:	d007      	beq.n	8003fac <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003faa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003fb4:	f240 8081 	bls.w	80040ba <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d002      	beq.n	8003fc6 <HAL_SPI_TransmitReceive+0x140>
 8003fc0:	8a7b      	ldrh	r3, [r7, #18]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d16d      	bne.n	80040a2 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fca:	881a      	ldrh	r2, [r3, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd6:	1c9a      	adds	r2, r3, #2
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fea:	e05a      	b.n	80040a2 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d11b      	bne.n	8004032 <HAL_SPI_TransmitReceive+0x1ac>
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	2b00      	cmp	r3, #0
 8004002:	d016      	beq.n	8004032 <HAL_SPI_TransmitReceive+0x1ac>
 8004004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004006:	2b01      	cmp	r3, #1
 8004008:	d113      	bne.n	8004032 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400e:	881a      	ldrh	r2, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401a:	1c9a      	adds	r2, r3, #2
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004024:	b29b      	uxth	r3, r3
 8004026:	3b01      	subs	r3, #1
 8004028:	b29a      	uxth	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800402e:	2300      	movs	r3, #0
 8004030:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b01      	cmp	r3, #1
 800403e:	d11c      	bne.n	800407a <HAL_SPI_TransmitReceive+0x1f4>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004046:	b29b      	uxth	r3, r3
 8004048:	2b00      	cmp	r3, #0
 800404a:	d016      	beq.n	800407a <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68da      	ldr	r2, [r3, #12]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004056:	b292      	uxth	r2, r2
 8004058:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	1c9a      	adds	r2, r3, #2
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800406a:	b29b      	uxth	r3, r3
 800406c:	3b01      	subs	r3, #1
 800406e:	b29a      	uxth	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004076:	2301      	movs	r3, #1
 8004078:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800407a:	f7fd fdf3 	bl	8001c64 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004086:	429a      	cmp	r2, r3
 8004088:	d80b      	bhi.n	80040a2 <HAL_SPI_TransmitReceive+0x21c>
 800408a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004090:	d007      	beq.n	80040a2 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80040a0:	e109      	b.n	80042b6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d19f      	bne.n	8003fec <HAL_SPI_TransmitReceive+0x166>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d199      	bne.n	8003fec <HAL_SPI_TransmitReceive+0x166>
 80040b8:	e0e3      	b.n	8004282 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_SPI_TransmitReceive+0x244>
 80040c2:	8a7b      	ldrh	r3, [r7, #18]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	f040 80cf 	bne.w	8004268 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d912      	bls.n	80040fa <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d8:	881a      	ldrh	r2, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e4:	1c9a      	adds	r2, r3, #2
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	3b02      	subs	r3, #2
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80040f8:	e0b6      	b.n	8004268 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	330c      	adds	r3, #12
 8004104:	7812      	ldrb	r2, [r2, #0]
 8004106:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410c:	1c5a      	adds	r2, r3, #1
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004116:	b29b      	uxth	r3, r3
 8004118:	3b01      	subs	r3, #1
 800411a:	b29a      	uxth	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004120:	e0a2      	b.n	8004268 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b02      	cmp	r3, #2
 800412e:	d134      	bne.n	800419a <HAL_SPI_TransmitReceive+0x314>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004134:	b29b      	uxth	r3, r3
 8004136:	2b00      	cmp	r3, #0
 8004138:	d02f      	beq.n	800419a <HAL_SPI_TransmitReceive+0x314>
 800413a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413c:	2b01      	cmp	r3, #1
 800413e:	d12c      	bne.n	800419a <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004144:	b29b      	uxth	r3, r3
 8004146:	2b01      	cmp	r3, #1
 8004148:	d912      	bls.n	8004170 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414e:	881a      	ldrh	r2, [r3, #0]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415a:	1c9a      	adds	r2, r3, #2
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004164:	b29b      	uxth	r3, r3
 8004166:	3b02      	subs	r3, #2
 8004168:	b29a      	uxth	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800416e:	e012      	b.n	8004196 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	330c      	adds	r3, #12
 800417a:	7812      	ldrb	r2, [r2, #0]
 800417c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004182:	1c5a      	adds	r2, r3, #1
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800418c:	b29b      	uxth	r3, r3
 800418e:	3b01      	subs	r3, #1
 8004190:	b29a      	uxth	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004196:	2300      	movs	r3, #0
 8004198:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f003 0301 	and.w	r3, r3, #1
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d148      	bne.n	800423a <HAL_SPI_TransmitReceive+0x3b4>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d042      	beq.n	800423a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d923      	bls.n	8004208 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68da      	ldr	r2, [r3, #12]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	b292      	uxth	r2, r2
 80041cc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	1c9a      	adds	r2, r3, #2
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041de:	b29b      	uxth	r3, r3
 80041e0:	3b02      	subs	r3, #2
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d81f      	bhi.n	8004236 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004204:	605a      	str	r2, [r3, #4]
 8004206:	e016      	b.n	8004236 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f103 020c 	add.w	r2, r3, #12
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004214:	7812      	ldrb	r2, [r2, #0]
 8004216:	b2d2      	uxtb	r2, r2
 8004218:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421e:	1c5a      	adds	r2, r3, #1
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800422a:	b29b      	uxth	r3, r3
 800422c:	3b01      	subs	r3, #1
 800422e:	b29a      	uxth	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004236:	2301      	movs	r3, #1
 8004238:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800423a:	f7fd fd13 	bl	8001c64 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004246:	429a      	cmp	r2, r3
 8004248:	d803      	bhi.n	8004252 <HAL_SPI_TransmitReceive+0x3cc>
 800424a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004250:	d102      	bne.n	8004258 <HAL_SPI_TransmitReceive+0x3d2>
 8004252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004254:	2b00      	cmp	r3, #0
 8004256:	d107      	bne.n	8004268 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004266:	e026      	b.n	80042b6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800426c:	b29b      	uxth	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	f47f af57 	bne.w	8004122 <HAL_SPI_TransmitReceive+0x29c>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800427a:	b29b      	uxth	r3, r3
 800427c:	2b00      	cmp	r3, #0
 800427e:	f47f af50 	bne.w	8004122 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004282:	69fa      	ldr	r2, [r7, #28]
 8004284:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f000 f996 	bl	80045b8 <SPI_EndRxTxTransaction>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d005      	beq.n	800429e <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2220      	movs	r2, #32
 800429c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ac:	e003      	b.n	80042b6 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80042be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3728      	adds	r7, #40	; 0x28
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
	...

080042cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b088      	sub	sp, #32
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	603b      	str	r3, [r7, #0]
 80042d8:	4613      	mov	r3, r2
 80042da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80042dc:	f7fd fcc2 	bl	8001c64 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e4:	1a9b      	subs	r3, r3, r2
 80042e6:	683a      	ldr	r2, [r7, #0]
 80042e8:	4413      	add	r3, r2
 80042ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80042ec:	f7fd fcba 	bl	8001c64 <HAL_GetTick>
 80042f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80042f2:	4b39      	ldr	r3, [pc, #228]	; (80043d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	015b      	lsls	r3, r3, #5
 80042f8:	0d1b      	lsrs	r3, r3, #20
 80042fa:	69fa      	ldr	r2, [r7, #28]
 80042fc:	fb02 f303 	mul.w	r3, r2, r3
 8004300:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004302:	e054      	b.n	80043ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800430a:	d050      	beq.n	80043ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800430c:	f7fd fcaa 	bl	8001c64 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	69fa      	ldr	r2, [r7, #28]
 8004318:	429a      	cmp	r2, r3
 800431a:	d902      	bls.n	8004322 <SPI_WaitFlagStateUntilTimeout+0x56>
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d13d      	bne.n	800439e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	685a      	ldr	r2, [r3, #4]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004330:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800433a:	d111      	bne.n	8004360 <SPI_WaitFlagStateUntilTimeout+0x94>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004344:	d004      	beq.n	8004350 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800434e:	d107      	bne.n	8004360 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800435e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004364:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004368:	d10f      	bne.n	800438a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004378:	601a      	str	r2, [r3, #0]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004388:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e017      	b.n	80043ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80043a4:	2300      	movs	r3, #0
 80043a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	3b01      	subs	r3, #1
 80043ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	689a      	ldr	r2, [r3, #8]
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	4013      	ands	r3, r2
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	bf0c      	ite	eq
 80043be:	2301      	moveq	r3, #1
 80043c0:	2300      	movne	r3, #0
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	461a      	mov	r2, r3
 80043c6:	79fb      	ldrb	r3, [r7, #7]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d19b      	bne.n	8004304 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3720      	adds	r7, #32
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	20000008 	.word	0x20000008

080043dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b08a      	sub	sp, #40	; 0x28
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
 80043e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80043ea:	2300      	movs	r3, #0
 80043ec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80043ee:	f7fd fc39 	bl	8001c64 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f6:	1a9b      	subs	r3, r3, r2
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	4413      	add	r3, r2
 80043fc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80043fe:	f7fd fc31 	bl	8001c64 <HAL_GetTick>
 8004402:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	330c      	adds	r3, #12
 800440a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800440c:	4b3d      	ldr	r3, [pc, #244]	; (8004504 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	4613      	mov	r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	4413      	add	r3, r2
 8004416:	00da      	lsls	r2, r3, #3
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	0d1b      	lsrs	r3, r3, #20
 800441c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800441e:	fb02 f303 	mul.w	r3, r2, r3
 8004422:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004424:	e060      	b.n	80044e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800442c:	d107      	bne.n	800443e <SPI_WaitFifoStateUntilTimeout+0x62>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d104      	bne.n	800443e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	b2db      	uxtb	r3, r3
 800443a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800443c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004444:	d050      	beq.n	80044e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004446:	f7fd fc0d 	bl	8001c64 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	6a3b      	ldr	r3, [r7, #32]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004452:	429a      	cmp	r2, r3
 8004454:	d902      	bls.n	800445c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004458:	2b00      	cmp	r3, #0
 800445a:	d13d      	bne.n	80044d8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685a      	ldr	r2, [r3, #4]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800446a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004474:	d111      	bne.n	800449a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800447e:	d004      	beq.n	800448a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004488:	d107      	bne.n	800449a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004498:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044a2:	d10f      	bne.n	80044c4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044c2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e010      	b.n	80044fa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80044de:	2300      	movs	r3, #0
 80044e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	3b01      	subs	r3, #1
 80044e6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	689a      	ldr	r2, [r3, #8]
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	4013      	ands	r3, r2
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d196      	bne.n	8004426 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3728      	adds	r7, #40	; 0x28
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	20000008 	.word	0x20000008

08004508 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b086      	sub	sp, #24
 800450c:	af02      	add	r7, sp, #8
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800451c:	d111      	bne.n	8004542 <SPI_EndRxTransaction+0x3a>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004526:	d004      	beq.n	8004532 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004530:	d107      	bne.n	8004542 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004540:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	9300      	str	r3, [sp, #0]
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	2200      	movs	r2, #0
 800454a:	2180      	movs	r1, #128	; 0x80
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f7ff febd 	bl	80042cc <SPI_WaitFlagStateUntilTimeout>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d007      	beq.n	8004568 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800455c:	f043 0220 	orr.w	r2, r3, #32
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e023      	b.n	80045b0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004570:	d11d      	bne.n	80045ae <SPI_EndRxTransaction+0xa6>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800457a:	d004      	beq.n	8004586 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004584:	d113      	bne.n	80045ae <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	9300      	str	r3, [sp, #0]
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	2200      	movs	r2, #0
 800458e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f7ff ff22 	bl	80043dc <SPI_WaitFifoStateUntilTimeout>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d007      	beq.n	80045ae <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045a2:	f043 0220 	orr.w	r2, r3, #32
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e000      	b.n	80045b0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3710      	adds	r7, #16
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af02      	add	r7, sp, #8
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f7ff ff03 	bl	80043dc <SPI_WaitFifoStateUntilTimeout>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d007      	beq.n	80045ec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045e0:	f043 0220 	orr.w	r2, r3, #32
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e027      	b.n	800463c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	9300      	str	r3, [sp, #0]
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	2200      	movs	r2, #0
 80045f4:	2180      	movs	r1, #128	; 0x80
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f7ff fe68 	bl	80042cc <SPI_WaitFlagStateUntilTimeout>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d007      	beq.n	8004612 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004606:	f043 0220 	orr.w	r2, r3, #32
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e014      	b.n	800463c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	9300      	str	r3, [sp, #0]
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	2200      	movs	r2, #0
 800461a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f7ff fedc 	bl	80043dc <SPI_WaitFifoStateUntilTimeout>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d007      	beq.n	800463a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800462e:	f043 0220 	orr.w	r2, r3, #32
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e000      	b.n	800463c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3710      	adds	r7, #16
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d101      	bne.n	8004656 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e049      	b.n	80046ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d106      	bne.n	8004670 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 f841 	bl	80046f2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2202      	movs	r2, #2
 8004674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	3304      	adds	r3, #4
 8004680:	4619      	mov	r1, r3
 8004682:	4610      	mov	r0, r2
 8004684:	f000 f9dc 	bl	8004a40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3708      	adds	r7, #8
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80046f2:	b480      	push	{r7}
 80046f4:	b083      	sub	sp, #12
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80046fa:	bf00      	nop
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
	...

08004708 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b01      	cmp	r3, #1
 800471a:	d001      	beq.n	8004720 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e03b      	b.n	8004798 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2202      	movs	r2, #2
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68da      	ldr	r2, [r3, #12]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f042 0201 	orr.w	r2, r2, #1
 8004736:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a19      	ldr	r2, [pc, #100]	; (80047a4 <HAL_TIM_Base_Start_IT+0x9c>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d009      	beq.n	8004756 <HAL_TIM_Base_Start_IT+0x4e>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800474a:	d004      	beq.n	8004756 <HAL_TIM_Base_Start_IT+0x4e>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a15      	ldr	r2, [pc, #84]	; (80047a8 <HAL_TIM_Base_Start_IT+0xa0>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d115      	bne.n	8004782 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	689a      	ldr	r2, [r3, #8]
 800475c:	4b13      	ldr	r3, [pc, #76]	; (80047ac <HAL_TIM_Base_Start_IT+0xa4>)
 800475e:	4013      	ands	r3, r2
 8004760:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2b06      	cmp	r3, #6
 8004766:	d015      	beq.n	8004794 <HAL_TIM_Base_Start_IT+0x8c>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800476e:	d011      	beq.n	8004794 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f042 0201 	orr.w	r2, r2, #1
 800477e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004780:	e008      	b.n	8004794 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f042 0201 	orr.w	r2, r2, #1
 8004790:	601a      	str	r2, [r3, #0]
 8004792:	e000      	b.n	8004796 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004794:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3714      	adds	r7, #20
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr
 80047a4:	40012c00 	.word	0x40012c00
 80047a8:	40014000 	.word	0x40014000
 80047ac:	00010007 	.word	0x00010007

080047b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d122      	bne.n	800480c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d11b      	bne.n	800480c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f06f 0202 	mvn.w	r2, #2
 80047dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	f003 0303 	and.w	r3, r3, #3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d003      	beq.n	80047fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 f905 	bl	8004a02 <HAL_TIM_IC_CaptureCallback>
 80047f8:	e005      	b.n	8004806 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f8f7 	bl	80049ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 f908 	bl	8004a16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	f003 0304 	and.w	r3, r3, #4
 8004816:	2b04      	cmp	r3, #4
 8004818:	d122      	bne.n	8004860 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	f003 0304 	and.w	r3, r3, #4
 8004824:	2b04      	cmp	r3, #4
 8004826:	d11b      	bne.n	8004860 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f06f 0204 	mvn.w	r2, #4
 8004830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2202      	movs	r2, #2
 8004836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004842:	2b00      	cmp	r3, #0
 8004844:	d003      	beq.n	800484e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f8db 	bl	8004a02 <HAL_TIM_IC_CaptureCallback>
 800484c:	e005      	b.n	800485a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f8cd 	bl	80049ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 f8de 	bl	8004a16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	f003 0308 	and.w	r3, r3, #8
 800486a:	2b08      	cmp	r3, #8
 800486c:	d122      	bne.n	80048b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	f003 0308 	and.w	r3, r3, #8
 8004878:	2b08      	cmp	r3, #8
 800487a:	d11b      	bne.n	80048b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f06f 0208 	mvn.w	r2, #8
 8004884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2204      	movs	r2, #4
 800488a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	f003 0303 	and.w	r3, r3, #3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 f8b1 	bl	8004a02 <HAL_TIM_IC_CaptureCallback>
 80048a0:	e005      	b.n	80048ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f8a3 	bl	80049ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 f8b4 	bl	8004a16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	f003 0310 	and.w	r3, r3, #16
 80048be:	2b10      	cmp	r3, #16
 80048c0:	d122      	bne.n	8004908 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	f003 0310 	and.w	r3, r3, #16
 80048cc:	2b10      	cmp	r3, #16
 80048ce:	d11b      	bne.n	8004908 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f06f 0210 	mvn.w	r2, #16
 80048d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2208      	movs	r2, #8
 80048de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	69db      	ldr	r3, [r3, #28]
 80048e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f887 	bl	8004a02 <HAL_TIM_IC_CaptureCallback>
 80048f4:	e005      	b.n	8004902 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f879 	bl	80049ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 f88a 	bl	8004a16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b01      	cmp	r3, #1
 8004914:	d10e      	bne.n	8004934 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	f003 0301 	and.w	r3, r3, #1
 8004920:	2b01      	cmp	r3, #1
 8004922:	d107      	bne.n	8004934 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f06f 0201 	mvn.w	r2, #1
 800492c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f7fc ff8a 	bl	8001848 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800493e:	2b80      	cmp	r3, #128	; 0x80
 8004940:	d10e      	bne.n	8004960 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800494c:	2b80      	cmp	r3, #128	; 0x80
 800494e:	d107      	bne.n	8004960 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f8e8 	bl	8004b30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800496a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800496e:	d10e      	bne.n	800498e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800497a:	2b80      	cmp	r3, #128	; 0x80
 800497c:	d107      	bne.n	800498e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f8db 	bl	8004b44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004998:	2b40      	cmp	r3, #64	; 0x40
 800499a:	d10e      	bne.n	80049ba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a6:	2b40      	cmp	r3, #64	; 0x40
 80049a8:	d107      	bne.n	80049ba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 f838 	bl	8004a2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	f003 0320 	and.w	r3, r3, #32
 80049c4:	2b20      	cmp	r3, #32
 80049c6:	d10e      	bne.n	80049e6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	f003 0320 	and.w	r3, r3, #32
 80049d2:	2b20      	cmp	r3, #32
 80049d4:	d107      	bne.n	80049e6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f06f 0220 	mvn.w	r2, #32
 80049de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 f89b 	bl	8004b1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049e6:	bf00      	nop
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049ee:	b480      	push	{r7}
 80049f0:	b083      	sub	sp, #12
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049f6:	bf00      	nop
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr

08004a02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b083      	sub	sp, #12
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a0a:	bf00      	nop
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b083      	sub	sp, #12
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b083      	sub	sp, #12
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a32:	bf00      	nop
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
	...

08004a40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a2e      	ldr	r2, [pc, #184]	; (8004b0c <TIM_Base_SetConfig+0xcc>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d003      	beq.n	8004a60 <TIM_Base_SetConfig+0x20>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a5e:	d108      	bne.n	8004a72 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a25      	ldr	r2, [pc, #148]	; (8004b0c <TIM_Base_SetConfig+0xcc>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d00f      	beq.n	8004a9a <TIM_Base_SetConfig+0x5a>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a80:	d00b      	beq.n	8004a9a <TIM_Base_SetConfig+0x5a>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a22      	ldr	r2, [pc, #136]	; (8004b10 <TIM_Base_SetConfig+0xd0>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d007      	beq.n	8004a9a <TIM_Base_SetConfig+0x5a>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a21      	ldr	r2, [pc, #132]	; (8004b14 <TIM_Base_SetConfig+0xd4>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d003      	beq.n	8004a9a <TIM_Base_SetConfig+0x5a>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a20      	ldr	r2, [pc, #128]	; (8004b18 <TIM_Base_SetConfig+0xd8>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d108      	bne.n	8004aac <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	689a      	ldr	r2, [r3, #8]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a0e      	ldr	r2, [pc, #56]	; (8004b0c <TIM_Base_SetConfig+0xcc>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d00b      	beq.n	8004af0 <TIM_Base_SetConfig+0xb0>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a0d      	ldr	r2, [pc, #52]	; (8004b10 <TIM_Base_SetConfig+0xd0>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d007      	beq.n	8004af0 <TIM_Base_SetConfig+0xb0>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a0c      	ldr	r2, [pc, #48]	; (8004b14 <TIM_Base_SetConfig+0xd4>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d003      	beq.n	8004af0 <TIM_Base_SetConfig+0xb0>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a0b      	ldr	r2, [pc, #44]	; (8004b18 <TIM_Base_SetConfig+0xd8>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d103      	bne.n	8004af8 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	691a      	ldr	r2, [r3, #16]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	615a      	str	r2, [r3, #20]
}
 8004afe:	bf00      	nop
 8004b00:	3714      	adds	r7, #20
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	40012c00 	.word	0x40012c00
 8004b10:	40014000 	.word	0x40014000
 8004b14:	40014400 	.word	0x40014400
 8004b18:	40014800 	.word	0x40014800

08004b1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e040      	b.n	8004bec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d106      	bne.n	8004b80 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f7fc fee8 	bl	8001950 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2224      	movs	r2, #36	; 0x24
 8004b84:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 0201 	bic.w	r2, r2, #1
 8004b94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 fc68 	bl	800546c <UART_SetConfig>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d101      	bne.n	8004ba6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e022      	b.n	8004bec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d002      	beq.n	8004bb4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 fd92 	bl	80056d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685a      	ldr	r2, [r3, #4]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689a      	ldr	r2, [r3, #8]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f042 0201 	orr.w	r2, r2, #1
 8004be2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 fe19 	bl	800581c <UART_CheckIdleState>
 8004bea:	4603      	mov	r3, r0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3708      	adds	r7, #8
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b08a      	sub	sp, #40	; 0x28
 8004bf8:	af02      	add	r7, sp, #8
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	603b      	str	r3, [r7, #0]
 8004c00:	4613      	mov	r3, r2
 8004c02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c08:	2b20      	cmp	r3, #32
 8004c0a:	d178      	bne.n	8004cfe <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d002      	beq.n	8004c18 <HAL_UART_Transmit+0x24>
 8004c12:	88fb      	ldrh	r3, [r7, #6]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e071      	b.n	8004d00 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2221      	movs	r2, #33	; 0x21
 8004c28:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c2a:	f7fd f81b 	bl	8001c64 <HAL_GetTick>
 8004c2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	88fa      	ldrh	r2, [r7, #6]
 8004c34:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	88fa      	ldrh	r2, [r7, #6]
 8004c3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c48:	d108      	bne.n	8004c5c <HAL_UART_Transmit+0x68>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d104      	bne.n	8004c5c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004c52:	2300      	movs	r3, #0
 8004c54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	61bb      	str	r3, [r7, #24]
 8004c5a:	e003      	b.n	8004c64 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c60:	2300      	movs	r3, #0
 8004c62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c64:	e030      	b.n	8004cc8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	2180      	movs	r1, #128	; 0x80
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f000 fe7b 	bl	800596c <UART_WaitOnFlagUntilTimeout>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d004      	beq.n	8004c86 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e03c      	b.n	8004d00 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d10b      	bne.n	8004ca4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	881a      	ldrh	r2, [r3, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c98:	b292      	uxth	r2, r2
 8004c9a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	3302      	adds	r3, #2
 8004ca0:	61bb      	str	r3, [r7, #24]
 8004ca2:	e008      	b.n	8004cb6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	781a      	ldrb	r2, [r3, #0]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	b292      	uxth	r2, r2
 8004cae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1c8      	bne.n	8004c66 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	2140      	movs	r1, #64	; 0x40
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f000 fe44 	bl	800596c <UART_WaitOnFlagUntilTimeout>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d004      	beq.n	8004cf4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2220      	movs	r2, #32
 8004cee:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e005      	b.n	8004d00 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	e000      	b.n	8004d00 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004cfe:	2302      	movs	r3, #2
  }
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3720      	adds	r7, #32
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b08b      	sub	sp, #44	; 0x2c
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	4613      	mov	r3, r2
 8004d14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d1a:	2b20      	cmp	r3, #32
 8004d1c:	d147      	bne.n	8004dae <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d002      	beq.n	8004d2a <HAL_UART_Transmit_IT+0x22>
 8004d24:	88fb      	ldrh	r3, [r7, #6]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d101      	bne.n	8004d2e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e040      	b.n	8004db0 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	88fa      	ldrh	r2, [r7, #6]
 8004d38:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	88fa      	ldrh	r2, [r7, #6]
 8004d40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2221      	movs	r2, #33	; 0x21
 8004d56:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d60:	d107      	bne.n	8004d72 <HAL_UART_Transmit_IT+0x6a>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d103      	bne.n	8004d72 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	4a13      	ldr	r2, [pc, #76]	; (8004dbc <HAL_UART_Transmit_IT+0xb4>)
 8004d6e:	66da      	str	r2, [r3, #108]	; 0x6c
 8004d70:	e002      	b.n	8004d78 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	4a12      	ldr	r2, [pc, #72]	; (8004dc0 <HAL_UART_Transmit_IT+0xb8>)
 8004d76:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	e853 3f00 	ldrex	r3, [r3]
 8004d84:	613b      	str	r3, [r7, #16]
   return(result);
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	461a      	mov	r2, r3
 8004d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d96:	623b      	str	r3, [r7, #32]
 8004d98:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d9a:	69f9      	ldr	r1, [r7, #28]
 8004d9c:	6a3a      	ldr	r2, [r7, #32]
 8004d9e:	e841 2300 	strex	r3, r2, [r1]
 8004da2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1e6      	bne.n	8004d78 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8004daa:	2300      	movs	r3, #0
 8004dac:	e000      	b.n	8004db0 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8004dae:	2302      	movs	r3, #2
  }
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	372c      	adds	r7, #44	; 0x2c
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr
 8004dbc:	08005d75 	.word	0x08005d75
 8004dc0:	08005cbd 	.word	0x08005cbd

08004dc4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b08a      	sub	sp, #40	; 0x28
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	4613      	mov	r3, r2
 8004dd0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dd8:	2b20      	cmp	r3, #32
 8004dda:	d132      	bne.n	8004e42 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d002      	beq.n	8004de8 <HAL_UART_Receive_IT+0x24>
 8004de2:	88fb      	ldrh	r3, [r7, #6]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d101      	bne.n	8004dec <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e02b      	b.n	8004e44 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d018      	beq.n	8004e32 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	e853 3f00 	ldrex	r3, [r3]
 8004e0c:	613b      	str	r3, [r7, #16]
   return(result);
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e14:	627b      	str	r3, [r7, #36]	; 0x24
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1e:	623b      	str	r3, [r7, #32]
 8004e20:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e22:	69f9      	ldr	r1, [r7, #28]
 8004e24:	6a3a      	ldr	r2, [r7, #32]
 8004e26:	e841 2300 	strex	r3, r2, [r1]
 8004e2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1e6      	bne.n	8004e00 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004e32:	88fb      	ldrh	r3, [r7, #6]
 8004e34:	461a      	mov	r2, r3
 8004e36:	68b9      	ldr	r1, [r7, #8]
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f000 fdff 	bl	8005a3c <UART_Start_Receive_IT>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	e000      	b.n	8004e44 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004e42:	2302      	movs	r3, #2
  }
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3728      	adds	r7, #40	; 0x28
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b0ba      	sub	sp, #232	; 0xe8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	69db      	ldr	r3, [r3, #28]
 8004e5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004e72:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004e76:	f640 030f 	movw	r3, #2063	; 0x80f
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004e80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d115      	bne.n	8004eb4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e8c:	f003 0320 	and.w	r3, r3, #32
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00f      	beq.n	8004eb4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e98:	f003 0320 	and.w	r3, r3, #32
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d009      	beq.n	8004eb4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f000 82ab 	beq.w	8005400 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	4798      	blx	r3
      }
      return;
 8004eb2:	e2a5      	b.n	8005400 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004eb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f000 8117 	beq.w	80050ec <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004ebe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d106      	bne.n	8004ed8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004eca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004ece:	4b85      	ldr	r3, [pc, #532]	; (80050e4 <HAL_UART_IRQHandler+0x298>)
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f000 810a 	beq.w	80050ec <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004edc:	f003 0301 	and.w	r3, r3, #1
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d011      	beq.n	8004f08 <HAL_UART_IRQHandler+0xbc>
 8004ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00b      	beq.n	8004f08 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004efe:	f043 0201 	orr.w	r2, r3, #1
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f0c:	f003 0302 	and.w	r3, r3, #2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d011      	beq.n	8004f38 <HAL_UART_IRQHandler+0xec>
 8004f14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f18:	f003 0301 	and.w	r3, r3, #1
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00b      	beq.n	8004f38 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2202      	movs	r2, #2
 8004f26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f2e:	f043 0204 	orr.w	r2, r3, #4
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f3c:	f003 0304 	and.w	r3, r3, #4
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d011      	beq.n	8004f68 <HAL_UART_IRQHandler+0x11c>
 8004f44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f48:	f003 0301 	and.w	r3, r3, #1
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00b      	beq.n	8004f68 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2204      	movs	r2, #4
 8004f56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f5e:	f043 0202 	orr.w	r2, r3, #2
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004f68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f6c:	f003 0308 	and.w	r3, r3, #8
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d017      	beq.n	8004fa4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f78:	f003 0320 	and.w	r3, r3, #32
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d105      	bne.n	8004f8c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004f80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f84:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00b      	beq.n	8004fa4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2208      	movs	r2, #8
 8004f92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f9a:	f043 0208 	orr.w	r2, r3, #8
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d012      	beq.n	8004fd6 <HAL_UART_IRQHandler+0x18a>
 8004fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00c      	beq.n	8004fd6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fc4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fcc:	f043 0220 	orr.w	r2, r3, #32
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f000 8211 	beq.w	8005404 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fe6:	f003 0320 	and.w	r3, r3, #32
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00d      	beq.n	800500a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ff2:	f003 0320 	and.w	r3, r3, #32
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d007      	beq.n	800500a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d003      	beq.n	800500a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005010:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800501e:	2b40      	cmp	r3, #64	; 0x40
 8005020:	d005      	beq.n	800502e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005022:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005026:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800502a:	2b00      	cmp	r3, #0
 800502c:	d04f      	beq.n	80050ce <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 fdca 	bl	8005bc8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800503e:	2b40      	cmp	r3, #64	; 0x40
 8005040:	d141      	bne.n	80050c6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	3308      	adds	r3, #8
 8005048:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005050:	e853 3f00 	ldrex	r3, [r3]
 8005054:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005058:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800505c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005060:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	3308      	adds	r3, #8
 800506a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800506e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005072:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005076:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800507a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800507e:	e841 2300 	strex	r3, r2, [r1]
 8005082:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005086:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1d9      	bne.n	8005042 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005092:	2b00      	cmp	r3, #0
 8005094:	d013      	beq.n	80050be <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800509a:	4a13      	ldr	r2, [pc, #76]	; (80050e8 <HAL_UART_IRQHandler+0x29c>)
 800509c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7fc ff29 	bl	8001efa <HAL_DMA_Abort_IT>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d017      	beq.n	80050de <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80050b8:	4610      	mov	r0, r2
 80050ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050bc:	e00f      	b.n	80050de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f9be 	bl	8005440 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050c4:	e00b      	b.n	80050de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 f9ba 	bl	8005440 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050cc:	e007      	b.n	80050de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f9b6 	bl	8005440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80050dc:	e192      	b.n	8005404 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050de:	bf00      	nop
    return;
 80050e0:	e190      	b.n	8005404 <HAL_UART_IRQHandler+0x5b8>
 80050e2:	bf00      	nop
 80050e4:	04000120 	.word	0x04000120
 80050e8:	08005c91 	.word	0x08005c91

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	f040 814b 	bne.w	800538c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80050f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050fa:	f003 0310 	and.w	r3, r3, #16
 80050fe:	2b00      	cmp	r3, #0
 8005100:	f000 8144 	beq.w	800538c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005108:	f003 0310 	and.w	r3, r3, #16
 800510c:	2b00      	cmp	r3, #0
 800510e:	f000 813d 	beq.w	800538c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2210      	movs	r2, #16
 8005118:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005124:	2b40      	cmp	r3, #64	; 0x40
 8005126:	f040 80b5 	bne.w	8005294 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005136:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800513a:	2b00      	cmp	r3, #0
 800513c:	f000 8164 	beq.w	8005408 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005146:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800514a:	429a      	cmp	r2, r3
 800514c:	f080 815c 	bcs.w	8005408 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005156:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	2b20      	cmp	r3, #32
 8005162:	f000 8086 	beq.w	8005272 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005172:	e853 3f00 	ldrex	r3, [r3]
 8005176:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800517a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800517e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005182:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	461a      	mov	r2, r3
 800518c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005190:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005194:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005198:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800519c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80051a0:	e841 2300 	strex	r3, r2, [r1]
 80051a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80051a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d1da      	bne.n	8005166 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	3308      	adds	r3, #8
 80051b6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051ba:	e853 3f00 	ldrex	r3, [r3]
 80051be:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80051c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051c2:	f023 0301 	bic.w	r3, r3, #1
 80051c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	3308      	adds	r3, #8
 80051d0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80051d4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80051d8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051da:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80051dc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80051e0:	e841 2300 	strex	r3, r2, [r1]
 80051e4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80051e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1e1      	bne.n	80051b0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	3308      	adds	r3, #8
 80051f2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051f6:	e853 3f00 	ldrex	r3, [r3]
 80051fa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80051fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005202:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	3308      	adds	r3, #8
 800520c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005210:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005212:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005214:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005216:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005218:	e841 2300 	strex	r3, r2, [r1]
 800521c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800521e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1e3      	bne.n	80051ec <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2220      	movs	r2, #32
 8005228:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005238:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800523a:	e853 3f00 	ldrex	r3, [r3]
 800523e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005240:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005242:	f023 0310 	bic.w	r3, r3, #16
 8005246:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	461a      	mov	r2, r3
 8005250:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005254:	65bb      	str	r3, [r7, #88]	; 0x58
 8005256:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005258:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800525a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800525c:	e841 2300 	strex	r3, r2, [r1]
 8005260:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005262:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1e4      	bne.n	8005232 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800526c:	4618      	mov	r0, r3
 800526e:	f7fc fe0b 	bl	8001e88 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2202      	movs	r2, #2
 8005276:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005284:	b29b      	uxth	r3, r3
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	b29b      	uxth	r3, r3
 800528a:	4619      	mov	r1, r3
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 f8e1 	bl	8005454 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005292:	e0b9      	b.n	8005408 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f000 80ab 	beq.w	800540c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80052b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	f000 80a6 	beq.w	800540c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c8:	e853 3f00 	ldrex	r3, [r3]
 80052cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80052ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	461a      	mov	r2, r3
 80052de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80052e2:	647b      	str	r3, [r7, #68]	; 0x44
 80052e4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80052e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052ea:	e841 2300 	strex	r3, r2, [r1]
 80052ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80052f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1e4      	bne.n	80052c0 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	3308      	adds	r3, #8
 80052fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005300:	e853 3f00 	ldrex	r3, [r3]
 8005304:	623b      	str	r3, [r7, #32]
   return(result);
 8005306:	6a3b      	ldr	r3, [r7, #32]
 8005308:	f023 0301 	bic.w	r3, r3, #1
 800530c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	3308      	adds	r3, #8
 8005316:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800531a:	633a      	str	r2, [r7, #48]	; 0x30
 800531c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005322:	e841 2300 	strex	r3, r2, [r1]
 8005326:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1e3      	bne.n	80052f6 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2220      	movs	r2, #32
 8005332:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	e853 3f00 	ldrex	r3, [r3]
 800534e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f023 0310 	bic.w	r3, r3, #16
 8005356:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	461a      	mov	r2, r3
 8005360:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005364:	61fb      	str	r3, [r7, #28]
 8005366:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005368:	69b9      	ldr	r1, [r7, #24]
 800536a:	69fa      	ldr	r2, [r7, #28]
 800536c:	e841 2300 	strex	r3, r2, [r1]
 8005370:	617b      	str	r3, [r7, #20]
   return(result);
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d1e4      	bne.n	8005342 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2202      	movs	r2, #2
 800537c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800537e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005382:	4619      	mov	r1, r3
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 f865 	bl	8005454 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800538a:	e03f      	b.n	800540c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800538c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005390:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00e      	beq.n	80053b6 <HAL_UART_IRQHandler+0x56a>
 8005398:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800539c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d008      	beq.n	80053b6 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80053ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 ff12 	bl	80061d8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80053b4:	e02d      	b.n	8005412 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80053b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00e      	beq.n	80053e0 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80053c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d008      	beq.n	80053e0 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d01c      	beq.n	8005410 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	4798      	blx	r3
    }
    return;
 80053de:	e017      	b.n	8005410 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80053e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d012      	beq.n	8005412 <HAL_UART_IRQHandler+0x5c6>
 80053ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00c      	beq.n	8005412 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 fd1b 	bl	8005e34 <UART_EndTransmit_IT>
    return;
 80053fe:	e008      	b.n	8005412 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005400:	bf00      	nop
 8005402:	e006      	b.n	8005412 <HAL_UART_IRQHandler+0x5c6>
    return;
 8005404:	bf00      	nop
 8005406:	e004      	b.n	8005412 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005408:	bf00      	nop
 800540a:	e002      	b.n	8005412 <HAL_UART_IRQHandler+0x5c6>
      return;
 800540c:	bf00      	nop
 800540e:	e000      	b.n	8005412 <HAL_UART_IRQHandler+0x5c6>
    return;
 8005410:	bf00      	nop
  }

}
 8005412:	37e8      	adds	r7, #232	; 0xe8
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	460b      	mov	r3, r1
 800545e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b088      	sub	sp, #32
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005474:	2300      	movs	r3, #0
 8005476:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	689a      	ldr	r2, [r3, #8]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	431a      	orrs	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	431a      	orrs	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	69db      	ldr	r3, [r3, #28]
 800548c:	4313      	orrs	r3, r2
 800548e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	4b8a      	ldr	r3, [pc, #552]	; (80056c0 <UART_SetConfig+0x254>)
 8005498:	4013      	ands	r3, r2
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	6812      	ldr	r2, [r2, #0]
 800549e:	6979      	ldr	r1, [r7, #20]
 80054a0:	430b      	orrs	r3, r1
 80054a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68da      	ldr	r2, [r3, #12]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	430a      	orrs	r2, r1
 80054b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a1b      	ldr	r3, [r3, #32]
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	697a      	ldr	r2, [r7, #20]
 80054da:	430a      	orrs	r2, r1
 80054dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a78      	ldr	r2, [pc, #480]	; (80056c4 <UART_SetConfig+0x258>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d120      	bne.n	800552a <UART_SetConfig+0xbe>
 80054e8:	4b77      	ldr	r3, [pc, #476]	; (80056c8 <UART_SetConfig+0x25c>)
 80054ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ec:	f003 0303 	and.w	r3, r3, #3
 80054f0:	2b03      	cmp	r3, #3
 80054f2:	d817      	bhi.n	8005524 <UART_SetConfig+0xb8>
 80054f4:	a201      	add	r2, pc, #4	; (adr r2, 80054fc <UART_SetConfig+0x90>)
 80054f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054fa:	bf00      	nop
 80054fc:	0800550d 	.word	0x0800550d
 8005500:	08005519 	.word	0x08005519
 8005504:	0800551f 	.word	0x0800551f
 8005508:	08005513 	.word	0x08005513
 800550c:	2300      	movs	r3, #0
 800550e:	77fb      	strb	r3, [r7, #31]
 8005510:	e01d      	b.n	800554e <UART_SetConfig+0xe2>
 8005512:	2302      	movs	r3, #2
 8005514:	77fb      	strb	r3, [r7, #31]
 8005516:	e01a      	b.n	800554e <UART_SetConfig+0xe2>
 8005518:	2304      	movs	r3, #4
 800551a:	77fb      	strb	r3, [r7, #31]
 800551c:	e017      	b.n	800554e <UART_SetConfig+0xe2>
 800551e:	2308      	movs	r3, #8
 8005520:	77fb      	strb	r3, [r7, #31]
 8005522:	e014      	b.n	800554e <UART_SetConfig+0xe2>
 8005524:	2310      	movs	r3, #16
 8005526:	77fb      	strb	r3, [r7, #31]
 8005528:	e011      	b.n	800554e <UART_SetConfig+0xe2>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a67      	ldr	r2, [pc, #412]	; (80056cc <UART_SetConfig+0x260>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d102      	bne.n	800553a <UART_SetConfig+0xce>
 8005534:	2300      	movs	r3, #0
 8005536:	77fb      	strb	r3, [r7, #31]
 8005538:	e009      	b.n	800554e <UART_SetConfig+0xe2>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a64      	ldr	r2, [pc, #400]	; (80056d0 <UART_SetConfig+0x264>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d102      	bne.n	800554a <UART_SetConfig+0xde>
 8005544:	2300      	movs	r3, #0
 8005546:	77fb      	strb	r3, [r7, #31]
 8005548:	e001      	b.n	800554e <UART_SetConfig+0xe2>
 800554a:	2310      	movs	r3, #16
 800554c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	69db      	ldr	r3, [r3, #28]
 8005552:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005556:	d15a      	bne.n	800560e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8005558:	7ffb      	ldrb	r3, [r7, #31]
 800555a:	2b08      	cmp	r3, #8
 800555c:	d827      	bhi.n	80055ae <UART_SetConfig+0x142>
 800555e:	a201      	add	r2, pc, #4	; (adr r2, 8005564 <UART_SetConfig+0xf8>)
 8005560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005564:	08005589 	.word	0x08005589
 8005568:	08005591 	.word	0x08005591
 800556c:	08005599 	.word	0x08005599
 8005570:	080055af 	.word	0x080055af
 8005574:	0800559f 	.word	0x0800559f
 8005578:	080055af 	.word	0x080055af
 800557c:	080055af 	.word	0x080055af
 8005580:	080055af 	.word	0x080055af
 8005584:	080055a7 	.word	0x080055a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005588:	f7fe f8b0 	bl	80036ec <HAL_RCC_GetPCLK1Freq>
 800558c:	61b8      	str	r0, [r7, #24]
        break;
 800558e:	e013      	b.n	80055b8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005590:	f7fe f8ce 	bl	8003730 <HAL_RCC_GetPCLK2Freq>
 8005594:	61b8      	str	r0, [r7, #24]
        break;
 8005596:	e00f      	b.n	80055b8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005598:	4b4e      	ldr	r3, [pc, #312]	; (80056d4 <UART_SetConfig+0x268>)
 800559a:	61bb      	str	r3, [r7, #24]
        break;
 800559c:	e00c      	b.n	80055b8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800559e:	f7fe f82f 	bl	8003600 <HAL_RCC_GetSysClockFreq>
 80055a2:	61b8      	str	r0, [r7, #24]
        break;
 80055a4:	e008      	b.n	80055b8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055aa:	61bb      	str	r3, [r7, #24]
        break;
 80055ac:	e004      	b.n	80055b8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80055ae:	2300      	movs	r3, #0
 80055b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	77bb      	strb	r3, [r7, #30]
        break;
 80055b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d074      	beq.n	80056a8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	005a      	lsls	r2, r3, #1
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	085b      	lsrs	r3, r3, #1
 80055c8:	441a      	add	r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	2b0f      	cmp	r3, #15
 80055d8:	d916      	bls.n	8005608 <UART_SetConfig+0x19c>
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055e0:	d212      	bcs.n	8005608 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	f023 030f 	bic.w	r3, r3, #15
 80055ea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	085b      	lsrs	r3, r3, #1
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	f003 0307 	and.w	r3, r3, #7
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	89fb      	ldrh	r3, [r7, #14]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	89fa      	ldrh	r2, [r7, #14]
 8005604:	60da      	str	r2, [r3, #12]
 8005606:	e04f      	b.n	80056a8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	77bb      	strb	r3, [r7, #30]
 800560c:	e04c      	b.n	80056a8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800560e:	7ffb      	ldrb	r3, [r7, #31]
 8005610:	2b08      	cmp	r3, #8
 8005612:	d828      	bhi.n	8005666 <UART_SetConfig+0x1fa>
 8005614:	a201      	add	r2, pc, #4	; (adr r2, 800561c <UART_SetConfig+0x1b0>)
 8005616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800561a:	bf00      	nop
 800561c:	08005641 	.word	0x08005641
 8005620:	08005649 	.word	0x08005649
 8005624:	08005651 	.word	0x08005651
 8005628:	08005667 	.word	0x08005667
 800562c:	08005657 	.word	0x08005657
 8005630:	08005667 	.word	0x08005667
 8005634:	08005667 	.word	0x08005667
 8005638:	08005667 	.word	0x08005667
 800563c:	0800565f 	.word	0x0800565f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005640:	f7fe f854 	bl	80036ec <HAL_RCC_GetPCLK1Freq>
 8005644:	61b8      	str	r0, [r7, #24]
        break;
 8005646:	e013      	b.n	8005670 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005648:	f7fe f872 	bl	8003730 <HAL_RCC_GetPCLK2Freq>
 800564c:	61b8      	str	r0, [r7, #24]
        break;
 800564e:	e00f      	b.n	8005670 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005650:	4b20      	ldr	r3, [pc, #128]	; (80056d4 <UART_SetConfig+0x268>)
 8005652:	61bb      	str	r3, [r7, #24]
        break;
 8005654:	e00c      	b.n	8005670 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005656:	f7fd ffd3 	bl	8003600 <HAL_RCC_GetSysClockFreq>
 800565a:	61b8      	str	r0, [r7, #24]
        break;
 800565c:	e008      	b.n	8005670 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800565e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005662:	61bb      	str	r3, [r7, #24]
        break;
 8005664:	e004      	b.n	8005670 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005666:	2300      	movs	r3, #0
 8005668:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	77bb      	strb	r3, [r7, #30]
        break;
 800566e:	bf00      	nop
    }

    if (pclk != 0U)
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d018      	beq.n	80056a8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	085a      	lsrs	r2, r3, #1
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	441a      	add	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	fbb2 f3f3 	udiv	r3, r2, r3
 8005688:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	2b0f      	cmp	r3, #15
 800568e:	d909      	bls.n	80056a4 <UART_SetConfig+0x238>
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005696:	d205      	bcs.n	80056a4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	b29a      	uxth	r2, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	60da      	str	r2, [r3, #12]
 80056a2:	e001      	b.n	80056a8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80056b4:	7fbb      	ldrb	r3, [r7, #30]
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3720      	adds	r7, #32
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	efff69f3 	.word	0xefff69f3
 80056c4:	40013800 	.word	0x40013800
 80056c8:	40021000 	.word	0x40021000
 80056cc:	40004400 	.word	0x40004400
 80056d0:	40004800 	.word	0x40004800
 80056d4:	007a1200 	.word	0x007a1200

080056d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e4:	f003 0301 	and.w	r3, r3, #1
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00a      	beq.n	8005702 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	430a      	orrs	r2, r1
 8005700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005706:	f003 0302 	and.w	r3, r3, #2
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00a      	beq.n	8005724 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	430a      	orrs	r2, r1
 8005722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005728:	f003 0304 	and.w	r3, r3, #4
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00a      	beq.n	8005746 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	430a      	orrs	r2, r1
 8005744:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574a:	f003 0308 	and.w	r3, r3, #8
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00a      	beq.n	8005768 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	430a      	orrs	r2, r1
 8005766:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576c:	f003 0310 	and.w	r3, r3, #16
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00a      	beq.n	800578a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	430a      	orrs	r2, r1
 8005788:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578e:	f003 0320 	and.w	r3, r3, #32
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00a      	beq.n	80057ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	430a      	orrs	r2, r1
 80057aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d01a      	beq.n	80057ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	430a      	orrs	r2, r1
 80057cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057d6:	d10a      	bne.n	80057ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	430a      	orrs	r2, r1
 80057ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00a      	beq.n	8005810 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	430a      	orrs	r2, r1
 800580e:	605a      	str	r2, [r3, #4]
  }
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b098      	sub	sp, #96	; 0x60
 8005820:	af02      	add	r7, sp, #8
 8005822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800582c:	f7fc fa1a 	bl	8001c64 <HAL_GetTick>
 8005830:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 0308 	and.w	r3, r3, #8
 800583c:	2b08      	cmp	r3, #8
 800583e:	d12e      	bne.n	800589e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005840:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005848:	2200      	movs	r2, #0
 800584a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 f88c 	bl	800596c <UART_WaitOnFlagUntilTimeout>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d021      	beq.n	800589e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005862:	e853 3f00 	ldrex	r3, [r3]
 8005866:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800586a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800586e:	653b      	str	r3, [r7, #80]	; 0x50
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	461a      	mov	r2, r3
 8005876:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005878:	647b      	str	r3, [r7, #68]	; 0x44
 800587a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800587e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005880:	e841 2300 	strex	r3, r2, [r1]
 8005884:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1e6      	bne.n	800585a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2220      	movs	r2, #32
 8005890:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	e062      	b.n	8005964 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0304 	and.w	r3, r3, #4
 80058a8:	2b04      	cmp	r3, #4
 80058aa:	d149      	bne.n	8005940 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058b4:	2200      	movs	r2, #0
 80058b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 f856 	bl	800596c <UART_WaitOnFlagUntilTimeout>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d03c      	beq.n	8005940 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ce:	e853 3f00 	ldrex	r3, [r3]
 80058d2:	623b      	str	r3, [r7, #32]
   return(result);
 80058d4:	6a3b      	ldr	r3, [r7, #32]
 80058d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	461a      	mov	r2, r3
 80058e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058e4:	633b      	str	r3, [r7, #48]	; 0x30
 80058e6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058ec:	e841 2300 	strex	r3, r2, [r1]
 80058f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1e6      	bne.n	80058c6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	3308      	adds	r3, #8
 80058fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	e853 3f00 	ldrex	r3, [r3]
 8005906:	60fb      	str	r3, [r7, #12]
   return(result);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f023 0301 	bic.w	r3, r3, #1
 800590e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	3308      	adds	r3, #8
 8005916:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005918:	61fa      	str	r2, [r7, #28]
 800591a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591c:	69b9      	ldr	r1, [r7, #24]
 800591e:	69fa      	ldr	r2, [r7, #28]
 8005920:	e841 2300 	strex	r3, r2, [r1]
 8005924:	617b      	str	r3, [r7, #20]
   return(result);
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1e5      	bne.n	80058f8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2220      	movs	r2, #32
 8005930:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e011      	b.n	8005964 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2220      	movs	r2, #32
 8005944:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2220      	movs	r2, #32
 800594a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3758      	adds	r7, #88	; 0x58
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	603b      	str	r3, [r7, #0]
 8005978:	4613      	mov	r3, r2
 800597a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800597c:	e049      	b.n	8005a12 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005984:	d045      	beq.n	8005a12 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005986:	f7fc f96d 	bl	8001c64 <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	69ba      	ldr	r2, [r7, #24]
 8005992:	429a      	cmp	r2, r3
 8005994:	d302      	bcc.n	800599c <UART_WaitOnFlagUntilTimeout+0x30>
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d101      	bne.n	80059a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e048      	b.n	8005a32 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 0304 	and.w	r3, r3, #4
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d031      	beq.n	8005a12 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	69db      	ldr	r3, [r3, #28]
 80059b4:	f003 0308 	and.w	r3, r3, #8
 80059b8:	2b08      	cmp	r3, #8
 80059ba:	d110      	bne.n	80059de <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2208      	movs	r2, #8
 80059c2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80059c4:	68f8      	ldr	r0, [r7, #12]
 80059c6:	f000 f8ff 	bl	8005bc8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2208      	movs	r2, #8
 80059ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e029      	b.n	8005a32 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	69db      	ldr	r3, [r3, #28]
 80059e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059ec:	d111      	bne.n	8005a12 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f000 f8e5 	bl	8005bc8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2220      	movs	r2, #32
 8005a02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e00f      	b.n	8005a32 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	69da      	ldr	r2, [r3, #28]
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	68ba      	ldr	r2, [r7, #8]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	bf0c      	ite	eq
 8005a22:	2301      	moveq	r3, #1
 8005a24:	2300      	movne	r3, #0
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	461a      	mov	r2, r3
 8005a2a:	79fb      	ldrb	r3, [r7, #7]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d0a6      	beq.n	800597e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
	...

08005a3c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b097      	sub	sp, #92	; 0x5c
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	4613      	mov	r3, r2
 8005a48:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	68ba      	ldr	r2, [r7, #8]
 8005a4e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	88fa      	ldrh	r2, [r7, #6]
 8005a54:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	88fa      	ldrh	r2, [r7, #6]
 8005a5c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a6e:	d10e      	bne.n	8005a8e <UART_Start_Receive_IT+0x52>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d105      	bne.n	8005a84 <UART_Start_Receive_IT+0x48>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005a7e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a82:	e02d      	b.n	8005ae0 <UART_Start_Receive_IT+0xa4>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	22ff      	movs	r2, #255	; 0xff
 8005a88:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a8c:	e028      	b.n	8005ae0 <UART_Start_Receive_IT+0xa4>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d10d      	bne.n	8005ab2 <UART_Start_Receive_IT+0x76>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d104      	bne.n	8005aa8 <UART_Start_Receive_IT+0x6c>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	22ff      	movs	r2, #255	; 0xff
 8005aa2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005aa6:	e01b      	b.n	8005ae0 <UART_Start_Receive_IT+0xa4>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	227f      	movs	r2, #127	; 0x7f
 8005aac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ab0:	e016      	b.n	8005ae0 <UART_Start_Receive_IT+0xa4>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005aba:	d10d      	bne.n	8005ad8 <UART_Start_Receive_IT+0x9c>
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d104      	bne.n	8005ace <UART_Start_Receive_IT+0x92>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	227f      	movs	r2, #127	; 0x7f
 8005ac8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005acc:	e008      	b.n	8005ae0 <UART_Start_Receive_IT+0xa4>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	223f      	movs	r2, #63	; 0x3f
 8005ad2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ad6:	e003      	b.n	8005ae0 <UART_Start_Receive_IT+0xa4>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2222      	movs	r2, #34	; 0x22
 8005aec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	3308      	adds	r3, #8
 8005af6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005afa:	e853 3f00 	ldrex	r3, [r3]
 8005afe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b02:	f043 0301 	orr.w	r3, r3, #1
 8005b06:	657b      	str	r3, [r7, #84]	; 0x54
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	3308      	adds	r3, #8
 8005b0e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005b10:	64ba      	str	r2, [r7, #72]	; 0x48
 8005b12:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b14:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b18:	e841 2300 	strex	r3, r2, [r1]
 8005b1c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005b1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1e5      	bne.n	8005af0 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b2c:	d107      	bne.n	8005b3e <UART_Start_Receive_IT+0x102>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d103      	bne.n	8005b3e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	4a21      	ldr	r2, [pc, #132]	; (8005bc0 <UART_Start_Receive_IT+0x184>)
 8005b3a:	669a      	str	r2, [r3, #104]	; 0x68
 8005b3c:	e002      	b.n	8005b44 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	4a20      	ldr	r2, [pc, #128]	; (8005bc4 <UART_Start_Receive_IT+0x188>)
 8005b42:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d019      	beq.n	8005b80 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b54:	e853 3f00 	ldrex	r3, [r3]
 8005b58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005b60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	461a      	mov	r2, r3
 8005b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b6a:	637b      	str	r3, [r7, #52]	; 0x34
 8005b6c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b72:	e841 2300 	strex	r3, r2, [r1]
 8005b76:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1e6      	bne.n	8005b4c <UART_Start_Receive_IT+0x110>
 8005b7e:	e018      	b.n	8005bb2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	e853 3f00 	ldrex	r3, [r3]
 8005b8c:	613b      	str	r3, [r7, #16]
   return(result);
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	f043 0320 	orr.w	r3, r3, #32
 8005b94:	653b      	str	r3, [r7, #80]	; 0x50
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b9e:	623b      	str	r3, [r7, #32]
 8005ba0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba2:	69f9      	ldr	r1, [r7, #28]
 8005ba4:	6a3a      	ldr	r2, [r7, #32]
 8005ba6:	e841 2300 	strex	r3, r2, [r1]
 8005baa:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d1e6      	bne.n	8005b80 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	375c      	adds	r7, #92	; 0x5c
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr
 8005bc0:	08006031 	.word	0x08006031
 8005bc4:	08005e89 	.word	0x08005e89

08005bc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b095      	sub	sp, #84	; 0x54
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bd8:	e853 3f00 	ldrex	r3, [r3]
 8005bdc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005be4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	461a      	mov	r2, r3
 8005bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bee:	643b      	str	r3, [r7, #64]	; 0x40
 8005bf0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005bf4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005bf6:	e841 2300 	strex	r3, r2, [r1]
 8005bfa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d1e6      	bne.n	8005bd0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	3308      	adds	r3, #8
 8005c08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0a:	6a3b      	ldr	r3, [r7, #32]
 8005c0c:	e853 3f00 	ldrex	r3, [r3]
 8005c10:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	f023 0301 	bic.w	r3, r3, #1
 8005c18:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	3308      	adds	r3, #8
 8005c20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c2a:	e841 2300 	strex	r3, r2, [r1]
 8005c2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1e5      	bne.n	8005c02 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d118      	bne.n	8005c70 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	e853 3f00 	ldrex	r3, [r3]
 8005c4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	f023 0310 	bic.w	r3, r3, #16
 8005c52:	647b      	str	r3, [r7, #68]	; 0x44
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	461a      	mov	r2, r3
 8005c5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c5c:	61bb      	str	r3, [r7, #24]
 8005c5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c60:	6979      	ldr	r1, [r7, #20]
 8005c62:	69ba      	ldr	r2, [r7, #24]
 8005c64:	e841 2300 	strex	r3, r2, [r1]
 8005c68:	613b      	str	r3, [r7, #16]
   return(result);
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d1e6      	bne.n	8005c3e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2220      	movs	r2, #32
 8005c74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005c84:	bf00      	nop
 8005c86:	3754      	adds	r7, #84	; 0x54
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	f7ff fbc6 	bl	8005440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cb4:	bf00      	nop
 8005cb6:	3710      	adds	r7, #16
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b08f      	sub	sp, #60	; 0x3c
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cc8:	2b21      	cmp	r3, #33	; 0x21
 8005cca:	d14d      	bne.n	8005d68 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d132      	bne.n	8005d3e <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cde:	6a3b      	ldr	r3, [r7, #32]
 8005ce0:	e853 3f00 	ldrex	r3, [r3]
 8005ce4:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cec:	637b      	str	r3, [r7, #52]	; 0x34
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cf8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cfe:	e841 2300 	strex	r3, r2, [r1]
 8005d02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1e6      	bne.n	8005cd8 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	e853 3f00 	ldrex	r3, [r3]
 8005d16:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d1e:	633b      	str	r3, [r7, #48]	; 0x30
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	461a      	mov	r2, r3
 8005d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d28:	61bb      	str	r3, [r7, #24]
 8005d2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2c:	6979      	ldr	r1, [r7, #20]
 8005d2e:	69ba      	ldr	r2, [r7, #24]
 8005d30:	e841 2300 	strex	r3, r2, [r1]
 8005d34:	613b      	str	r3, [r7, #16]
   return(result);
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d1e6      	bne.n	8005d0a <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005d3c:	e014      	b.n	8005d68 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d42:	781a      	ldrb	r2, [r3, #0]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	b292      	uxth	r2, r2
 8005d4a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d50:	1c5a      	adds	r2, r3, #1
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005d68:	bf00      	nop
 8005d6a:	373c      	adds	r7, #60	; 0x3c
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b091      	sub	sp, #68	; 0x44
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d80:	2b21      	cmp	r3, #33	; 0x21
 8005d82:	d151      	bne.n	8005e28 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d132      	bne.n	8005df6 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d98:	e853 3f00 	ldrex	r3, [r3]
 8005d9c:	623b      	str	r3, [r7, #32]
   return(result);
 8005d9e:	6a3b      	ldr	r3, [r7, #32]
 8005da0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005da4:	63bb      	str	r3, [r7, #56]	; 0x38
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	461a      	mov	r2, r3
 8005dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dae:	633b      	str	r3, [r7, #48]	; 0x30
 8005db0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005db4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005db6:	e841 2300 	strex	r3, r2, [r1]
 8005dba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1e6      	bne.n	8005d90 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	e853 3f00 	ldrex	r3, [r3]
 8005dce:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dd6:	637b      	str	r3, [r7, #52]	; 0x34
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	461a      	mov	r2, r3
 8005dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de0:	61fb      	str	r3, [r7, #28]
 8005de2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de4:	69b9      	ldr	r1, [r7, #24]
 8005de6:	69fa      	ldr	r2, [r7, #28]
 8005de8:	e841 2300 	strex	r3, r2, [r1]
 8005dec:	617b      	str	r3, [r7, #20]
   return(result);
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d1e6      	bne.n	8005dc2 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005df4:	e018      	b.n	8005e28 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dfe:	881a      	ldrh	r2, [r3, #0]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e08:	b292      	uxth	r2, r2
 8005e0a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e10:	1c9a      	adds	r2, r3, #2
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005e28:	bf00      	nop
 8005e2a:	3744      	adds	r7, #68	; 0x44
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b088      	sub	sp, #32
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	e853 3f00 	ldrex	r3, [r3]
 8005e48:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e50:	61fb      	str	r3, [r7, #28]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	461a      	mov	r2, r3
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	61bb      	str	r3, [r7, #24]
 8005e5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e5e:	6979      	ldr	r1, [r7, #20]
 8005e60:	69ba      	ldr	r2, [r7, #24]
 8005e62:	e841 2300 	strex	r3, r2, [r1]
 8005e66:	613b      	str	r3, [r7, #16]
   return(result);
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1e6      	bne.n	8005e3c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2220      	movs	r2, #32
 8005e72:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f7ff facc 	bl	8005418 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e80:	bf00      	nop
 8005e82:	3720      	adds	r7, #32
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b09c      	sub	sp, #112	; 0x70
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005e96:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ea0:	2b22      	cmp	r3, #34	; 0x22
 8005ea2:	f040 80b9 	bne.w	8006018 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005eac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005eb0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005eb4:	b2d9      	uxtb	r1, r3
 8005eb6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005eba:	b2da      	uxtb	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec0:	400a      	ands	r2, r1
 8005ec2:	b2d2      	uxtb	r2, r2
 8005ec4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eca:	1c5a      	adds	r2, r3, #1
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	3b01      	subs	r3, #1
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	f040 809c 	bne.w	8006028 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ef8:	e853 3f00 	ldrex	r3, [r3]
 8005efc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005efe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f04:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f0e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f10:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f12:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f16:	e841 2300 	strex	r3, r2, [r1]
 8005f1a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1e6      	bne.n	8005ef0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	3308      	adds	r3, #8
 8005f28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f2c:	e853 3f00 	ldrex	r3, [r3]
 8005f30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f34:	f023 0301 	bic.w	r3, r3, #1
 8005f38:	667b      	str	r3, [r7, #100]	; 0x64
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	3308      	adds	r3, #8
 8005f40:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005f42:	647a      	str	r2, [r7, #68]	; 0x44
 8005f44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f4a:	e841 2300 	strex	r3, r2, [r1]
 8005f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1e5      	bne.n	8005f22 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2220      	movs	r2, #32
 8005f5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d018      	beq.n	8005faa <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f80:	e853 3f00 	ldrex	r3, [r3]
 8005f84:	623b      	str	r3, [r7, #32]
   return(result);
 8005f86:	6a3b      	ldr	r3, [r7, #32]
 8005f88:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005f8c:	663b      	str	r3, [r7, #96]	; 0x60
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	461a      	mov	r2, r3
 8005f94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f96:	633b      	str	r3, [r7, #48]	; 0x30
 8005f98:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f9e:	e841 2300 	strex	r3, r2, [r1]
 8005fa2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1e6      	bne.n	8005f78 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d12e      	bne.n	8006010 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	e853 3f00 	ldrex	r3, [r3]
 8005fc4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f023 0310 	bic.w	r3, r3, #16
 8005fcc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fd6:	61fb      	str	r3, [r7, #28]
 8005fd8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fda:	69b9      	ldr	r1, [r7, #24]
 8005fdc:	69fa      	ldr	r2, [r7, #28]
 8005fde:	e841 2300 	strex	r3, r2, [r1]
 8005fe2:	617b      	str	r3, [r7, #20]
   return(result);
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d1e6      	bne.n	8005fb8 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	69db      	ldr	r3, [r3, #28]
 8005ff0:	f003 0310 	and.w	r3, r3, #16
 8005ff4:	2b10      	cmp	r3, #16
 8005ff6:	d103      	bne.n	8006000 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2210      	movs	r2, #16
 8005ffe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006006:	4619      	mov	r1, r3
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f7ff fa23 	bl	8005454 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800600e:	e00b      	b.n	8006028 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f7ff fa0b 	bl	800542c <HAL_UART_RxCpltCallback>
}
 8006016:	e007      	b.n	8006028 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	699a      	ldr	r2, [r3, #24]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f042 0208 	orr.w	r2, r2, #8
 8006026:	619a      	str	r2, [r3, #24]
}
 8006028:	bf00      	nop
 800602a:	3770      	adds	r7, #112	; 0x70
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b09c      	sub	sp, #112	; 0x70
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800603e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006048:	2b22      	cmp	r3, #34	; 0x22
 800604a:	f040 80b9 	bne.w	80061c0 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006054:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800605c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800605e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8006062:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006066:	4013      	ands	r3, r2
 8006068:	b29a      	uxth	r2, r3
 800606a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800606c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006072:	1c9a      	adds	r2, r3, #2
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800607e:	b29b      	uxth	r3, r3
 8006080:	3b01      	subs	r3, #1
 8006082:	b29a      	uxth	r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006090:	b29b      	uxth	r3, r3
 8006092:	2b00      	cmp	r3, #0
 8006094:	f040 809c 	bne.w	80061d0 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060a0:	e853 3f00 	ldrex	r3, [r3]
 80060a4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80060a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060ac:	667b      	str	r3, [r7, #100]	; 0x64
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	461a      	mov	r2, r3
 80060b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060b6:	657b      	str	r3, [r7, #84]	; 0x54
 80060b8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80060bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80060be:	e841 2300 	strex	r3, r2, [r1]
 80060c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80060c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1e6      	bne.n	8006098 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	3308      	adds	r3, #8
 80060d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060d4:	e853 3f00 	ldrex	r3, [r3]
 80060d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80060da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060dc:	f023 0301 	bic.w	r3, r3, #1
 80060e0:	663b      	str	r3, [r7, #96]	; 0x60
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	3308      	adds	r3, #8
 80060e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80060ea:	643a      	str	r2, [r7, #64]	; 0x40
 80060ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80060f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060f2:	e841 2300 	strex	r3, r2, [r1]
 80060f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1e5      	bne.n	80060ca <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2220      	movs	r2, #32
 8006102:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800611c:	2b00      	cmp	r3, #0
 800611e:	d018      	beq.n	8006152 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006126:	6a3b      	ldr	r3, [r7, #32]
 8006128:	e853 3f00 	ldrex	r3, [r3]
 800612c:	61fb      	str	r3, [r7, #28]
   return(result);
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006134:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	461a      	mov	r2, r3
 800613c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800613e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006140:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006142:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006144:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006146:	e841 2300 	strex	r3, r2, [r1]
 800614a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800614c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1e6      	bne.n	8006120 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006156:	2b01      	cmp	r3, #1
 8006158:	d12e      	bne.n	80061b8 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	e853 3f00 	ldrex	r3, [r3]
 800616c:	60bb      	str	r3, [r7, #8]
   return(result);
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	f023 0310 	bic.w	r3, r3, #16
 8006174:	65bb      	str	r3, [r7, #88]	; 0x58
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	461a      	mov	r2, r3
 800617c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800617e:	61bb      	str	r3, [r7, #24]
 8006180:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006182:	6979      	ldr	r1, [r7, #20]
 8006184:	69ba      	ldr	r2, [r7, #24]
 8006186:	e841 2300 	strex	r3, r2, [r1]
 800618a:	613b      	str	r3, [r7, #16]
   return(result);
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1e6      	bne.n	8006160 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	69db      	ldr	r3, [r3, #28]
 8006198:	f003 0310 	and.w	r3, r3, #16
 800619c:	2b10      	cmp	r3, #16
 800619e:	d103      	bne.n	80061a8 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2210      	movs	r2, #16
 80061a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80061ae:	4619      	mov	r1, r3
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f7ff f94f 	bl	8005454 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80061b6:	e00b      	b.n	80061d0 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f7ff f937 	bl	800542c <HAL_UART_RxCpltCallback>
}
 80061be:	e007      	b.n	80061d0 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	699a      	ldr	r2, [r3, #24]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f042 0208 	orr.w	r2, r2, #8
 80061ce:	619a      	str	r2, [r3, #24]
}
 80061d0:	bf00      	nop
 80061d2:	3770      	adds	r7, #112	; 0x70
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80061e0:	bf00      	nop
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80061ec:	b480      	push	{r7}
 80061ee:	b085      	sub	sp, #20
 80061f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061f2:	f3ef 8305 	mrs	r3, IPSR
 80061f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80061f8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10f      	bne.n	800621e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061fe:	f3ef 8310 	mrs	r3, PRIMASK
 8006202:	607b      	str	r3, [r7, #4]
  return(result);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d109      	bne.n	800621e <osKernelInitialize+0x32>
 800620a:	4b11      	ldr	r3, [pc, #68]	; (8006250 <osKernelInitialize+0x64>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2b02      	cmp	r3, #2
 8006210:	d109      	bne.n	8006226 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006212:	f3ef 8311 	mrs	r3, BASEPRI
 8006216:	603b      	str	r3, [r7, #0]
  return(result);
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d003      	beq.n	8006226 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800621e:	f06f 0305 	mvn.w	r3, #5
 8006222:	60fb      	str	r3, [r7, #12]
 8006224:	e00c      	b.n	8006240 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006226:	4b0a      	ldr	r3, [pc, #40]	; (8006250 <osKernelInitialize+0x64>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d105      	bne.n	800623a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800622e:	4b08      	ldr	r3, [pc, #32]	; (8006250 <osKernelInitialize+0x64>)
 8006230:	2201      	movs	r2, #1
 8006232:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006234:	2300      	movs	r3, #0
 8006236:	60fb      	str	r3, [r7, #12]
 8006238:	e002      	b.n	8006240 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800623a:	f04f 33ff 	mov.w	r3, #4294967295
 800623e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006240:	68fb      	ldr	r3, [r7, #12]
}
 8006242:	4618      	mov	r0, r3
 8006244:	3714      	adds	r7, #20
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop
 8006250:	200002f8 	.word	0x200002f8

08006254 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800625a:	f3ef 8305 	mrs	r3, IPSR
 800625e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006260:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006262:	2b00      	cmp	r3, #0
 8006264:	d10f      	bne.n	8006286 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006266:	f3ef 8310 	mrs	r3, PRIMASK
 800626a:	607b      	str	r3, [r7, #4]
  return(result);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d109      	bne.n	8006286 <osKernelStart+0x32>
 8006272:	4b11      	ldr	r3, [pc, #68]	; (80062b8 <osKernelStart+0x64>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2b02      	cmp	r3, #2
 8006278:	d109      	bne.n	800628e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800627a:	f3ef 8311 	mrs	r3, BASEPRI
 800627e:	603b      	str	r3, [r7, #0]
  return(result);
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d003      	beq.n	800628e <osKernelStart+0x3a>
    stat = osErrorISR;
 8006286:	f06f 0305 	mvn.w	r3, #5
 800628a:	60fb      	str	r3, [r7, #12]
 800628c:	e00e      	b.n	80062ac <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800628e:	4b0a      	ldr	r3, [pc, #40]	; (80062b8 <osKernelStart+0x64>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2b01      	cmp	r3, #1
 8006294:	d107      	bne.n	80062a6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8006296:	4b08      	ldr	r3, [pc, #32]	; (80062b8 <osKernelStart+0x64>)
 8006298:	2202      	movs	r2, #2
 800629a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800629c:	f001 f898 	bl	80073d0 <vTaskStartScheduler>
      stat = osOK;
 80062a0:	2300      	movs	r3, #0
 80062a2:	60fb      	str	r3, [r7, #12]
 80062a4:	e002      	b.n	80062ac <osKernelStart+0x58>
    } else {
      stat = osError;
 80062a6:	f04f 33ff 	mov.w	r3, #4294967295
 80062aa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80062ac:	68fb      	ldr	r3, [r7, #12]
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3710      	adds	r7, #16
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	200002f8 	.word	0x200002f8

080062bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80062bc:	b580      	push	{r7, lr}
 80062be:	b092      	sub	sp, #72	; 0x48
 80062c0:	af04      	add	r7, sp, #16
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80062c8:	2300      	movs	r3, #0
 80062ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062cc:	f3ef 8305 	mrs	r3, IPSR
 80062d0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80062d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f040 8094 	bne.w	8006402 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062da:	f3ef 8310 	mrs	r3, PRIMASK
 80062de:	623b      	str	r3, [r7, #32]
  return(result);
 80062e0:	6a3b      	ldr	r3, [r7, #32]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	f040 808d 	bne.w	8006402 <osThreadNew+0x146>
 80062e8:	4b48      	ldr	r3, [pc, #288]	; (800640c <osThreadNew+0x150>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	d106      	bne.n	80062fe <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80062f0:	f3ef 8311 	mrs	r3, BASEPRI
 80062f4:	61fb      	str	r3, [r7, #28]
  return(result);
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f040 8082 	bne.w	8006402 <osThreadNew+0x146>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d07e      	beq.n	8006402 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8006304:	2380      	movs	r3, #128	; 0x80
 8006306:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8006308:	2318      	movs	r3, #24
 800630a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800630c:	2300      	movs	r3, #0
 800630e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8006310:	f107 031b 	add.w	r3, r7, #27
 8006314:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8006316:	f04f 33ff 	mov.w	r3, #4294967295
 800631a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d045      	beq.n	80063ae <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d002      	beq.n	8006330 <osThreadNew+0x74>
        name = attr->name;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	699b      	ldr	r3, [r3, #24]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d002      	beq.n	800633e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	699b      	ldr	r3, [r3, #24]
 800633c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800633e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006340:	2b00      	cmp	r3, #0
 8006342:	d008      	beq.n	8006356 <osThreadNew+0x9a>
 8006344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006346:	2b38      	cmp	r3, #56	; 0x38
 8006348:	d805      	bhi.n	8006356 <osThreadNew+0x9a>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	2b00      	cmp	r3, #0
 8006354:	d001      	beq.n	800635a <osThreadNew+0x9e>
        return (NULL);
 8006356:	2300      	movs	r3, #0
 8006358:	e054      	b.n	8006404 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	695b      	ldr	r3, [r3, #20]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d003      	beq.n	800636a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	695b      	ldr	r3, [r3, #20]
 8006366:	089b      	lsrs	r3, r3, #2
 8006368:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00e      	beq.n	8006390 <osThreadNew+0xd4>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	2ba7      	cmp	r3, #167	; 0xa7
 8006378:	d90a      	bls.n	8006390 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800637e:	2b00      	cmp	r3, #0
 8006380:	d006      	beq.n	8006390 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	695b      	ldr	r3, [r3, #20]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d002      	beq.n	8006390 <osThreadNew+0xd4>
        mem = 1;
 800638a:	2301      	movs	r3, #1
 800638c:	62bb      	str	r3, [r7, #40]	; 0x28
 800638e:	e010      	b.n	80063b2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d10c      	bne.n	80063b2 <osThreadNew+0xf6>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d108      	bne.n	80063b2 <osThreadNew+0xf6>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d104      	bne.n	80063b2 <osThreadNew+0xf6>
          mem = 0;
 80063a8:	2300      	movs	r3, #0
 80063aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80063ac:	e001      	b.n	80063b2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80063ae:	2300      	movs	r3, #0
 80063b0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80063b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d110      	bne.n	80063da <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80063c0:	9202      	str	r2, [sp, #8]
 80063c2:	9301      	str	r3, [sp, #4]
 80063c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c6:	9300      	str	r3, [sp, #0]
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	f000 fe1a 	bl	8007008 <xTaskCreateStatic>
 80063d4:	4603      	mov	r3, r0
 80063d6:	617b      	str	r3, [r7, #20]
 80063d8:	e013      	b.n	8006402 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80063da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d110      	bne.n	8006402 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80063e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e2:	b29a      	uxth	r2, r3
 80063e4:	f107 0314 	add.w	r3, r7, #20
 80063e8:	9301      	str	r3, [sp, #4]
 80063ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ec:	9300      	str	r3, [sp, #0]
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80063f2:	68f8      	ldr	r0, [r7, #12]
 80063f4:	f000 fe64 	bl	80070c0 <xTaskCreate>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d001      	beq.n	8006402 <osThreadNew+0x146>
          hTask = NULL;
 80063fe:	2300      	movs	r3, #0
 8006400:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006402:	697b      	ldr	r3, [r7, #20]
}
 8006404:	4618      	mov	r0, r3
 8006406:	3738      	adds	r7, #56	; 0x38
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}
 800640c:	200002f8 	.word	0x200002f8

08006410 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006410:	b580      	push	{r7, lr}
 8006412:	b086      	sub	sp, #24
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006418:	f3ef 8305 	mrs	r3, IPSR
 800641c:	613b      	str	r3, [r7, #16]
  return(result);
 800641e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006420:	2b00      	cmp	r3, #0
 8006422:	d10f      	bne.n	8006444 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006424:	f3ef 8310 	mrs	r3, PRIMASK
 8006428:	60fb      	str	r3, [r7, #12]
  return(result);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d109      	bne.n	8006444 <osDelay+0x34>
 8006430:	4b0d      	ldr	r3, [pc, #52]	; (8006468 <osDelay+0x58>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2b02      	cmp	r3, #2
 8006436:	d109      	bne.n	800644c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006438:	f3ef 8311 	mrs	r3, BASEPRI
 800643c:	60bb      	str	r3, [r7, #8]
  return(result);
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d003      	beq.n	800644c <osDelay+0x3c>
    stat = osErrorISR;
 8006444:	f06f 0305 	mvn.w	r3, #5
 8006448:	617b      	str	r3, [r7, #20]
 800644a:	e007      	b.n	800645c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800644c:	2300      	movs	r3, #0
 800644e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d002      	beq.n	800645c <osDelay+0x4c>
      vTaskDelay(ticks);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 ff86 	bl	8007368 <vTaskDelay>
    }
  }

  return (stat);
 800645c:	697b      	ldr	r3, [r7, #20]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3718      	adds	r7, #24
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	200002f8 	.word	0x200002f8

0800646c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800646c:	b480      	push	{r7}
 800646e:	b085      	sub	sp, #20
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	4a07      	ldr	r2, [pc, #28]	; (8006498 <vApplicationGetIdleTaskMemory+0x2c>)
 800647c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	4a06      	ldr	r2, [pc, #24]	; (800649c <vApplicationGetIdleTaskMemory+0x30>)
 8006482:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2280      	movs	r2, #128	; 0x80
 8006488:	601a      	str	r2, [r3, #0]
}
 800648a:	bf00      	nop
 800648c:	3714      	adds	r7, #20
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	200002fc 	.word	0x200002fc
 800649c:	200003a4 	.word	0x200003a4

080064a0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	60f8      	str	r0, [r7, #12]
 80064a8:	60b9      	str	r1, [r7, #8]
 80064aa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	4a07      	ldr	r2, [pc, #28]	; (80064cc <vApplicationGetTimerTaskMemory+0x2c>)
 80064b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	4a06      	ldr	r2, [pc, #24]	; (80064d0 <vApplicationGetTimerTaskMemory+0x30>)
 80064b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064be:	601a      	str	r2, [r3, #0]
}
 80064c0:	bf00      	nop
 80064c2:	3714      	adds	r7, #20
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr
 80064cc:	200005a4 	.word	0x200005a4
 80064d0:	2000064c 	.word	0x2000064c

080064d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f103 0208 	add.w	r2, r3, #8
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f04f 32ff 	mov.w	r2, #4294967295
 80064ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f103 0208 	add.w	r2, r3, #8
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f103 0208 	add.w	r2, r3, #8
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006522:	bf00      	nop
 8006524:	370c      	adds	r7, #12
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr

0800652e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800652e:	b480      	push	{r7}
 8006530:	b085      	sub	sp, #20
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
 8006536:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	689a      	ldr	r2, [r3, #8]
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	683a      	ldr	r2, [r7, #0]
 8006552:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	683a      	ldr	r2, [r7, #0]
 8006558:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	1c5a      	adds	r2, r3, #1
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	601a      	str	r2, [r3, #0]
}
 800656a:	bf00      	nop
 800656c:	3714      	adds	r7, #20
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr

08006576 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006576:	b480      	push	{r7}
 8006578:	b085      	sub	sp, #20
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
 800657e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800658c:	d103      	bne.n	8006596 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	60fb      	str	r3, [r7, #12]
 8006594:	e00c      	b.n	80065b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	3308      	adds	r3, #8
 800659a:	60fb      	str	r3, [r7, #12]
 800659c:	e002      	b.n	80065a4 <vListInsert+0x2e>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	60fb      	str	r3, [r7, #12]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68ba      	ldr	r2, [r7, #8]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d2f6      	bcs.n	800659e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	685a      	ldr	r2, [r3, #4]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	683a      	ldr	r2, [r7, #0]
 80065be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	683a      	ldr	r2, [r7, #0]
 80065ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	1c5a      	adds	r2, r3, #1
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	601a      	str	r2, [r3, #0]
}
 80065dc:	bf00      	nop
 80065de:	3714      	adds	r7, #20
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr

080065e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80065e8:	b480      	push	{r7}
 80065ea:	b085      	sub	sp, #20
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	6892      	ldr	r2, [r2, #8]
 80065fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	6852      	ldr	r2, [r2, #4]
 8006608:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	429a      	cmp	r2, r3
 8006612:	d103      	bne.n	800661c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	689a      	ldr	r2, [r3, #8]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	1e5a      	subs	r2, r3, #1
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
}
 8006630:	4618      	mov	r0, r3
 8006632:	3714      	adds	r7, #20
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d10a      	bne.n	8006666 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006654:	f383 8811 	msr	BASEPRI, r3
 8006658:	f3bf 8f6f 	isb	sy
 800665c:	f3bf 8f4f 	dsb	sy
 8006660:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006662:	bf00      	nop
 8006664:	e7fe      	b.n	8006664 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006666:	f002 f835 	bl	80086d4 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006672:	68f9      	ldr	r1, [r7, #12]
 8006674:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006676:	fb01 f303 	mul.w	r3, r1, r3
 800667a:	441a      	add	r2, r3
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2200      	movs	r2, #0
 8006684:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006696:	3b01      	subs	r3, #1
 8006698:	68f9      	ldr	r1, [r7, #12]
 800669a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800669c:	fb01 f303 	mul.w	r3, r1, r3
 80066a0:	441a      	add	r2, r3
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	22ff      	movs	r2, #255	; 0xff
 80066aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	22ff      	movs	r2, #255	; 0xff
 80066b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d114      	bne.n	80066e6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d01a      	beq.n	80066fa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	3310      	adds	r3, #16
 80066c8:	4618      	mov	r0, r3
 80066ca:	f001 f91f 	bl	800790c <xTaskRemoveFromEventList>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d012      	beq.n	80066fa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80066d4:	4b0c      	ldr	r3, [pc, #48]	; (8006708 <xQueueGenericReset+0xcc>)
 80066d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066da:	601a      	str	r2, [r3, #0]
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	f3bf 8f6f 	isb	sy
 80066e4:	e009      	b.n	80066fa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	3310      	adds	r3, #16
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7ff fef2 	bl	80064d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	3324      	adds	r3, #36	; 0x24
 80066f4:	4618      	mov	r0, r3
 80066f6:	f7ff feed 	bl	80064d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80066fa:	f002 f81b 	bl	8008734 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80066fe:	2301      	movs	r3, #1
}
 8006700:	4618      	mov	r0, r3
 8006702:	3710      	adds	r7, #16
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}
 8006708:	e000ed04 	.word	0xe000ed04

0800670c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800670c:	b580      	push	{r7, lr}
 800670e:	b08e      	sub	sp, #56	; 0x38
 8006710:	af02      	add	r7, sp, #8
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	607a      	str	r2, [r7, #4]
 8006718:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d10a      	bne.n	8006736 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006724:	f383 8811 	msr	BASEPRI, r3
 8006728:	f3bf 8f6f 	isb	sy
 800672c:	f3bf 8f4f 	dsb	sy
 8006730:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006732:	bf00      	nop
 8006734:	e7fe      	b.n	8006734 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d10a      	bne.n	8006752 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800673c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006740:	f383 8811 	msr	BASEPRI, r3
 8006744:	f3bf 8f6f 	isb	sy
 8006748:	f3bf 8f4f 	dsb	sy
 800674c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800674e:	bf00      	nop
 8006750:	e7fe      	b.n	8006750 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d002      	beq.n	800675e <xQueueGenericCreateStatic+0x52>
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d001      	beq.n	8006762 <xQueueGenericCreateStatic+0x56>
 800675e:	2301      	movs	r3, #1
 8006760:	e000      	b.n	8006764 <xQueueGenericCreateStatic+0x58>
 8006762:	2300      	movs	r3, #0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d10a      	bne.n	800677e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676c:	f383 8811 	msr	BASEPRI, r3
 8006770:	f3bf 8f6f 	isb	sy
 8006774:	f3bf 8f4f 	dsb	sy
 8006778:	623b      	str	r3, [r7, #32]
}
 800677a:	bf00      	nop
 800677c:	e7fe      	b.n	800677c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d102      	bne.n	800678a <xQueueGenericCreateStatic+0x7e>
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d101      	bne.n	800678e <xQueueGenericCreateStatic+0x82>
 800678a:	2301      	movs	r3, #1
 800678c:	e000      	b.n	8006790 <xQueueGenericCreateStatic+0x84>
 800678e:	2300      	movs	r3, #0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d10a      	bne.n	80067aa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006798:	f383 8811 	msr	BASEPRI, r3
 800679c:	f3bf 8f6f 	isb	sy
 80067a0:	f3bf 8f4f 	dsb	sy
 80067a4:	61fb      	str	r3, [r7, #28]
}
 80067a6:	bf00      	nop
 80067a8:	e7fe      	b.n	80067a8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80067aa:	2350      	movs	r3, #80	; 0x50
 80067ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	2b50      	cmp	r3, #80	; 0x50
 80067b2:	d00a      	beq.n	80067ca <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80067b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b8:	f383 8811 	msr	BASEPRI, r3
 80067bc:	f3bf 8f6f 	isb	sy
 80067c0:	f3bf 8f4f 	dsb	sy
 80067c4:	61bb      	str	r3, [r7, #24]
}
 80067c6:	bf00      	nop
 80067c8:	e7fe      	b.n	80067c8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80067ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00d      	beq.n	80067f0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80067d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80067dc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80067e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e2:	9300      	str	r3, [sp, #0]
 80067e4:	4613      	mov	r3, r2
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	68b9      	ldr	r1, [r7, #8]
 80067ea:	68f8      	ldr	r0, [r7, #12]
 80067ec:	f000 f805 	bl	80067fa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80067f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3730      	adds	r7, #48	; 0x30
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b084      	sub	sp, #16
 80067fe:	af00      	add	r7, sp, #0
 8006800:	60f8      	str	r0, [r7, #12]
 8006802:	60b9      	str	r1, [r7, #8]
 8006804:	607a      	str	r2, [r7, #4]
 8006806:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d103      	bne.n	8006816 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	69ba      	ldr	r2, [r7, #24]
 8006812:	601a      	str	r2, [r3, #0]
 8006814:	e002      	b.n	800681c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	68ba      	ldr	r2, [r7, #8]
 8006826:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006828:	2101      	movs	r1, #1
 800682a:	69b8      	ldr	r0, [r7, #24]
 800682c:	f7ff ff06 	bl	800663c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	78fa      	ldrb	r2, [r7, #3]
 8006834:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006838:	bf00      	nop
 800683a:	3710      	adds	r7, #16
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b08e      	sub	sp, #56	; 0x38
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	607a      	str	r2, [r7, #4]
 800684c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800684e:	2300      	movs	r3, #0
 8006850:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006858:	2b00      	cmp	r3, #0
 800685a:	d10a      	bne.n	8006872 <xQueueGenericSend+0x32>
	__asm volatile
 800685c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006860:	f383 8811 	msr	BASEPRI, r3
 8006864:	f3bf 8f6f 	isb	sy
 8006868:	f3bf 8f4f 	dsb	sy
 800686c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800686e:	bf00      	nop
 8006870:	e7fe      	b.n	8006870 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d103      	bne.n	8006880 <xQueueGenericSend+0x40>
 8006878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687c:	2b00      	cmp	r3, #0
 800687e:	d101      	bne.n	8006884 <xQueueGenericSend+0x44>
 8006880:	2301      	movs	r3, #1
 8006882:	e000      	b.n	8006886 <xQueueGenericSend+0x46>
 8006884:	2300      	movs	r3, #0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10a      	bne.n	80068a0 <xQueueGenericSend+0x60>
	__asm volatile
 800688a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800688e:	f383 8811 	msr	BASEPRI, r3
 8006892:	f3bf 8f6f 	isb	sy
 8006896:	f3bf 8f4f 	dsb	sy
 800689a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800689c:	bf00      	nop
 800689e:	e7fe      	b.n	800689e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	2b02      	cmp	r3, #2
 80068a4:	d103      	bne.n	80068ae <xQueueGenericSend+0x6e>
 80068a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d101      	bne.n	80068b2 <xQueueGenericSend+0x72>
 80068ae:	2301      	movs	r3, #1
 80068b0:	e000      	b.n	80068b4 <xQueueGenericSend+0x74>
 80068b2:	2300      	movs	r3, #0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d10a      	bne.n	80068ce <xQueueGenericSend+0x8e>
	__asm volatile
 80068b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068bc:	f383 8811 	msr	BASEPRI, r3
 80068c0:	f3bf 8f6f 	isb	sy
 80068c4:	f3bf 8f4f 	dsb	sy
 80068c8:	623b      	str	r3, [r7, #32]
}
 80068ca:	bf00      	nop
 80068cc:	e7fe      	b.n	80068cc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80068ce:	f001 f9e5 	bl	8007c9c <xTaskGetSchedulerState>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d102      	bne.n	80068de <xQueueGenericSend+0x9e>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d101      	bne.n	80068e2 <xQueueGenericSend+0xa2>
 80068de:	2301      	movs	r3, #1
 80068e0:	e000      	b.n	80068e4 <xQueueGenericSend+0xa4>
 80068e2:	2300      	movs	r3, #0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d10a      	bne.n	80068fe <xQueueGenericSend+0xbe>
	__asm volatile
 80068e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ec:	f383 8811 	msr	BASEPRI, r3
 80068f0:	f3bf 8f6f 	isb	sy
 80068f4:	f3bf 8f4f 	dsb	sy
 80068f8:	61fb      	str	r3, [r7, #28]
}
 80068fa:	bf00      	nop
 80068fc:	e7fe      	b.n	80068fc <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80068fe:	f001 fee9 	bl	80086d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006904:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800690a:	429a      	cmp	r2, r3
 800690c:	d302      	bcc.n	8006914 <xQueueGenericSend+0xd4>
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	2b02      	cmp	r3, #2
 8006912:	d129      	bne.n	8006968 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006914:	683a      	ldr	r2, [r7, #0]
 8006916:	68b9      	ldr	r1, [r7, #8]
 8006918:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800691a:	f000 fa07 	bl	8006d2c <prvCopyDataToQueue>
 800691e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006924:	2b00      	cmp	r3, #0
 8006926:	d010      	beq.n	800694a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692a:	3324      	adds	r3, #36	; 0x24
 800692c:	4618      	mov	r0, r3
 800692e:	f000 ffed 	bl	800790c <xTaskRemoveFromEventList>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d013      	beq.n	8006960 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006938:	4b3f      	ldr	r3, [pc, #252]	; (8006a38 <xQueueGenericSend+0x1f8>)
 800693a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800693e:	601a      	str	r2, [r3, #0]
 8006940:	f3bf 8f4f 	dsb	sy
 8006944:	f3bf 8f6f 	isb	sy
 8006948:	e00a      	b.n	8006960 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800694a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694c:	2b00      	cmp	r3, #0
 800694e:	d007      	beq.n	8006960 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006950:	4b39      	ldr	r3, [pc, #228]	; (8006a38 <xQueueGenericSend+0x1f8>)
 8006952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006956:	601a      	str	r2, [r3, #0]
 8006958:	f3bf 8f4f 	dsb	sy
 800695c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006960:	f001 fee8 	bl	8008734 <vPortExitCritical>
				return pdPASS;
 8006964:	2301      	movs	r3, #1
 8006966:	e063      	b.n	8006a30 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d103      	bne.n	8006976 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800696e:	f001 fee1 	bl	8008734 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006972:	2300      	movs	r3, #0
 8006974:	e05c      	b.n	8006a30 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006978:	2b00      	cmp	r3, #0
 800697a:	d106      	bne.n	800698a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800697c:	f107 0314 	add.w	r3, r7, #20
 8006980:	4618      	mov	r0, r3
 8006982:	f001 f827 	bl	80079d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006986:	2301      	movs	r3, #1
 8006988:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800698a:	f001 fed3 	bl	8008734 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800698e:	f000 fd8f 	bl	80074b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006992:	f001 fe9f 	bl	80086d4 <vPortEnterCritical>
 8006996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006998:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800699c:	b25b      	sxtb	r3, r3
 800699e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069a2:	d103      	bne.n	80069ac <xQueueGenericSend+0x16c>
 80069a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069b2:	b25b      	sxtb	r3, r3
 80069b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b8:	d103      	bne.n	80069c2 <xQueueGenericSend+0x182>
 80069ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069c2:	f001 feb7 	bl	8008734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80069c6:	1d3a      	adds	r2, r7, #4
 80069c8:	f107 0314 	add.w	r3, r7, #20
 80069cc:	4611      	mov	r1, r2
 80069ce:	4618      	mov	r0, r3
 80069d0:	f001 f816 	bl	8007a00 <xTaskCheckForTimeOut>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d124      	bne.n	8006a24 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80069da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069dc:	f000 fa9e 	bl	8006f1c <prvIsQueueFull>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d018      	beq.n	8006a18 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80069e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e8:	3310      	adds	r3, #16
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	4611      	mov	r1, r2
 80069ee:	4618      	mov	r0, r3
 80069f0:	f000 ff3c 	bl	800786c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80069f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069f6:	f000 fa29 	bl	8006e4c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80069fa:	f000 fd67 	bl	80074cc <xTaskResumeAll>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f47f af7c 	bne.w	80068fe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006a06:	4b0c      	ldr	r3, [pc, #48]	; (8006a38 <xQueueGenericSend+0x1f8>)
 8006a08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a0c:	601a      	str	r2, [r3, #0]
 8006a0e:	f3bf 8f4f 	dsb	sy
 8006a12:	f3bf 8f6f 	isb	sy
 8006a16:	e772      	b.n	80068fe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006a18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a1a:	f000 fa17 	bl	8006e4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a1e:	f000 fd55 	bl	80074cc <xTaskResumeAll>
 8006a22:	e76c      	b.n	80068fe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006a24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a26:	f000 fa11 	bl	8006e4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a2a:	f000 fd4f 	bl	80074cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006a2e:	2300      	movs	r3, #0
		}
	}
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3738      	adds	r7, #56	; 0x38
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	e000ed04 	.word	0xe000ed04

08006a3c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b08e      	sub	sp, #56	; 0x38
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	607a      	str	r2, [r7, #4]
 8006a48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d10a      	bne.n	8006a6a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a58:	f383 8811 	msr	BASEPRI, r3
 8006a5c:	f3bf 8f6f 	isb	sy
 8006a60:	f3bf 8f4f 	dsb	sy
 8006a64:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006a66:	bf00      	nop
 8006a68:	e7fe      	b.n	8006a68 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d103      	bne.n	8006a78 <xQueueGenericSendFromISR+0x3c>
 8006a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d101      	bne.n	8006a7c <xQueueGenericSendFromISR+0x40>
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e000      	b.n	8006a7e <xQueueGenericSendFromISR+0x42>
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d10a      	bne.n	8006a98 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a86:	f383 8811 	msr	BASEPRI, r3
 8006a8a:	f3bf 8f6f 	isb	sy
 8006a8e:	f3bf 8f4f 	dsb	sy
 8006a92:	623b      	str	r3, [r7, #32]
}
 8006a94:	bf00      	nop
 8006a96:	e7fe      	b.n	8006a96 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	2b02      	cmp	r3, #2
 8006a9c:	d103      	bne.n	8006aa6 <xQueueGenericSendFromISR+0x6a>
 8006a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d101      	bne.n	8006aaa <xQueueGenericSendFromISR+0x6e>
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e000      	b.n	8006aac <xQueueGenericSendFromISR+0x70>
 8006aaa:	2300      	movs	r3, #0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d10a      	bne.n	8006ac6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab4:	f383 8811 	msr	BASEPRI, r3
 8006ab8:	f3bf 8f6f 	isb	sy
 8006abc:	f3bf 8f4f 	dsb	sy
 8006ac0:	61fb      	str	r3, [r7, #28]
}
 8006ac2:	bf00      	nop
 8006ac4:	e7fe      	b.n	8006ac4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ac6:	f001 fee7 	bl	8008898 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006aca:	f3ef 8211 	mrs	r2, BASEPRI
 8006ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad2:	f383 8811 	msr	BASEPRI, r3
 8006ad6:	f3bf 8f6f 	isb	sy
 8006ada:	f3bf 8f4f 	dsb	sy
 8006ade:	61ba      	str	r2, [r7, #24]
 8006ae0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006ae2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d302      	bcc.n	8006af8 <xQueueGenericSendFromISR+0xbc>
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d12c      	bne.n	8006b52 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006afe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b02:	683a      	ldr	r2, [r7, #0]
 8006b04:	68b9      	ldr	r1, [r7, #8]
 8006b06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b08:	f000 f910 	bl	8006d2c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006b0c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b14:	d112      	bne.n	8006b3c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d016      	beq.n	8006b4c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b20:	3324      	adds	r3, #36	; 0x24
 8006b22:	4618      	mov	r0, r3
 8006b24:	f000 fef2 	bl	800790c <xTaskRemoveFromEventList>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00e      	beq.n	8006b4c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d00b      	beq.n	8006b4c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	601a      	str	r2, [r3, #0]
 8006b3a:	e007      	b.n	8006b4c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006b3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006b40:	3301      	adds	r3, #1
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	b25a      	sxtb	r2, r3
 8006b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006b50:	e001      	b.n	8006b56 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006b52:	2300      	movs	r3, #0
 8006b54:	637b      	str	r3, [r7, #52]	; 0x34
 8006b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b58:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006b60:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3738      	adds	r7, #56	; 0x38
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b08c      	sub	sp, #48	; 0x30
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d10a      	bne.n	8006b9c <xQueueReceive+0x30>
	__asm volatile
 8006b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8a:	f383 8811 	msr	BASEPRI, r3
 8006b8e:	f3bf 8f6f 	isb	sy
 8006b92:	f3bf 8f4f 	dsb	sy
 8006b96:	623b      	str	r3, [r7, #32]
}
 8006b98:	bf00      	nop
 8006b9a:	e7fe      	b.n	8006b9a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d103      	bne.n	8006baa <xQueueReceive+0x3e>
 8006ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d101      	bne.n	8006bae <xQueueReceive+0x42>
 8006baa:	2301      	movs	r3, #1
 8006bac:	e000      	b.n	8006bb0 <xQueueReceive+0x44>
 8006bae:	2300      	movs	r3, #0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d10a      	bne.n	8006bca <xQueueReceive+0x5e>
	__asm volatile
 8006bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb8:	f383 8811 	msr	BASEPRI, r3
 8006bbc:	f3bf 8f6f 	isb	sy
 8006bc0:	f3bf 8f4f 	dsb	sy
 8006bc4:	61fb      	str	r3, [r7, #28]
}
 8006bc6:	bf00      	nop
 8006bc8:	e7fe      	b.n	8006bc8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006bca:	f001 f867 	bl	8007c9c <xTaskGetSchedulerState>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d102      	bne.n	8006bda <xQueueReceive+0x6e>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d101      	bne.n	8006bde <xQueueReceive+0x72>
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e000      	b.n	8006be0 <xQueueReceive+0x74>
 8006bde:	2300      	movs	r3, #0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d10a      	bne.n	8006bfa <xQueueReceive+0x8e>
	__asm volatile
 8006be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be8:	f383 8811 	msr	BASEPRI, r3
 8006bec:	f3bf 8f6f 	isb	sy
 8006bf0:	f3bf 8f4f 	dsb	sy
 8006bf4:	61bb      	str	r3, [r7, #24]
}
 8006bf6:	bf00      	nop
 8006bf8:	e7fe      	b.n	8006bf8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006bfa:	f001 fd6b 	bl	80086d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c02:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d01f      	beq.n	8006c4a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006c0a:	68b9      	ldr	r1, [r7, #8]
 8006c0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c0e:	f000 f8f7 	bl	8006e00 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c14:	1e5a      	subs	r2, r3, #1
 8006c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c18:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00f      	beq.n	8006c42 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c24:	3310      	adds	r3, #16
 8006c26:	4618      	mov	r0, r3
 8006c28:	f000 fe70 	bl	800790c <xTaskRemoveFromEventList>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d007      	beq.n	8006c42 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006c32:	4b3d      	ldr	r3, [pc, #244]	; (8006d28 <xQueueReceive+0x1bc>)
 8006c34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c38:	601a      	str	r2, [r3, #0]
 8006c3a:	f3bf 8f4f 	dsb	sy
 8006c3e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006c42:	f001 fd77 	bl	8008734 <vPortExitCritical>
				return pdPASS;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e069      	b.n	8006d1e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d103      	bne.n	8006c58 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c50:	f001 fd70 	bl	8008734 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c54:	2300      	movs	r3, #0
 8006c56:	e062      	b.n	8006d1e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d106      	bne.n	8006c6c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c5e:	f107 0310 	add.w	r3, r7, #16
 8006c62:	4618      	mov	r0, r3
 8006c64:	f000 feb6 	bl	80079d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c6c:	f001 fd62 	bl	8008734 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c70:	f000 fc1e 	bl	80074b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c74:	f001 fd2e 	bl	80086d4 <vPortEnterCritical>
 8006c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c7e:	b25b      	sxtb	r3, r3
 8006c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c84:	d103      	bne.n	8006c8e <xQueueReceive+0x122>
 8006c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c94:	b25b      	sxtb	r3, r3
 8006c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c9a:	d103      	bne.n	8006ca4 <xQueueReceive+0x138>
 8006c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ca4:	f001 fd46 	bl	8008734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ca8:	1d3a      	adds	r2, r7, #4
 8006caa:	f107 0310 	add.w	r3, r7, #16
 8006cae:	4611      	mov	r1, r2
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f000 fea5 	bl	8007a00 <xTaskCheckForTimeOut>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d123      	bne.n	8006d04 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cbe:	f000 f917 	bl	8006ef0 <prvIsQueueEmpty>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d017      	beq.n	8006cf8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cca:	3324      	adds	r3, #36	; 0x24
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	4611      	mov	r1, r2
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f000 fdcb 	bl	800786c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006cd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cd8:	f000 f8b8 	bl	8006e4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006cdc:	f000 fbf6 	bl	80074cc <xTaskResumeAll>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d189      	bne.n	8006bfa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006ce6:	4b10      	ldr	r3, [pc, #64]	; (8006d28 <xQueueReceive+0x1bc>)
 8006ce8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cec:	601a      	str	r2, [r3, #0]
 8006cee:	f3bf 8f4f 	dsb	sy
 8006cf2:	f3bf 8f6f 	isb	sy
 8006cf6:	e780      	b.n	8006bfa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006cf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cfa:	f000 f8a7 	bl	8006e4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006cfe:	f000 fbe5 	bl	80074cc <xTaskResumeAll>
 8006d02:	e77a      	b.n	8006bfa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006d04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d06:	f000 f8a1 	bl	8006e4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d0a:	f000 fbdf 	bl	80074cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d10:	f000 f8ee 	bl	8006ef0 <prvIsQueueEmpty>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	f43f af6f 	beq.w	8006bfa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d1c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3730      	adds	r7, #48	; 0x30
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	e000ed04 	.word	0xe000ed04

08006d2c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b086      	sub	sp, #24
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d40:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d10d      	bne.n	8006d66 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d14d      	bne.n	8006dee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	4618      	mov	r0, r3
 8006d58:	f000 ffbe 	bl	8007cd8 <xTaskPriorityDisinherit>
 8006d5c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2200      	movs	r2, #0
 8006d62:	605a      	str	r2, [r3, #4]
 8006d64:	e043      	b.n	8006dee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d119      	bne.n	8006da0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6898      	ldr	r0, [r3, #8]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d74:	461a      	mov	r2, r3
 8006d76:	68b9      	ldr	r1, [r7, #8]
 8006d78:	f002 f852 	bl	8008e20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	689a      	ldr	r2, [r3, #8]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d84:	441a      	add	r2, r3
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	689a      	ldr	r2, [r3, #8]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d32b      	bcc.n	8006dee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	609a      	str	r2, [r3, #8]
 8006d9e:	e026      	b.n	8006dee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	68d8      	ldr	r0, [r3, #12]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da8:	461a      	mov	r2, r3
 8006daa:	68b9      	ldr	r1, [r7, #8]
 8006dac:	f002 f838 	bl	8008e20 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	68da      	ldr	r2, [r3, #12]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db8:	425b      	negs	r3, r3
 8006dba:	441a      	add	r2, r3
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	68da      	ldr	r2, [r3, #12]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d207      	bcs.n	8006ddc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	685a      	ldr	r2, [r3, #4]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd4:	425b      	negs	r3, r3
 8006dd6:	441a      	add	r2, r3
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	d105      	bne.n	8006dee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d002      	beq.n	8006dee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	3b01      	subs	r3, #1
 8006dec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	1c5a      	adds	r2, r3, #1
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006df6:	697b      	ldr	r3, [r7, #20]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3718      	adds	r7, #24
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d018      	beq.n	8006e44 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	68da      	ldr	r2, [r3, #12]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1a:	441a      	add	r2, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	68da      	ldr	r2, [r3, #12]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d303      	bcc.n	8006e34 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	68d9      	ldr	r1, [r3, #12]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	6838      	ldr	r0, [r7, #0]
 8006e40:	f001 ffee 	bl	8008e20 <memcpy>
	}
}
 8006e44:	bf00      	nop
 8006e46:	3708      	adds	r7, #8
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006e54:	f001 fc3e 	bl	80086d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e5e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e60:	e011      	b.n	8006e86 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d012      	beq.n	8006e90 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	3324      	adds	r3, #36	; 0x24
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f000 fd4c 	bl	800790c <xTaskRemoveFromEventList>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d001      	beq.n	8006e7e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006e7a:	f000 fe23 	bl	8007ac4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006e7e:	7bfb      	ldrb	r3, [r7, #15]
 8006e80:	3b01      	subs	r3, #1
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	dce9      	bgt.n	8006e62 <prvUnlockQueue+0x16>
 8006e8e:	e000      	b.n	8006e92 <prvUnlockQueue+0x46>
					break;
 8006e90:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	22ff      	movs	r2, #255	; 0xff
 8006e96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006e9a:	f001 fc4b 	bl	8008734 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006e9e:	f001 fc19 	bl	80086d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ea8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006eaa:	e011      	b.n	8006ed0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d012      	beq.n	8006eda <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	3310      	adds	r3, #16
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f000 fd27 	bl	800790c <xTaskRemoveFromEventList>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d001      	beq.n	8006ec8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006ec4:	f000 fdfe 	bl	8007ac4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006ec8:	7bbb      	ldrb	r3, [r7, #14]
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ed0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	dce9      	bgt.n	8006eac <prvUnlockQueue+0x60>
 8006ed8:	e000      	b.n	8006edc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006eda:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	22ff      	movs	r2, #255	; 0xff
 8006ee0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006ee4:	f001 fc26 	bl	8008734 <vPortExitCritical>
}
 8006ee8:	bf00      	nop
 8006eea:	3710      	adds	r7, #16
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ef8:	f001 fbec 	bl	80086d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d102      	bne.n	8006f0a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006f04:	2301      	movs	r3, #1
 8006f06:	60fb      	str	r3, [r7, #12]
 8006f08:	e001      	b.n	8006f0e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f0e:	f001 fc11 	bl	8008734 <vPortExitCritical>

	return xReturn;
 8006f12:	68fb      	ldr	r3, [r7, #12]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f24:	f001 fbd6 	bl	80086d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d102      	bne.n	8006f3a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006f34:	2301      	movs	r3, #1
 8006f36:	60fb      	str	r3, [r7, #12]
 8006f38:	e001      	b.n	8006f3e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f3e:	f001 fbf9 	bl	8008734 <vPortExitCritical>

	return xReturn;
 8006f42:	68fb      	ldr	r3, [r7, #12]
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f56:	2300      	movs	r3, #0
 8006f58:	60fb      	str	r3, [r7, #12]
 8006f5a:	e014      	b.n	8006f86 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006f5c:	4a0f      	ldr	r2, [pc, #60]	; (8006f9c <vQueueAddToRegistry+0x50>)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d10b      	bne.n	8006f80 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006f68:	490c      	ldr	r1, [pc, #48]	; (8006f9c <vQueueAddToRegistry+0x50>)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	683a      	ldr	r2, [r7, #0]
 8006f6e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006f72:	4a0a      	ldr	r2, [pc, #40]	; (8006f9c <vQueueAddToRegistry+0x50>)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	00db      	lsls	r3, r3, #3
 8006f78:	4413      	add	r3, r2
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006f7e:	e006      	b.n	8006f8e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	3301      	adds	r3, #1
 8006f84:	60fb      	str	r3, [r7, #12]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2b07      	cmp	r3, #7
 8006f8a:	d9e7      	bls.n	8006f5c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006f8c:	bf00      	nop
 8006f8e:	bf00      	nop
 8006f90:	3714      	adds	r7, #20
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop
 8006f9c:	20000a4c 	.word	0x20000a4c

08006fa0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b086      	sub	sp, #24
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006fb0:	f001 fb90 	bl	80086d4 <vPortEnterCritical>
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fba:	b25b      	sxtb	r3, r3
 8006fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc0:	d103      	bne.n	8006fca <vQueueWaitForMessageRestricted+0x2a>
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fd0:	b25b      	sxtb	r3, r3
 8006fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd6:	d103      	bne.n	8006fe0 <vQueueWaitForMessageRestricted+0x40>
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fe0:	f001 fba8 	bl	8008734 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d106      	bne.n	8006ffa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	3324      	adds	r3, #36	; 0x24
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	68b9      	ldr	r1, [r7, #8]
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f000 fc5d 	bl	80078b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006ffa:	6978      	ldr	r0, [r7, #20]
 8006ffc:	f7ff ff26 	bl	8006e4c <prvUnlockQueue>
	}
 8007000:	bf00      	nop
 8007002:	3718      	adds	r7, #24
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007008:	b580      	push	{r7, lr}
 800700a:	b08e      	sub	sp, #56	; 0x38
 800700c:	af04      	add	r7, sp, #16
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	60b9      	str	r1, [r7, #8]
 8007012:	607a      	str	r2, [r7, #4]
 8007014:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007018:	2b00      	cmp	r3, #0
 800701a:	d10a      	bne.n	8007032 <xTaskCreateStatic+0x2a>
	__asm volatile
 800701c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007020:	f383 8811 	msr	BASEPRI, r3
 8007024:	f3bf 8f6f 	isb	sy
 8007028:	f3bf 8f4f 	dsb	sy
 800702c:	623b      	str	r3, [r7, #32]
}
 800702e:	bf00      	nop
 8007030:	e7fe      	b.n	8007030 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007034:	2b00      	cmp	r3, #0
 8007036:	d10a      	bne.n	800704e <xTaskCreateStatic+0x46>
	__asm volatile
 8007038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703c:	f383 8811 	msr	BASEPRI, r3
 8007040:	f3bf 8f6f 	isb	sy
 8007044:	f3bf 8f4f 	dsb	sy
 8007048:	61fb      	str	r3, [r7, #28]
}
 800704a:	bf00      	nop
 800704c:	e7fe      	b.n	800704c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800704e:	23a8      	movs	r3, #168	; 0xa8
 8007050:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	2ba8      	cmp	r3, #168	; 0xa8
 8007056:	d00a      	beq.n	800706e <xTaskCreateStatic+0x66>
	__asm volatile
 8007058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705c:	f383 8811 	msr	BASEPRI, r3
 8007060:	f3bf 8f6f 	isb	sy
 8007064:	f3bf 8f4f 	dsb	sy
 8007068:	61bb      	str	r3, [r7, #24]
}
 800706a:	bf00      	nop
 800706c:	e7fe      	b.n	800706c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800706e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007070:	2b00      	cmp	r3, #0
 8007072:	d01e      	beq.n	80070b2 <xTaskCreateStatic+0xaa>
 8007074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007076:	2b00      	cmp	r3, #0
 8007078:	d01b      	beq.n	80070b2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800707a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800707e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007080:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007082:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007086:	2202      	movs	r2, #2
 8007088:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800708c:	2300      	movs	r3, #0
 800708e:	9303      	str	r3, [sp, #12]
 8007090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007092:	9302      	str	r3, [sp, #8]
 8007094:	f107 0314 	add.w	r3, r7, #20
 8007098:	9301      	str	r3, [sp, #4]
 800709a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709c:	9300      	str	r3, [sp, #0]
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	68b9      	ldr	r1, [r7, #8]
 80070a4:	68f8      	ldr	r0, [r7, #12]
 80070a6:	f000 f851 	bl	800714c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80070aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80070ac:	f000 f8ec 	bl	8007288 <prvAddNewTaskToReadyList>
 80070b0:	e001      	b.n	80070b6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80070b2:	2300      	movs	r3, #0
 80070b4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80070b6:	697b      	ldr	r3, [r7, #20]
	}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3728      	adds	r7, #40	; 0x28
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b08c      	sub	sp, #48	; 0x30
 80070c4:	af04      	add	r7, sp, #16
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	60b9      	str	r1, [r7, #8]
 80070ca:	603b      	str	r3, [r7, #0]
 80070cc:	4613      	mov	r3, r2
 80070ce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070d0:	88fb      	ldrh	r3, [r7, #6]
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	4618      	mov	r0, r3
 80070d6:	f001 fc1f 	bl	8008918 <pvPortMalloc>
 80070da:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00e      	beq.n	8007100 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80070e2:	20a8      	movs	r0, #168	; 0xa8
 80070e4:	f001 fc18 	bl	8008918 <pvPortMalloc>
 80070e8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d003      	beq.n	80070f8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	631a      	str	r2, [r3, #48]	; 0x30
 80070f6:	e005      	b.n	8007104 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80070f8:	6978      	ldr	r0, [r7, #20]
 80070fa:	f001 fcd1 	bl	8008aa0 <vPortFree>
 80070fe:	e001      	b.n	8007104 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007100:	2300      	movs	r3, #0
 8007102:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d017      	beq.n	800713a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800710a:	69fb      	ldr	r3, [r7, #28]
 800710c:	2200      	movs	r2, #0
 800710e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007112:	88fa      	ldrh	r2, [r7, #6]
 8007114:	2300      	movs	r3, #0
 8007116:	9303      	str	r3, [sp, #12]
 8007118:	69fb      	ldr	r3, [r7, #28]
 800711a:	9302      	str	r3, [sp, #8]
 800711c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800711e:	9301      	str	r3, [sp, #4]
 8007120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007122:	9300      	str	r3, [sp, #0]
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	68b9      	ldr	r1, [r7, #8]
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	f000 f80f 	bl	800714c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800712e:	69f8      	ldr	r0, [r7, #28]
 8007130:	f000 f8aa 	bl	8007288 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007134:	2301      	movs	r3, #1
 8007136:	61bb      	str	r3, [r7, #24]
 8007138:	e002      	b.n	8007140 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800713a:	f04f 33ff 	mov.w	r3, #4294967295
 800713e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007140:	69bb      	ldr	r3, [r7, #24]
	}
 8007142:	4618      	mov	r0, r3
 8007144:	3720      	adds	r7, #32
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
	...

0800714c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b088      	sub	sp, #32
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]
 8007158:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800715a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	461a      	mov	r2, r3
 8007164:	21a5      	movs	r1, #165	; 0xa5
 8007166:	f001 fdd1 	bl	8008d0c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800716a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007174:	3b01      	subs	r3, #1
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	4413      	add	r3, r2
 800717a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	f023 0307 	bic.w	r3, r3, #7
 8007182:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	f003 0307 	and.w	r3, r3, #7
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00a      	beq.n	80071a4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800718e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007192:	f383 8811 	msr	BASEPRI, r3
 8007196:	f3bf 8f6f 	isb	sy
 800719a:	f3bf 8f4f 	dsb	sy
 800719e:	617b      	str	r3, [r7, #20]
}
 80071a0:	bf00      	nop
 80071a2:	e7fe      	b.n	80071a2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80071a4:	2300      	movs	r3, #0
 80071a6:	61fb      	str	r3, [r7, #28]
 80071a8:	e012      	b.n	80071d0 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80071aa:	68ba      	ldr	r2, [r7, #8]
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	4413      	add	r3, r2
 80071b0:	7819      	ldrb	r1, [r3, #0]
 80071b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071b4:	69fb      	ldr	r3, [r7, #28]
 80071b6:	4413      	add	r3, r2
 80071b8:	3334      	adds	r3, #52	; 0x34
 80071ba:	460a      	mov	r2, r1
 80071bc:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80071be:	68ba      	ldr	r2, [r7, #8]
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	4413      	add	r3, r2
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d006      	beq.n	80071d8 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	3301      	adds	r3, #1
 80071ce:	61fb      	str	r3, [r7, #28]
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	2b0f      	cmp	r3, #15
 80071d4:	d9e9      	bls.n	80071aa <prvInitialiseNewTask+0x5e>
 80071d6:	e000      	b.n	80071da <prvInitialiseNewTask+0x8e>
		{
			break;
 80071d8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80071da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80071e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e4:	2b37      	cmp	r3, #55	; 0x37
 80071e6:	d901      	bls.n	80071ec <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80071e8:	2337      	movs	r3, #55	; 0x37
 80071ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80071ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80071f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071f6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80071f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fa:	2200      	movs	r2, #0
 80071fc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80071fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007200:	3304      	adds	r3, #4
 8007202:	4618      	mov	r0, r3
 8007204:	f7ff f986 	bl	8006514 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800720a:	3318      	adds	r3, #24
 800720c:	4618      	mov	r0, r3
 800720e:	f7ff f981 	bl	8006514 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007214:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007216:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800721e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007220:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007226:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722a:	2200      	movs	r2, #0
 800722c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007232:	2200      	movs	r2, #0
 8007234:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723a:	3354      	adds	r3, #84	; 0x54
 800723c:	224c      	movs	r2, #76	; 0x4c
 800723e:	2100      	movs	r1, #0
 8007240:	4618      	mov	r0, r3
 8007242:	f001 fd63 	bl	8008d0c <memset>
 8007246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007248:	4a0c      	ldr	r2, [pc, #48]	; (800727c <prvInitialiseNewTask+0x130>)
 800724a:	659a      	str	r2, [r3, #88]	; 0x58
 800724c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724e:	4a0c      	ldr	r2, [pc, #48]	; (8007280 <prvInitialiseNewTask+0x134>)
 8007250:	65da      	str	r2, [r3, #92]	; 0x5c
 8007252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007254:	4a0b      	ldr	r2, [pc, #44]	; (8007284 <prvInitialiseNewTask+0x138>)
 8007256:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007258:	683a      	ldr	r2, [r7, #0]
 800725a:	68f9      	ldr	r1, [r7, #12]
 800725c:	69b8      	ldr	r0, [r7, #24]
 800725e:	f001 f90f 	bl	8008480 <pxPortInitialiseStack>
 8007262:	4602      	mov	r2, r0
 8007264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007266:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800726a:	2b00      	cmp	r3, #0
 800726c:	d002      	beq.n	8007274 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800726e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007270:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007272:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007274:	bf00      	nop
 8007276:	3720      	adds	r7, #32
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}
 800727c:	20001cd8 	.word	0x20001cd8
 8007280:	20001d40 	.word	0x20001d40
 8007284:	20001da8 	.word	0x20001da8

08007288 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007290:	f001 fa20 	bl	80086d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007294:	4b2d      	ldr	r3, [pc, #180]	; (800734c <prvAddNewTaskToReadyList+0xc4>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	3301      	adds	r3, #1
 800729a:	4a2c      	ldr	r2, [pc, #176]	; (800734c <prvAddNewTaskToReadyList+0xc4>)
 800729c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800729e:	4b2c      	ldr	r3, [pc, #176]	; (8007350 <prvAddNewTaskToReadyList+0xc8>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d109      	bne.n	80072ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80072a6:	4a2a      	ldr	r2, [pc, #168]	; (8007350 <prvAddNewTaskToReadyList+0xc8>)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80072ac:	4b27      	ldr	r3, [pc, #156]	; (800734c <prvAddNewTaskToReadyList+0xc4>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d110      	bne.n	80072d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80072b4:	f000 fc2a 	bl	8007b0c <prvInitialiseTaskLists>
 80072b8:	e00d      	b.n	80072d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80072ba:	4b26      	ldr	r3, [pc, #152]	; (8007354 <prvAddNewTaskToReadyList+0xcc>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d109      	bne.n	80072d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80072c2:	4b23      	ldr	r3, [pc, #140]	; (8007350 <prvAddNewTaskToReadyList+0xc8>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d802      	bhi.n	80072d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80072d0:	4a1f      	ldr	r2, [pc, #124]	; (8007350 <prvAddNewTaskToReadyList+0xc8>)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80072d6:	4b20      	ldr	r3, [pc, #128]	; (8007358 <prvAddNewTaskToReadyList+0xd0>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	3301      	adds	r3, #1
 80072dc:	4a1e      	ldr	r2, [pc, #120]	; (8007358 <prvAddNewTaskToReadyList+0xd0>)
 80072de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80072e0:	4b1d      	ldr	r3, [pc, #116]	; (8007358 <prvAddNewTaskToReadyList+0xd0>)
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ec:	4b1b      	ldr	r3, [pc, #108]	; (800735c <prvAddNewTaskToReadyList+0xd4>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d903      	bls.n	80072fc <prvAddNewTaskToReadyList+0x74>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f8:	4a18      	ldr	r2, [pc, #96]	; (800735c <prvAddNewTaskToReadyList+0xd4>)
 80072fa:	6013      	str	r3, [r2, #0]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007300:	4613      	mov	r3, r2
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	4413      	add	r3, r2
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	4a15      	ldr	r2, [pc, #84]	; (8007360 <prvAddNewTaskToReadyList+0xd8>)
 800730a:	441a      	add	r2, r3
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	3304      	adds	r3, #4
 8007310:	4619      	mov	r1, r3
 8007312:	4610      	mov	r0, r2
 8007314:	f7ff f90b 	bl	800652e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007318:	f001 fa0c 	bl	8008734 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800731c:	4b0d      	ldr	r3, [pc, #52]	; (8007354 <prvAddNewTaskToReadyList+0xcc>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d00e      	beq.n	8007342 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007324:	4b0a      	ldr	r3, [pc, #40]	; (8007350 <prvAddNewTaskToReadyList+0xc8>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800732e:	429a      	cmp	r2, r3
 8007330:	d207      	bcs.n	8007342 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007332:	4b0c      	ldr	r3, [pc, #48]	; (8007364 <prvAddNewTaskToReadyList+0xdc>)
 8007334:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007338:	601a      	str	r2, [r3, #0]
 800733a:	f3bf 8f4f 	dsb	sy
 800733e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007342:	bf00      	nop
 8007344:	3708      	adds	r7, #8
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	20000f60 	.word	0x20000f60
 8007350:	20000a8c 	.word	0x20000a8c
 8007354:	20000f6c 	.word	0x20000f6c
 8007358:	20000f7c 	.word	0x20000f7c
 800735c:	20000f68 	.word	0x20000f68
 8007360:	20000a90 	.word	0x20000a90
 8007364:	e000ed04 	.word	0xe000ed04

08007368 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007370:	2300      	movs	r3, #0
 8007372:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d017      	beq.n	80073aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800737a:	4b13      	ldr	r3, [pc, #76]	; (80073c8 <vTaskDelay+0x60>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00a      	beq.n	8007398 <vTaskDelay+0x30>
	__asm volatile
 8007382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007386:	f383 8811 	msr	BASEPRI, r3
 800738a:	f3bf 8f6f 	isb	sy
 800738e:	f3bf 8f4f 	dsb	sy
 8007392:	60bb      	str	r3, [r7, #8]
}
 8007394:	bf00      	nop
 8007396:	e7fe      	b.n	8007396 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007398:	f000 f88a 	bl	80074b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800739c:	2100      	movs	r1, #0
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 fd08 	bl	8007db4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80073a4:	f000 f892 	bl	80074cc <xTaskResumeAll>
 80073a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d107      	bne.n	80073c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80073b0:	4b06      	ldr	r3, [pc, #24]	; (80073cc <vTaskDelay+0x64>)
 80073b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073b6:	601a      	str	r2, [r3, #0]
 80073b8:	f3bf 8f4f 	dsb	sy
 80073bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80073c0:	bf00      	nop
 80073c2:	3710      	adds	r7, #16
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	20000f88 	.word	0x20000f88
 80073cc:	e000ed04 	.word	0xe000ed04

080073d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b08a      	sub	sp, #40	; 0x28
 80073d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80073d6:	2300      	movs	r3, #0
 80073d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80073da:	2300      	movs	r3, #0
 80073dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80073de:	463a      	mov	r2, r7
 80073e0:	1d39      	adds	r1, r7, #4
 80073e2:	f107 0308 	add.w	r3, r7, #8
 80073e6:	4618      	mov	r0, r3
 80073e8:	f7ff f840 	bl	800646c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80073ec:	6839      	ldr	r1, [r7, #0]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	68ba      	ldr	r2, [r7, #8]
 80073f2:	9202      	str	r2, [sp, #8]
 80073f4:	9301      	str	r3, [sp, #4]
 80073f6:	2300      	movs	r3, #0
 80073f8:	9300      	str	r3, [sp, #0]
 80073fa:	2300      	movs	r3, #0
 80073fc:	460a      	mov	r2, r1
 80073fe:	4924      	ldr	r1, [pc, #144]	; (8007490 <vTaskStartScheduler+0xc0>)
 8007400:	4824      	ldr	r0, [pc, #144]	; (8007494 <vTaskStartScheduler+0xc4>)
 8007402:	f7ff fe01 	bl	8007008 <xTaskCreateStatic>
 8007406:	4603      	mov	r3, r0
 8007408:	4a23      	ldr	r2, [pc, #140]	; (8007498 <vTaskStartScheduler+0xc8>)
 800740a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800740c:	4b22      	ldr	r3, [pc, #136]	; (8007498 <vTaskStartScheduler+0xc8>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d002      	beq.n	800741a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007414:	2301      	movs	r3, #1
 8007416:	617b      	str	r3, [r7, #20]
 8007418:	e001      	b.n	800741e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800741a:	2300      	movs	r3, #0
 800741c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	2b01      	cmp	r3, #1
 8007422:	d102      	bne.n	800742a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007424:	f000 fd1a 	bl	8007e5c <xTimerCreateTimerTask>
 8007428:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	2b01      	cmp	r3, #1
 800742e:	d11b      	bne.n	8007468 <vTaskStartScheduler+0x98>
	__asm volatile
 8007430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007434:	f383 8811 	msr	BASEPRI, r3
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	613b      	str	r3, [r7, #16]
}
 8007442:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007444:	4b15      	ldr	r3, [pc, #84]	; (800749c <vTaskStartScheduler+0xcc>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	3354      	adds	r3, #84	; 0x54
 800744a:	4a15      	ldr	r2, [pc, #84]	; (80074a0 <vTaskStartScheduler+0xd0>)
 800744c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800744e:	4b15      	ldr	r3, [pc, #84]	; (80074a4 <vTaskStartScheduler+0xd4>)
 8007450:	f04f 32ff 	mov.w	r2, #4294967295
 8007454:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007456:	4b14      	ldr	r3, [pc, #80]	; (80074a8 <vTaskStartScheduler+0xd8>)
 8007458:	2201      	movs	r2, #1
 800745a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800745c:	4b13      	ldr	r3, [pc, #76]	; (80074ac <vTaskStartScheduler+0xdc>)
 800745e:	2200      	movs	r2, #0
 8007460:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007462:	f001 f895 	bl	8008590 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007466:	e00e      	b.n	8007486 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800746e:	d10a      	bne.n	8007486 <vTaskStartScheduler+0xb6>
	__asm volatile
 8007470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007474:	f383 8811 	msr	BASEPRI, r3
 8007478:	f3bf 8f6f 	isb	sy
 800747c:	f3bf 8f4f 	dsb	sy
 8007480:	60fb      	str	r3, [r7, #12]
}
 8007482:	bf00      	nop
 8007484:	e7fe      	b.n	8007484 <vTaskStartScheduler+0xb4>
}
 8007486:	bf00      	nop
 8007488:	3718      	adds	r7, #24
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	08009c54 	.word	0x08009c54
 8007494:	08007add 	.word	0x08007add
 8007498:	20000f84 	.word	0x20000f84
 800749c:	20000a8c 	.word	0x20000a8c
 80074a0:	20000064 	.word	0x20000064
 80074a4:	20000f80 	.word	0x20000f80
 80074a8:	20000f6c 	.word	0x20000f6c
 80074ac:	20000f64 	.word	0x20000f64

080074b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80074b0:	b480      	push	{r7}
 80074b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80074b4:	4b04      	ldr	r3, [pc, #16]	; (80074c8 <vTaskSuspendAll+0x18>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	3301      	adds	r3, #1
 80074ba:	4a03      	ldr	r2, [pc, #12]	; (80074c8 <vTaskSuspendAll+0x18>)
 80074bc:	6013      	str	r3, [r2, #0]
}
 80074be:	bf00      	nop
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr
 80074c8:	20000f88 	.word	0x20000f88

080074cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80074d2:	2300      	movs	r3, #0
 80074d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80074d6:	2300      	movs	r3, #0
 80074d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80074da:	4b42      	ldr	r3, [pc, #264]	; (80075e4 <xTaskResumeAll+0x118>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d10a      	bne.n	80074f8 <xTaskResumeAll+0x2c>
	__asm volatile
 80074e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e6:	f383 8811 	msr	BASEPRI, r3
 80074ea:	f3bf 8f6f 	isb	sy
 80074ee:	f3bf 8f4f 	dsb	sy
 80074f2:	603b      	str	r3, [r7, #0]
}
 80074f4:	bf00      	nop
 80074f6:	e7fe      	b.n	80074f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80074f8:	f001 f8ec 	bl	80086d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80074fc:	4b39      	ldr	r3, [pc, #228]	; (80075e4 <xTaskResumeAll+0x118>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	3b01      	subs	r3, #1
 8007502:	4a38      	ldr	r2, [pc, #224]	; (80075e4 <xTaskResumeAll+0x118>)
 8007504:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007506:	4b37      	ldr	r3, [pc, #220]	; (80075e4 <xTaskResumeAll+0x118>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d162      	bne.n	80075d4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800750e:	4b36      	ldr	r3, [pc, #216]	; (80075e8 <xTaskResumeAll+0x11c>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d05e      	beq.n	80075d4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007516:	e02f      	b.n	8007578 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007518:	4b34      	ldr	r3, [pc, #208]	; (80075ec <xTaskResumeAll+0x120>)
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	3318      	adds	r3, #24
 8007524:	4618      	mov	r0, r3
 8007526:	f7ff f85f 	bl	80065e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	3304      	adds	r3, #4
 800752e:	4618      	mov	r0, r3
 8007530:	f7ff f85a 	bl	80065e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007538:	4b2d      	ldr	r3, [pc, #180]	; (80075f0 <xTaskResumeAll+0x124>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	429a      	cmp	r2, r3
 800753e:	d903      	bls.n	8007548 <xTaskResumeAll+0x7c>
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007544:	4a2a      	ldr	r2, [pc, #168]	; (80075f0 <xTaskResumeAll+0x124>)
 8007546:	6013      	str	r3, [r2, #0]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800754c:	4613      	mov	r3, r2
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	4413      	add	r3, r2
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	4a27      	ldr	r2, [pc, #156]	; (80075f4 <xTaskResumeAll+0x128>)
 8007556:	441a      	add	r2, r3
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	3304      	adds	r3, #4
 800755c:	4619      	mov	r1, r3
 800755e:	4610      	mov	r0, r2
 8007560:	f7fe ffe5 	bl	800652e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007568:	4b23      	ldr	r3, [pc, #140]	; (80075f8 <xTaskResumeAll+0x12c>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756e:	429a      	cmp	r2, r3
 8007570:	d302      	bcc.n	8007578 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007572:	4b22      	ldr	r3, [pc, #136]	; (80075fc <xTaskResumeAll+0x130>)
 8007574:	2201      	movs	r2, #1
 8007576:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007578:	4b1c      	ldr	r3, [pc, #112]	; (80075ec <xTaskResumeAll+0x120>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d1cb      	bne.n	8007518 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d001      	beq.n	800758a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007586:	f000 fb63 	bl	8007c50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800758a:	4b1d      	ldr	r3, [pc, #116]	; (8007600 <xTaskResumeAll+0x134>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d010      	beq.n	80075b8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007596:	f000 f847 	bl	8007628 <xTaskIncrementTick>
 800759a:	4603      	mov	r3, r0
 800759c:	2b00      	cmp	r3, #0
 800759e:	d002      	beq.n	80075a6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80075a0:	4b16      	ldr	r3, [pc, #88]	; (80075fc <xTaskResumeAll+0x130>)
 80075a2:	2201      	movs	r2, #1
 80075a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	3b01      	subs	r3, #1
 80075aa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d1f1      	bne.n	8007596 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80075b2:	4b13      	ldr	r3, [pc, #76]	; (8007600 <xTaskResumeAll+0x134>)
 80075b4:	2200      	movs	r2, #0
 80075b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80075b8:	4b10      	ldr	r3, [pc, #64]	; (80075fc <xTaskResumeAll+0x130>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d009      	beq.n	80075d4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80075c0:	2301      	movs	r3, #1
 80075c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80075c4:	4b0f      	ldr	r3, [pc, #60]	; (8007604 <xTaskResumeAll+0x138>)
 80075c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075ca:	601a      	str	r2, [r3, #0]
 80075cc:	f3bf 8f4f 	dsb	sy
 80075d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80075d4:	f001 f8ae 	bl	8008734 <vPortExitCritical>

	return xAlreadyYielded;
 80075d8:	68bb      	ldr	r3, [r7, #8]
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3710      	adds	r7, #16
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop
 80075e4:	20000f88 	.word	0x20000f88
 80075e8:	20000f60 	.word	0x20000f60
 80075ec:	20000f20 	.word	0x20000f20
 80075f0:	20000f68 	.word	0x20000f68
 80075f4:	20000a90 	.word	0x20000a90
 80075f8:	20000a8c 	.word	0x20000a8c
 80075fc:	20000f74 	.word	0x20000f74
 8007600:	20000f70 	.word	0x20000f70
 8007604:	e000ed04 	.word	0xe000ed04

08007608 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800760e:	4b05      	ldr	r3, [pc, #20]	; (8007624 <xTaskGetTickCount+0x1c>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007614:	687b      	ldr	r3, [r7, #4]
}
 8007616:	4618      	mov	r0, r3
 8007618:	370c      	adds	r7, #12
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop
 8007624:	20000f64 	.word	0x20000f64

08007628 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b086      	sub	sp, #24
 800762c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800762e:	2300      	movs	r3, #0
 8007630:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007632:	4b51      	ldr	r3, [pc, #324]	; (8007778 <xTaskIncrementTick+0x150>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	f040 808e 	bne.w	8007758 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800763c:	4b4f      	ldr	r3, [pc, #316]	; (800777c <xTaskIncrementTick+0x154>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	3301      	adds	r3, #1
 8007642:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007644:	4a4d      	ldr	r2, [pc, #308]	; (800777c <xTaskIncrementTick+0x154>)
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d120      	bne.n	8007692 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007650:	4b4b      	ldr	r3, [pc, #300]	; (8007780 <xTaskIncrementTick+0x158>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00a      	beq.n	8007670 <xTaskIncrementTick+0x48>
	__asm volatile
 800765a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765e:	f383 8811 	msr	BASEPRI, r3
 8007662:	f3bf 8f6f 	isb	sy
 8007666:	f3bf 8f4f 	dsb	sy
 800766a:	603b      	str	r3, [r7, #0]
}
 800766c:	bf00      	nop
 800766e:	e7fe      	b.n	800766e <xTaskIncrementTick+0x46>
 8007670:	4b43      	ldr	r3, [pc, #268]	; (8007780 <xTaskIncrementTick+0x158>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	60fb      	str	r3, [r7, #12]
 8007676:	4b43      	ldr	r3, [pc, #268]	; (8007784 <xTaskIncrementTick+0x15c>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a41      	ldr	r2, [pc, #260]	; (8007780 <xTaskIncrementTick+0x158>)
 800767c:	6013      	str	r3, [r2, #0]
 800767e:	4a41      	ldr	r2, [pc, #260]	; (8007784 <xTaskIncrementTick+0x15c>)
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6013      	str	r3, [r2, #0]
 8007684:	4b40      	ldr	r3, [pc, #256]	; (8007788 <xTaskIncrementTick+0x160>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	3301      	adds	r3, #1
 800768a:	4a3f      	ldr	r2, [pc, #252]	; (8007788 <xTaskIncrementTick+0x160>)
 800768c:	6013      	str	r3, [r2, #0]
 800768e:	f000 fadf 	bl	8007c50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007692:	4b3e      	ldr	r3, [pc, #248]	; (800778c <xTaskIncrementTick+0x164>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	693a      	ldr	r2, [r7, #16]
 8007698:	429a      	cmp	r2, r3
 800769a:	d34e      	bcc.n	800773a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800769c:	4b38      	ldr	r3, [pc, #224]	; (8007780 <xTaskIncrementTick+0x158>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d101      	bne.n	80076aa <xTaskIncrementTick+0x82>
 80076a6:	2301      	movs	r3, #1
 80076a8:	e000      	b.n	80076ac <xTaskIncrementTick+0x84>
 80076aa:	2300      	movs	r3, #0
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d004      	beq.n	80076ba <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076b0:	4b36      	ldr	r3, [pc, #216]	; (800778c <xTaskIncrementTick+0x164>)
 80076b2:	f04f 32ff 	mov.w	r2, #4294967295
 80076b6:	601a      	str	r2, [r3, #0]
					break;
 80076b8:	e03f      	b.n	800773a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80076ba:	4b31      	ldr	r3, [pc, #196]	; (8007780 <xTaskIncrementTick+0x158>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80076ca:	693a      	ldr	r2, [r7, #16]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d203      	bcs.n	80076da <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80076d2:	4a2e      	ldr	r2, [pc, #184]	; (800778c <xTaskIncrementTick+0x164>)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6013      	str	r3, [r2, #0]
						break;
 80076d8:	e02f      	b.n	800773a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	3304      	adds	r3, #4
 80076de:	4618      	mov	r0, r3
 80076e0:	f7fe ff82 	bl	80065e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d004      	beq.n	80076f6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	3318      	adds	r3, #24
 80076f0:	4618      	mov	r0, r3
 80076f2:	f7fe ff79 	bl	80065e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076fa:	4b25      	ldr	r3, [pc, #148]	; (8007790 <xTaskIncrementTick+0x168>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d903      	bls.n	800770a <xTaskIncrementTick+0xe2>
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007706:	4a22      	ldr	r2, [pc, #136]	; (8007790 <xTaskIncrementTick+0x168>)
 8007708:	6013      	str	r3, [r2, #0]
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800770e:	4613      	mov	r3, r2
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	4413      	add	r3, r2
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	4a1f      	ldr	r2, [pc, #124]	; (8007794 <xTaskIncrementTick+0x16c>)
 8007718:	441a      	add	r2, r3
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	3304      	adds	r3, #4
 800771e:	4619      	mov	r1, r3
 8007720:	4610      	mov	r0, r2
 8007722:	f7fe ff04 	bl	800652e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800772a:	4b1b      	ldr	r3, [pc, #108]	; (8007798 <xTaskIncrementTick+0x170>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007730:	429a      	cmp	r2, r3
 8007732:	d3b3      	bcc.n	800769c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007734:	2301      	movs	r3, #1
 8007736:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007738:	e7b0      	b.n	800769c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800773a:	4b17      	ldr	r3, [pc, #92]	; (8007798 <xTaskIncrementTick+0x170>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007740:	4914      	ldr	r1, [pc, #80]	; (8007794 <xTaskIncrementTick+0x16c>)
 8007742:	4613      	mov	r3, r2
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	4413      	add	r3, r2
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	440b      	add	r3, r1
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2b01      	cmp	r3, #1
 8007750:	d907      	bls.n	8007762 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007752:	2301      	movs	r3, #1
 8007754:	617b      	str	r3, [r7, #20]
 8007756:	e004      	b.n	8007762 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007758:	4b10      	ldr	r3, [pc, #64]	; (800779c <xTaskIncrementTick+0x174>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	3301      	adds	r3, #1
 800775e:	4a0f      	ldr	r2, [pc, #60]	; (800779c <xTaskIncrementTick+0x174>)
 8007760:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007762:	4b0f      	ldr	r3, [pc, #60]	; (80077a0 <xTaskIncrementTick+0x178>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d001      	beq.n	800776e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800776a:	2301      	movs	r3, #1
 800776c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800776e:	697b      	ldr	r3, [r7, #20]
}
 8007770:	4618      	mov	r0, r3
 8007772:	3718      	adds	r7, #24
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}
 8007778:	20000f88 	.word	0x20000f88
 800777c:	20000f64 	.word	0x20000f64
 8007780:	20000f18 	.word	0x20000f18
 8007784:	20000f1c 	.word	0x20000f1c
 8007788:	20000f78 	.word	0x20000f78
 800778c:	20000f80 	.word	0x20000f80
 8007790:	20000f68 	.word	0x20000f68
 8007794:	20000a90 	.word	0x20000a90
 8007798:	20000a8c 	.word	0x20000a8c
 800779c:	20000f70 	.word	0x20000f70
 80077a0:	20000f74 	.word	0x20000f74

080077a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80077a4:	b480      	push	{r7}
 80077a6:	b085      	sub	sp, #20
 80077a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80077aa:	4b2a      	ldr	r3, [pc, #168]	; (8007854 <vTaskSwitchContext+0xb0>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d003      	beq.n	80077ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80077b2:	4b29      	ldr	r3, [pc, #164]	; (8007858 <vTaskSwitchContext+0xb4>)
 80077b4:	2201      	movs	r2, #1
 80077b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80077b8:	e046      	b.n	8007848 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80077ba:	4b27      	ldr	r3, [pc, #156]	; (8007858 <vTaskSwitchContext+0xb4>)
 80077bc:	2200      	movs	r2, #0
 80077be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80077c0:	4b26      	ldr	r3, [pc, #152]	; (800785c <vTaskSwitchContext+0xb8>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	60fb      	str	r3, [r7, #12]
 80077c6:	e010      	b.n	80077ea <vTaskSwitchContext+0x46>
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d10a      	bne.n	80077e4 <vTaskSwitchContext+0x40>
	__asm volatile
 80077ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d2:	f383 8811 	msr	BASEPRI, r3
 80077d6:	f3bf 8f6f 	isb	sy
 80077da:	f3bf 8f4f 	dsb	sy
 80077de:	607b      	str	r3, [r7, #4]
}
 80077e0:	bf00      	nop
 80077e2:	e7fe      	b.n	80077e2 <vTaskSwitchContext+0x3e>
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	3b01      	subs	r3, #1
 80077e8:	60fb      	str	r3, [r7, #12]
 80077ea:	491d      	ldr	r1, [pc, #116]	; (8007860 <vTaskSwitchContext+0xbc>)
 80077ec:	68fa      	ldr	r2, [r7, #12]
 80077ee:	4613      	mov	r3, r2
 80077f0:	009b      	lsls	r3, r3, #2
 80077f2:	4413      	add	r3, r2
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	440b      	add	r3, r1
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d0e4      	beq.n	80077c8 <vTaskSwitchContext+0x24>
 80077fe:	68fa      	ldr	r2, [r7, #12]
 8007800:	4613      	mov	r3, r2
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	4413      	add	r3, r2
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	4a15      	ldr	r2, [pc, #84]	; (8007860 <vTaskSwitchContext+0xbc>)
 800780a:	4413      	add	r3, r2
 800780c:	60bb      	str	r3, [r7, #8]
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	685a      	ldr	r2, [r3, #4]
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	605a      	str	r2, [r3, #4]
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	685a      	ldr	r2, [r3, #4]
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	3308      	adds	r3, #8
 8007820:	429a      	cmp	r2, r3
 8007822:	d104      	bne.n	800782e <vTaskSwitchContext+0x8a>
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	685a      	ldr	r2, [r3, #4]
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	605a      	str	r2, [r3, #4]
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	4a0b      	ldr	r2, [pc, #44]	; (8007864 <vTaskSwitchContext+0xc0>)
 8007836:	6013      	str	r3, [r2, #0]
 8007838:	4a08      	ldr	r2, [pc, #32]	; (800785c <vTaskSwitchContext+0xb8>)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800783e:	4b09      	ldr	r3, [pc, #36]	; (8007864 <vTaskSwitchContext+0xc0>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	3354      	adds	r3, #84	; 0x54
 8007844:	4a08      	ldr	r2, [pc, #32]	; (8007868 <vTaskSwitchContext+0xc4>)
 8007846:	6013      	str	r3, [r2, #0]
}
 8007848:	bf00      	nop
 800784a:	3714      	adds	r7, #20
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr
 8007854:	20000f88 	.word	0x20000f88
 8007858:	20000f74 	.word	0x20000f74
 800785c:	20000f68 	.word	0x20000f68
 8007860:	20000a90 	.word	0x20000a90
 8007864:	20000a8c 	.word	0x20000a8c
 8007868:	20000064 	.word	0x20000064

0800786c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d10a      	bne.n	8007892 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800787c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007880:	f383 8811 	msr	BASEPRI, r3
 8007884:	f3bf 8f6f 	isb	sy
 8007888:	f3bf 8f4f 	dsb	sy
 800788c:	60fb      	str	r3, [r7, #12]
}
 800788e:	bf00      	nop
 8007890:	e7fe      	b.n	8007890 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007892:	4b07      	ldr	r3, [pc, #28]	; (80078b0 <vTaskPlaceOnEventList+0x44>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	3318      	adds	r3, #24
 8007898:	4619      	mov	r1, r3
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f7fe fe6b 	bl	8006576 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80078a0:	2101      	movs	r1, #1
 80078a2:	6838      	ldr	r0, [r7, #0]
 80078a4:	f000 fa86 	bl	8007db4 <prvAddCurrentTaskToDelayedList>
}
 80078a8:	bf00      	nop
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	20000a8c 	.word	0x20000a8c

080078b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b086      	sub	sp, #24
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d10a      	bne.n	80078dc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80078c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ca:	f383 8811 	msr	BASEPRI, r3
 80078ce:	f3bf 8f6f 	isb	sy
 80078d2:	f3bf 8f4f 	dsb	sy
 80078d6:	617b      	str	r3, [r7, #20]
}
 80078d8:	bf00      	nop
 80078da:	e7fe      	b.n	80078da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80078dc:	4b0a      	ldr	r3, [pc, #40]	; (8007908 <vTaskPlaceOnEventListRestricted+0x54>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	3318      	adds	r3, #24
 80078e2:	4619      	mov	r1, r3
 80078e4:	68f8      	ldr	r0, [r7, #12]
 80078e6:	f7fe fe22 	bl	800652e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d002      	beq.n	80078f6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80078f0:	f04f 33ff 	mov.w	r3, #4294967295
 80078f4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80078f6:	6879      	ldr	r1, [r7, #4]
 80078f8:	68b8      	ldr	r0, [r7, #8]
 80078fa:	f000 fa5b 	bl	8007db4 <prvAddCurrentTaskToDelayedList>
	}
 80078fe:	bf00      	nop
 8007900:	3718      	adds	r7, #24
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	20000a8c 	.word	0x20000a8c

0800790c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b086      	sub	sp, #24
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d10a      	bne.n	8007938 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007926:	f383 8811 	msr	BASEPRI, r3
 800792a:	f3bf 8f6f 	isb	sy
 800792e:	f3bf 8f4f 	dsb	sy
 8007932:	60fb      	str	r3, [r7, #12]
}
 8007934:	bf00      	nop
 8007936:	e7fe      	b.n	8007936 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	3318      	adds	r3, #24
 800793c:	4618      	mov	r0, r3
 800793e:	f7fe fe53 	bl	80065e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007942:	4b1e      	ldr	r3, [pc, #120]	; (80079bc <xTaskRemoveFromEventList+0xb0>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d11d      	bne.n	8007986 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	3304      	adds	r3, #4
 800794e:	4618      	mov	r0, r3
 8007950:	f7fe fe4a 	bl	80065e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007958:	4b19      	ldr	r3, [pc, #100]	; (80079c0 <xTaskRemoveFromEventList+0xb4>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	429a      	cmp	r2, r3
 800795e:	d903      	bls.n	8007968 <xTaskRemoveFromEventList+0x5c>
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007964:	4a16      	ldr	r2, [pc, #88]	; (80079c0 <xTaskRemoveFromEventList+0xb4>)
 8007966:	6013      	str	r3, [r2, #0]
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800796c:	4613      	mov	r3, r2
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	4413      	add	r3, r2
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	4a13      	ldr	r2, [pc, #76]	; (80079c4 <xTaskRemoveFromEventList+0xb8>)
 8007976:	441a      	add	r2, r3
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	3304      	adds	r3, #4
 800797c:	4619      	mov	r1, r3
 800797e:	4610      	mov	r0, r2
 8007980:	f7fe fdd5 	bl	800652e <vListInsertEnd>
 8007984:	e005      	b.n	8007992 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	3318      	adds	r3, #24
 800798a:	4619      	mov	r1, r3
 800798c:	480e      	ldr	r0, [pc, #56]	; (80079c8 <xTaskRemoveFromEventList+0xbc>)
 800798e:	f7fe fdce 	bl	800652e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007996:	4b0d      	ldr	r3, [pc, #52]	; (80079cc <xTaskRemoveFromEventList+0xc0>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799c:	429a      	cmp	r2, r3
 800799e:	d905      	bls.n	80079ac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80079a0:	2301      	movs	r3, #1
 80079a2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80079a4:	4b0a      	ldr	r3, [pc, #40]	; (80079d0 <xTaskRemoveFromEventList+0xc4>)
 80079a6:	2201      	movs	r2, #1
 80079a8:	601a      	str	r2, [r3, #0]
 80079aa:	e001      	b.n	80079b0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80079ac:	2300      	movs	r3, #0
 80079ae:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80079b0:	697b      	ldr	r3, [r7, #20]
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3718      	adds	r7, #24
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	20000f88 	.word	0x20000f88
 80079c0:	20000f68 	.word	0x20000f68
 80079c4:	20000a90 	.word	0x20000a90
 80079c8:	20000f20 	.word	0x20000f20
 80079cc:	20000a8c 	.word	0x20000a8c
 80079d0:	20000f74 	.word	0x20000f74

080079d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80079dc:	4b06      	ldr	r3, [pc, #24]	; (80079f8 <vTaskInternalSetTimeOutState+0x24>)
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80079e4:	4b05      	ldr	r3, [pc, #20]	; (80079fc <vTaskInternalSetTimeOutState+0x28>)
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	605a      	str	r2, [r3, #4]
}
 80079ec:	bf00      	nop
 80079ee:	370c      	adds	r7, #12
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr
 80079f8:	20000f78 	.word	0x20000f78
 80079fc:	20000f64 	.word	0x20000f64

08007a00 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b088      	sub	sp, #32
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d10a      	bne.n	8007a26 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a14:	f383 8811 	msr	BASEPRI, r3
 8007a18:	f3bf 8f6f 	isb	sy
 8007a1c:	f3bf 8f4f 	dsb	sy
 8007a20:	613b      	str	r3, [r7, #16]
}
 8007a22:	bf00      	nop
 8007a24:	e7fe      	b.n	8007a24 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d10a      	bne.n	8007a42 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a30:	f383 8811 	msr	BASEPRI, r3
 8007a34:	f3bf 8f6f 	isb	sy
 8007a38:	f3bf 8f4f 	dsb	sy
 8007a3c:	60fb      	str	r3, [r7, #12]
}
 8007a3e:	bf00      	nop
 8007a40:	e7fe      	b.n	8007a40 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007a42:	f000 fe47 	bl	80086d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007a46:	4b1d      	ldr	r3, [pc, #116]	; (8007abc <xTaskCheckForTimeOut+0xbc>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	69ba      	ldr	r2, [r7, #24]
 8007a52:	1ad3      	subs	r3, r2, r3
 8007a54:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a5e:	d102      	bne.n	8007a66 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007a60:	2300      	movs	r3, #0
 8007a62:	61fb      	str	r3, [r7, #28]
 8007a64:	e023      	b.n	8007aae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	4b15      	ldr	r3, [pc, #84]	; (8007ac0 <xTaskCheckForTimeOut+0xc0>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d007      	beq.n	8007a82 <xTaskCheckForTimeOut+0x82>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	69ba      	ldr	r2, [r7, #24]
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d302      	bcc.n	8007a82 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	61fb      	str	r3, [r7, #28]
 8007a80:	e015      	b.n	8007aae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	697a      	ldr	r2, [r7, #20]
 8007a88:	429a      	cmp	r2, r3
 8007a8a:	d20b      	bcs.n	8007aa4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	1ad2      	subs	r2, r2, r3
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f7ff ff9b 	bl	80079d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	61fb      	str	r3, [r7, #28]
 8007aa2:	e004      	b.n	8007aae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007aae:	f000 fe41 	bl	8008734 <vPortExitCritical>

	return xReturn;
 8007ab2:	69fb      	ldr	r3, [r7, #28]
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3720      	adds	r7, #32
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	20000f64 	.word	0x20000f64
 8007ac0:	20000f78 	.word	0x20000f78

08007ac4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007ac8:	4b03      	ldr	r3, [pc, #12]	; (8007ad8 <vTaskMissedYield+0x14>)
 8007aca:	2201      	movs	r2, #1
 8007acc:	601a      	str	r2, [r3, #0]
}
 8007ace:	bf00      	nop
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr
 8007ad8:	20000f74 	.word	0x20000f74

08007adc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007ae4:	f000 f852 	bl	8007b8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007ae8:	4b06      	ldr	r3, [pc, #24]	; (8007b04 <prvIdleTask+0x28>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d9f9      	bls.n	8007ae4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007af0:	4b05      	ldr	r3, [pc, #20]	; (8007b08 <prvIdleTask+0x2c>)
 8007af2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007af6:	601a      	str	r2, [r3, #0]
 8007af8:	f3bf 8f4f 	dsb	sy
 8007afc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007b00:	e7f0      	b.n	8007ae4 <prvIdleTask+0x8>
 8007b02:	bf00      	nop
 8007b04:	20000a90 	.word	0x20000a90
 8007b08:	e000ed04 	.word	0xe000ed04

08007b0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b12:	2300      	movs	r3, #0
 8007b14:	607b      	str	r3, [r7, #4]
 8007b16:	e00c      	b.n	8007b32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	4613      	mov	r3, r2
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	4413      	add	r3, r2
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	4a12      	ldr	r2, [pc, #72]	; (8007b6c <prvInitialiseTaskLists+0x60>)
 8007b24:	4413      	add	r3, r2
 8007b26:	4618      	mov	r0, r3
 8007b28:	f7fe fcd4 	bl	80064d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	3301      	adds	r3, #1
 8007b30:	607b      	str	r3, [r7, #4]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2b37      	cmp	r3, #55	; 0x37
 8007b36:	d9ef      	bls.n	8007b18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007b38:	480d      	ldr	r0, [pc, #52]	; (8007b70 <prvInitialiseTaskLists+0x64>)
 8007b3a:	f7fe fccb 	bl	80064d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007b3e:	480d      	ldr	r0, [pc, #52]	; (8007b74 <prvInitialiseTaskLists+0x68>)
 8007b40:	f7fe fcc8 	bl	80064d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007b44:	480c      	ldr	r0, [pc, #48]	; (8007b78 <prvInitialiseTaskLists+0x6c>)
 8007b46:	f7fe fcc5 	bl	80064d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007b4a:	480c      	ldr	r0, [pc, #48]	; (8007b7c <prvInitialiseTaskLists+0x70>)
 8007b4c:	f7fe fcc2 	bl	80064d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007b50:	480b      	ldr	r0, [pc, #44]	; (8007b80 <prvInitialiseTaskLists+0x74>)
 8007b52:	f7fe fcbf 	bl	80064d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007b56:	4b0b      	ldr	r3, [pc, #44]	; (8007b84 <prvInitialiseTaskLists+0x78>)
 8007b58:	4a05      	ldr	r2, [pc, #20]	; (8007b70 <prvInitialiseTaskLists+0x64>)
 8007b5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007b5c:	4b0a      	ldr	r3, [pc, #40]	; (8007b88 <prvInitialiseTaskLists+0x7c>)
 8007b5e:	4a05      	ldr	r2, [pc, #20]	; (8007b74 <prvInitialiseTaskLists+0x68>)
 8007b60:	601a      	str	r2, [r3, #0]
}
 8007b62:	bf00      	nop
 8007b64:	3708      	adds	r7, #8
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
 8007b6a:	bf00      	nop
 8007b6c:	20000a90 	.word	0x20000a90
 8007b70:	20000ef0 	.word	0x20000ef0
 8007b74:	20000f04 	.word	0x20000f04
 8007b78:	20000f20 	.word	0x20000f20
 8007b7c:	20000f34 	.word	0x20000f34
 8007b80:	20000f4c 	.word	0x20000f4c
 8007b84:	20000f18 	.word	0x20000f18
 8007b88:	20000f1c 	.word	0x20000f1c

08007b8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b082      	sub	sp, #8
 8007b90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b92:	e019      	b.n	8007bc8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007b94:	f000 fd9e 	bl	80086d4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007b98:	4b10      	ldr	r3, [pc, #64]	; (8007bdc <prvCheckTasksWaitingTermination+0x50>)
 8007b9a:	68db      	ldr	r3, [r3, #12]
 8007b9c:	68db      	ldr	r3, [r3, #12]
 8007b9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	3304      	adds	r3, #4
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f7fe fd1f 	bl	80065e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007baa:	4b0d      	ldr	r3, [pc, #52]	; (8007be0 <prvCheckTasksWaitingTermination+0x54>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	3b01      	subs	r3, #1
 8007bb0:	4a0b      	ldr	r2, [pc, #44]	; (8007be0 <prvCheckTasksWaitingTermination+0x54>)
 8007bb2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007bb4:	4b0b      	ldr	r3, [pc, #44]	; (8007be4 <prvCheckTasksWaitingTermination+0x58>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	3b01      	subs	r3, #1
 8007bba:	4a0a      	ldr	r2, [pc, #40]	; (8007be4 <prvCheckTasksWaitingTermination+0x58>)
 8007bbc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007bbe:	f000 fdb9 	bl	8008734 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 f810 	bl	8007be8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007bc8:	4b06      	ldr	r3, [pc, #24]	; (8007be4 <prvCheckTasksWaitingTermination+0x58>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d1e1      	bne.n	8007b94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007bd0:	bf00      	nop
 8007bd2:	bf00      	nop
 8007bd4:	3708      	adds	r7, #8
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	20000f34 	.word	0x20000f34
 8007be0:	20000f60 	.word	0x20000f60
 8007be4:	20000f48 	.word	0x20000f48

08007be8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	3354      	adds	r3, #84	; 0x54
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f001 f891 	bl	8008d1c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d108      	bne.n	8007c16 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f000 ff49 	bl	8008aa0 <vPortFree>
				vPortFree( pxTCB );
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 ff46 	bl	8008aa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007c14:	e018      	b.n	8007c48 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d103      	bne.n	8007c28 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 ff3d 	bl	8008aa0 <vPortFree>
	}
 8007c26:	e00f      	b.n	8007c48 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007c2e:	2b02      	cmp	r3, #2
 8007c30:	d00a      	beq.n	8007c48 <prvDeleteTCB+0x60>
	__asm volatile
 8007c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c36:	f383 8811 	msr	BASEPRI, r3
 8007c3a:	f3bf 8f6f 	isb	sy
 8007c3e:	f3bf 8f4f 	dsb	sy
 8007c42:	60fb      	str	r3, [r7, #12]
}
 8007c44:	bf00      	nop
 8007c46:	e7fe      	b.n	8007c46 <prvDeleteTCB+0x5e>
	}
 8007c48:	bf00      	nop
 8007c4a:	3710      	adds	r7, #16
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007c50:	b480      	push	{r7}
 8007c52:	b083      	sub	sp, #12
 8007c54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c56:	4b0f      	ldr	r3, [pc, #60]	; (8007c94 <prvResetNextTaskUnblockTime+0x44>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d101      	bne.n	8007c64 <prvResetNextTaskUnblockTime+0x14>
 8007c60:	2301      	movs	r3, #1
 8007c62:	e000      	b.n	8007c66 <prvResetNextTaskUnblockTime+0x16>
 8007c64:	2300      	movs	r3, #0
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d004      	beq.n	8007c74 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007c6a:	4b0b      	ldr	r3, [pc, #44]	; (8007c98 <prvResetNextTaskUnblockTime+0x48>)
 8007c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8007c70:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007c72:	e008      	b.n	8007c86 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007c74:	4b07      	ldr	r3, [pc, #28]	; (8007c94 <prvResetNextTaskUnblockTime+0x44>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	4a05      	ldr	r2, [pc, #20]	; (8007c98 <prvResetNextTaskUnblockTime+0x48>)
 8007c84:	6013      	str	r3, [r2, #0]
}
 8007c86:	bf00      	nop
 8007c88:	370c      	adds	r7, #12
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr
 8007c92:	bf00      	nop
 8007c94:	20000f18 	.word	0x20000f18
 8007c98:	20000f80 	.word	0x20000f80

08007c9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007ca2:	4b0b      	ldr	r3, [pc, #44]	; (8007cd0 <xTaskGetSchedulerState+0x34>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d102      	bne.n	8007cb0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007caa:	2301      	movs	r3, #1
 8007cac:	607b      	str	r3, [r7, #4]
 8007cae:	e008      	b.n	8007cc2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cb0:	4b08      	ldr	r3, [pc, #32]	; (8007cd4 <xTaskGetSchedulerState+0x38>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d102      	bne.n	8007cbe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007cb8:	2302      	movs	r3, #2
 8007cba:	607b      	str	r3, [r7, #4]
 8007cbc:	e001      	b.n	8007cc2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007cc2:	687b      	ldr	r3, [r7, #4]
	}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	370c      	adds	r7, #12
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr
 8007cd0:	20000f6c 	.word	0x20000f6c
 8007cd4:	20000f88 	.word	0x20000f88

08007cd8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b086      	sub	sp, #24
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d056      	beq.n	8007d9c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007cee:	4b2e      	ldr	r3, [pc, #184]	; (8007da8 <xTaskPriorityDisinherit+0xd0>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	693a      	ldr	r2, [r7, #16]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d00a      	beq.n	8007d0e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cfc:	f383 8811 	msr	BASEPRI, r3
 8007d00:	f3bf 8f6f 	isb	sy
 8007d04:	f3bf 8f4f 	dsb	sy
 8007d08:	60fb      	str	r3, [r7, #12]
}
 8007d0a:	bf00      	nop
 8007d0c:	e7fe      	b.n	8007d0c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d10a      	bne.n	8007d2c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d1a:	f383 8811 	msr	BASEPRI, r3
 8007d1e:	f3bf 8f6f 	isb	sy
 8007d22:	f3bf 8f4f 	dsb	sy
 8007d26:	60bb      	str	r3, [r7, #8]
}
 8007d28:	bf00      	nop
 8007d2a:	e7fe      	b.n	8007d2a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d30:	1e5a      	subs	r2, r3, #1
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d02c      	beq.n	8007d9c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d128      	bne.n	8007d9c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	3304      	adds	r3, #4
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7fe fc4a 	bl	80065e8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d60:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d6c:	4b0f      	ldr	r3, [pc, #60]	; (8007dac <xTaskPriorityDisinherit+0xd4>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d903      	bls.n	8007d7c <xTaskPriorityDisinherit+0xa4>
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d78:	4a0c      	ldr	r2, [pc, #48]	; (8007dac <xTaskPriorityDisinherit+0xd4>)
 8007d7a:	6013      	str	r3, [r2, #0]
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d80:	4613      	mov	r3, r2
 8007d82:	009b      	lsls	r3, r3, #2
 8007d84:	4413      	add	r3, r2
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	4a09      	ldr	r2, [pc, #36]	; (8007db0 <xTaskPriorityDisinherit+0xd8>)
 8007d8a:	441a      	add	r2, r3
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	3304      	adds	r3, #4
 8007d90:	4619      	mov	r1, r3
 8007d92:	4610      	mov	r0, r2
 8007d94:	f7fe fbcb 	bl	800652e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d9c:	697b      	ldr	r3, [r7, #20]
	}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3718      	adds	r7, #24
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	20000a8c 	.word	0x20000a8c
 8007dac:	20000f68 	.word	0x20000f68
 8007db0:	20000a90 	.word	0x20000a90

08007db4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007dbe:	4b21      	ldr	r3, [pc, #132]	; (8007e44 <prvAddCurrentTaskToDelayedList+0x90>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007dc4:	4b20      	ldr	r3, [pc, #128]	; (8007e48 <prvAddCurrentTaskToDelayedList+0x94>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	3304      	adds	r3, #4
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7fe fc0c 	bl	80065e8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dd6:	d10a      	bne.n	8007dee <prvAddCurrentTaskToDelayedList+0x3a>
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d007      	beq.n	8007dee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007dde:	4b1a      	ldr	r3, [pc, #104]	; (8007e48 <prvAddCurrentTaskToDelayedList+0x94>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	3304      	adds	r3, #4
 8007de4:	4619      	mov	r1, r3
 8007de6:	4819      	ldr	r0, [pc, #100]	; (8007e4c <prvAddCurrentTaskToDelayedList+0x98>)
 8007de8:	f7fe fba1 	bl	800652e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007dec:	e026      	b.n	8007e3c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007dee:	68fa      	ldr	r2, [r7, #12]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	4413      	add	r3, r2
 8007df4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007df6:	4b14      	ldr	r3, [pc, #80]	; (8007e48 <prvAddCurrentTaskToDelayedList+0x94>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	68ba      	ldr	r2, [r7, #8]
 8007dfc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007dfe:	68ba      	ldr	r2, [r7, #8]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d209      	bcs.n	8007e1a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e06:	4b12      	ldr	r3, [pc, #72]	; (8007e50 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	4b0f      	ldr	r3, [pc, #60]	; (8007e48 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	3304      	adds	r3, #4
 8007e10:	4619      	mov	r1, r3
 8007e12:	4610      	mov	r0, r2
 8007e14:	f7fe fbaf 	bl	8006576 <vListInsert>
}
 8007e18:	e010      	b.n	8007e3c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e1a:	4b0e      	ldr	r3, [pc, #56]	; (8007e54 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	4b0a      	ldr	r3, [pc, #40]	; (8007e48 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	3304      	adds	r3, #4
 8007e24:	4619      	mov	r1, r3
 8007e26:	4610      	mov	r0, r2
 8007e28:	f7fe fba5 	bl	8006576 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007e2c:	4b0a      	ldr	r3, [pc, #40]	; (8007e58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68ba      	ldr	r2, [r7, #8]
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d202      	bcs.n	8007e3c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007e36:	4a08      	ldr	r2, [pc, #32]	; (8007e58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	6013      	str	r3, [r2, #0]
}
 8007e3c:	bf00      	nop
 8007e3e:	3710      	adds	r7, #16
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	20000f64 	.word	0x20000f64
 8007e48:	20000a8c 	.word	0x20000a8c
 8007e4c:	20000f4c 	.word	0x20000f4c
 8007e50:	20000f1c 	.word	0x20000f1c
 8007e54:	20000f18 	.word	0x20000f18
 8007e58:	20000f80 	.word	0x20000f80

08007e5c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b08a      	sub	sp, #40	; 0x28
 8007e60:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007e62:	2300      	movs	r3, #0
 8007e64:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007e66:	f000 facb 	bl	8008400 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007e6a:	4b1c      	ldr	r3, [pc, #112]	; (8007edc <xTimerCreateTimerTask+0x80>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d021      	beq.n	8007eb6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007e72:	2300      	movs	r3, #0
 8007e74:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007e76:	2300      	movs	r3, #0
 8007e78:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007e7a:	1d3a      	adds	r2, r7, #4
 8007e7c:	f107 0108 	add.w	r1, r7, #8
 8007e80:	f107 030c 	add.w	r3, r7, #12
 8007e84:	4618      	mov	r0, r3
 8007e86:	f7fe fb0b 	bl	80064a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007e8a:	6879      	ldr	r1, [r7, #4]
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	68fa      	ldr	r2, [r7, #12]
 8007e90:	9202      	str	r2, [sp, #8]
 8007e92:	9301      	str	r3, [sp, #4]
 8007e94:	2302      	movs	r3, #2
 8007e96:	9300      	str	r3, [sp, #0]
 8007e98:	2300      	movs	r3, #0
 8007e9a:	460a      	mov	r2, r1
 8007e9c:	4910      	ldr	r1, [pc, #64]	; (8007ee0 <xTimerCreateTimerTask+0x84>)
 8007e9e:	4811      	ldr	r0, [pc, #68]	; (8007ee4 <xTimerCreateTimerTask+0x88>)
 8007ea0:	f7ff f8b2 	bl	8007008 <xTaskCreateStatic>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	4a10      	ldr	r2, [pc, #64]	; (8007ee8 <xTimerCreateTimerTask+0x8c>)
 8007ea8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007eaa:	4b0f      	ldr	r3, [pc, #60]	; (8007ee8 <xTimerCreateTimerTask+0x8c>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d001      	beq.n	8007eb6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d10a      	bne.n	8007ed2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec0:	f383 8811 	msr	BASEPRI, r3
 8007ec4:	f3bf 8f6f 	isb	sy
 8007ec8:	f3bf 8f4f 	dsb	sy
 8007ecc:	613b      	str	r3, [r7, #16]
}
 8007ece:	bf00      	nop
 8007ed0:	e7fe      	b.n	8007ed0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007ed2:	697b      	ldr	r3, [r7, #20]
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3718      	adds	r7, #24
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	20000fbc 	.word	0x20000fbc
 8007ee0:	08009c5c 	.word	0x08009c5c
 8007ee4:	08008009 	.word	0x08008009
 8007ee8:	20000fc0 	.word	0x20000fc0

08007eec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b08a      	sub	sp, #40	; 0x28
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	60b9      	str	r1, [r7, #8]
 8007ef6:	607a      	str	r2, [r7, #4]
 8007ef8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007efa:	2300      	movs	r3, #0
 8007efc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d10a      	bne.n	8007f1a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f08:	f383 8811 	msr	BASEPRI, r3
 8007f0c:	f3bf 8f6f 	isb	sy
 8007f10:	f3bf 8f4f 	dsb	sy
 8007f14:	623b      	str	r3, [r7, #32]
}
 8007f16:	bf00      	nop
 8007f18:	e7fe      	b.n	8007f18 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007f1a:	4b1a      	ldr	r3, [pc, #104]	; (8007f84 <xTimerGenericCommand+0x98>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d02a      	beq.n	8007f78 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	2b05      	cmp	r3, #5
 8007f32:	dc18      	bgt.n	8007f66 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007f34:	f7ff feb2 	bl	8007c9c <xTaskGetSchedulerState>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b02      	cmp	r3, #2
 8007f3c:	d109      	bne.n	8007f52 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007f3e:	4b11      	ldr	r3, [pc, #68]	; (8007f84 <xTimerGenericCommand+0x98>)
 8007f40:	6818      	ldr	r0, [r3, #0]
 8007f42:	f107 0110 	add.w	r1, r7, #16
 8007f46:	2300      	movs	r3, #0
 8007f48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f4a:	f7fe fc79 	bl	8006840 <xQueueGenericSend>
 8007f4e:	6278      	str	r0, [r7, #36]	; 0x24
 8007f50:	e012      	b.n	8007f78 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007f52:	4b0c      	ldr	r3, [pc, #48]	; (8007f84 <xTimerGenericCommand+0x98>)
 8007f54:	6818      	ldr	r0, [r3, #0]
 8007f56:	f107 0110 	add.w	r1, r7, #16
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f7fe fc6f 	bl	8006840 <xQueueGenericSend>
 8007f62:	6278      	str	r0, [r7, #36]	; 0x24
 8007f64:	e008      	b.n	8007f78 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007f66:	4b07      	ldr	r3, [pc, #28]	; (8007f84 <xTimerGenericCommand+0x98>)
 8007f68:	6818      	ldr	r0, [r3, #0]
 8007f6a:	f107 0110 	add.w	r1, r7, #16
 8007f6e:	2300      	movs	r3, #0
 8007f70:	683a      	ldr	r2, [r7, #0]
 8007f72:	f7fe fd63 	bl	8006a3c <xQueueGenericSendFromISR>
 8007f76:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3728      	adds	r7, #40	; 0x28
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	20000fbc 	.word	0x20000fbc

08007f88 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b088      	sub	sp, #32
 8007f8c:	af02      	add	r7, sp, #8
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f92:	4b1c      	ldr	r3, [pc, #112]	; (8008004 <prvProcessExpiredTimer+0x7c>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	3304      	adds	r3, #4
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f7fe fb21 	bl	80065e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	69db      	ldr	r3, [r3, #28]
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d122      	bne.n	8007ff4 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	699a      	ldr	r2, [r3, #24]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	18d1      	adds	r1, r2, r3
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	683a      	ldr	r2, [r7, #0]
 8007fba:	6978      	ldr	r0, [r7, #20]
 8007fbc:	f000 f8c8 	bl	8008150 <prvInsertTimerInActiveList>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d016      	beq.n	8007ff4 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	9300      	str	r3, [sp, #0]
 8007fca:	2300      	movs	r3, #0
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	2100      	movs	r1, #0
 8007fd0:	6978      	ldr	r0, [r7, #20]
 8007fd2:	f7ff ff8b 	bl	8007eec <xTimerGenericCommand>
 8007fd6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d10a      	bne.n	8007ff4 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8007fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe2:	f383 8811 	msr	BASEPRI, r3
 8007fe6:	f3bf 8f6f 	isb	sy
 8007fea:	f3bf 8f4f 	dsb	sy
 8007fee:	60fb      	str	r3, [r7, #12]
}
 8007ff0:	bf00      	nop
 8007ff2:	e7fe      	b.n	8007ff2 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff8:	6978      	ldr	r0, [r7, #20]
 8007ffa:	4798      	blx	r3
}
 8007ffc:	bf00      	nop
 8007ffe:	3718      	adds	r7, #24
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}
 8008004:	20000fb4 	.word	0x20000fb4

08008008 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008010:	f107 0308 	add.w	r3, r7, #8
 8008014:	4618      	mov	r0, r3
 8008016:	f000 f857 	bl	80080c8 <prvGetNextExpireTime>
 800801a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	4619      	mov	r1, r3
 8008020:	68f8      	ldr	r0, [r7, #12]
 8008022:	f000 f803 	bl	800802c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008026:	f000 f8d5 	bl	80081d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800802a:	e7f1      	b.n	8008010 <prvTimerTask+0x8>

0800802c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b084      	sub	sp, #16
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008036:	f7ff fa3b 	bl	80074b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800803a:	f107 0308 	add.w	r3, r7, #8
 800803e:	4618      	mov	r0, r3
 8008040:	f000 f866 	bl	8008110 <prvSampleTimeNow>
 8008044:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d130      	bne.n	80080ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d10a      	bne.n	8008068 <prvProcessTimerOrBlockTask+0x3c>
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	429a      	cmp	r2, r3
 8008058:	d806      	bhi.n	8008068 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800805a:	f7ff fa37 	bl	80074cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800805e:	68f9      	ldr	r1, [r7, #12]
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f7ff ff91 	bl	8007f88 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008066:	e024      	b.n	80080b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d008      	beq.n	8008080 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800806e:	4b13      	ldr	r3, [pc, #76]	; (80080bc <prvProcessTimerOrBlockTask+0x90>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2b00      	cmp	r3, #0
 8008076:	bf0c      	ite	eq
 8008078:	2301      	moveq	r3, #1
 800807a:	2300      	movne	r3, #0
 800807c:	b2db      	uxtb	r3, r3
 800807e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008080:	4b0f      	ldr	r3, [pc, #60]	; (80080c0 <prvProcessTimerOrBlockTask+0x94>)
 8008082:	6818      	ldr	r0, [r3, #0]
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	1ad3      	subs	r3, r2, r3
 800808a:	683a      	ldr	r2, [r7, #0]
 800808c:	4619      	mov	r1, r3
 800808e:	f7fe ff87 	bl	8006fa0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008092:	f7ff fa1b 	bl	80074cc <xTaskResumeAll>
 8008096:	4603      	mov	r3, r0
 8008098:	2b00      	cmp	r3, #0
 800809a:	d10a      	bne.n	80080b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800809c:	4b09      	ldr	r3, [pc, #36]	; (80080c4 <prvProcessTimerOrBlockTask+0x98>)
 800809e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080a2:	601a      	str	r2, [r3, #0]
 80080a4:	f3bf 8f4f 	dsb	sy
 80080a8:	f3bf 8f6f 	isb	sy
}
 80080ac:	e001      	b.n	80080b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80080ae:	f7ff fa0d 	bl	80074cc <xTaskResumeAll>
}
 80080b2:	bf00      	nop
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop
 80080bc:	20000fb8 	.word	0x20000fb8
 80080c0:	20000fbc 	.word	0x20000fbc
 80080c4:	e000ed04 	.word	0xe000ed04

080080c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80080c8:	b480      	push	{r7}
 80080ca:	b085      	sub	sp, #20
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80080d0:	4b0e      	ldr	r3, [pc, #56]	; (800810c <prvGetNextExpireTime+0x44>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	bf0c      	ite	eq
 80080da:	2301      	moveq	r3, #1
 80080dc:	2300      	movne	r3, #0
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	461a      	mov	r2, r3
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d105      	bne.n	80080fa <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80080ee:	4b07      	ldr	r3, [pc, #28]	; (800810c <prvGetNextExpireTime+0x44>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	60fb      	str	r3, [r7, #12]
 80080f8:	e001      	b.n	80080fe <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80080fa:	2300      	movs	r3, #0
 80080fc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80080fe:	68fb      	ldr	r3, [r7, #12]
}
 8008100:	4618      	mov	r0, r3
 8008102:	3714      	adds	r7, #20
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr
 800810c:	20000fb4 	.word	0x20000fb4

08008110 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008118:	f7ff fa76 	bl	8007608 <xTaskGetTickCount>
 800811c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800811e:	4b0b      	ldr	r3, [pc, #44]	; (800814c <prvSampleTimeNow+0x3c>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	68fa      	ldr	r2, [r7, #12]
 8008124:	429a      	cmp	r2, r3
 8008126:	d205      	bcs.n	8008134 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008128:	f000 f908 	bl	800833c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2201      	movs	r2, #1
 8008130:	601a      	str	r2, [r3, #0]
 8008132:	e002      	b.n	800813a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2200      	movs	r2, #0
 8008138:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800813a:	4a04      	ldr	r2, [pc, #16]	; (800814c <prvSampleTimeNow+0x3c>)
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008140:	68fb      	ldr	r3, [r7, #12]
}
 8008142:	4618      	mov	r0, r3
 8008144:	3710      	adds	r7, #16
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
 800814a:	bf00      	nop
 800814c:	20000fc4 	.word	0x20000fc4

08008150 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b086      	sub	sp, #24
 8008154:	af00      	add	r7, sp, #0
 8008156:	60f8      	str	r0, [r7, #12]
 8008158:	60b9      	str	r1, [r7, #8]
 800815a:	607a      	str	r2, [r7, #4]
 800815c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800815e:	2300      	movs	r3, #0
 8008160:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	68ba      	ldr	r2, [r7, #8]
 8008166:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	68fa      	ldr	r2, [r7, #12]
 800816c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800816e:	68ba      	ldr	r2, [r7, #8]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	429a      	cmp	r2, r3
 8008174:	d812      	bhi.n	800819c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	1ad2      	subs	r2, r2, r3
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	699b      	ldr	r3, [r3, #24]
 8008180:	429a      	cmp	r2, r3
 8008182:	d302      	bcc.n	800818a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008184:	2301      	movs	r3, #1
 8008186:	617b      	str	r3, [r7, #20]
 8008188:	e01b      	b.n	80081c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800818a:	4b10      	ldr	r3, [pc, #64]	; (80081cc <prvInsertTimerInActiveList+0x7c>)
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	3304      	adds	r3, #4
 8008192:	4619      	mov	r1, r3
 8008194:	4610      	mov	r0, r2
 8008196:	f7fe f9ee 	bl	8006576 <vListInsert>
 800819a:	e012      	b.n	80081c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d206      	bcs.n	80081b2 <prvInsertTimerInActiveList+0x62>
 80081a4:	68ba      	ldr	r2, [r7, #8]
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d302      	bcc.n	80081b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80081ac:	2301      	movs	r3, #1
 80081ae:	617b      	str	r3, [r7, #20]
 80081b0:	e007      	b.n	80081c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80081b2:	4b07      	ldr	r3, [pc, #28]	; (80081d0 <prvInsertTimerInActiveList+0x80>)
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	3304      	adds	r3, #4
 80081ba:	4619      	mov	r1, r3
 80081bc:	4610      	mov	r0, r2
 80081be:	f7fe f9da 	bl	8006576 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80081c2:	697b      	ldr	r3, [r7, #20]
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3718      	adds	r7, #24
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	20000fb8 	.word	0x20000fb8
 80081d0:	20000fb4 	.word	0x20000fb4

080081d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b08e      	sub	sp, #56	; 0x38
 80081d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80081da:	e09d      	b.n	8008318 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	da18      	bge.n	8008214 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80081e2:	1d3b      	adds	r3, r7, #4
 80081e4:	3304      	adds	r3, #4
 80081e6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80081e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d10a      	bne.n	8008204 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80081ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f2:	f383 8811 	msr	BASEPRI, r3
 80081f6:	f3bf 8f6f 	isb	sy
 80081fa:	f3bf 8f4f 	dsb	sy
 80081fe:	61fb      	str	r3, [r7, #28]
}
 8008200:	bf00      	nop
 8008202:	e7fe      	b.n	8008202 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800820a:	6850      	ldr	r0, [r2, #4]
 800820c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800820e:	6892      	ldr	r2, [r2, #8]
 8008210:	4611      	mov	r1, r2
 8008212:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2b00      	cmp	r3, #0
 8008218:	db7e      	blt.n	8008318 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800821e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008220:	695b      	ldr	r3, [r3, #20]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d004      	beq.n	8008230 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008228:	3304      	adds	r3, #4
 800822a:	4618      	mov	r0, r3
 800822c:	f7fe f9dc 	bl	80065e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008230:	463b      	mov	r3, r7
 8008232:	4618      	mov	r0, r3
 8008234:	f7ff ff6c 	bl	8008110 <prvSampleTimeNow>
 8008238:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2b09      	cmp	r3, #9
 800823e:	d86a      	bhi.n	8008316 <prvProcessReceivedCommands+0x142>
 8008240:	a201      	add	r2, pc, #4	; (adr r2, 8008248 <prvProcessReceivedCommands+0x74>)
 8008242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008246:	bf00      	nop
 8008248:	08008271 	.word	0x08008271
 800824c:	08008271 	.word	0x08008271
 8008250:	08008271 	.word	0x08008271
 8008254:	08008319 	.word	0x08008319
 8008258:	080082cd 	.word	0x080082cd
 800825c:	08008305 	.word	0x08008305
 8008260:	08008271 	.word	0x08008271
 8008264:	08008271 	.word	0x08008271
 8008268:	08008319 	.word	0x08008319
 800826c:	080082cd 	.word	0x080082cd
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008270:	68ba      	ldr	r2, [r7, #8]
 8008272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008274:	699b      	ldr	r3, [r3, #24]
 8008276:	18d1      	adds	r1, r2, r3
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800827c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800827e:	f7ff ff67 	bl	8008150 <prvInsertTimerInActiveList>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d047      	beq.n	8008318 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800828e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008292:	69db      	ldr	r3, [r3, #28]
 8008294:	2b01      	cmp	r3, #1
 8008296:	d13f      	bne.n	8008318 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008298:	68ba      	ldr	r2, [r7, #8]
 800829a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829c:	699b      	ldr	r3, [r3, #24]
 800829e:	441a      	add	r2, r3
 80082a0:	2300      	movs	r3, #0
 80082a2:	9300      	str	r3, [sp, #0]
 80082a4:	2300      	movs	r3, #0
 80082a6:	2100      	movs	r1, #0
 80082a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082aa:	f7ff fe1f 	bl	8007eec <xTimerGenericCommand>
 80082ae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80082b0:	6a3b      	ldr	r3, [r7, #32]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d130      	bne.n	8008318 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80082b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ba:	f383 8811 	msr	BASEPRI, r3
 80082be:	f3bf 8f6f 	isb	sy
 80082c2:	f3bf 8f4f 	dsb	sy
 80082c6:	61bb      	str	r3, [r7, #24]
}
 80082c8:	bf00      	nop
 80082ca:	e7fe      	b.n	80082ca <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80082cc:	68ba      	ldr	r2, [r7, #8]
 80082ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80082d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d4:	699b      	ldr	r3, [r3, #24]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d10a      	bne.n	80082f0 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80082da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082de:	f383 8811 	msr	BASEPRI, r3
 80082e2:	f3bf 8f6f 	isb	sy
 80082e6:	f3bf 8f4f 	dsb	sy
 80082ea:	617b      	str	r3, [r7, #20]
}
 80082ec:	bf00      	nop
 80082ee:	e7fe      	b.n	80082ee <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80082f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f2:	699a      	ldr	r2, [r3, #24]
 80082f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f6:	18d1      	adds	r1, r2, r3
 80082f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082fe:	f7ff ff27 	bl	8008150 <prvInsertTimerInActiveList>
					break;
 8008302:	e009      	b.n	8008318 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008306:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800830a:	2b00      	cmp	r3, #0
 800830c:	d104      	bne.n	8008318 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800830e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008310:	f000 fbc6 	bl	8008aa0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008314:	e000      	b.n	8008318 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8008316:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008318:	4b07      	ldr	r3, [pc, #28]	; (8008338 <prvProcessReceivedCommands+0x164>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	1d39      	adds	r1, r7, #4
 800831e:	2200      	movs	r2, #0
 8008320:	4618      	mov	r0, r3
 8008322:	f7fe fc23 	bl	8006b6c <xQueueReceive>
 8008326:	4603      	mov	r3, r0
 8008328:	2b00      	cmp	r3, #0
 800832a:	f47f af57 	bne.w	80081dc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800832e:	bf00      	nop
 8008330:	bf00      	nop
 8008332:	3730      	adds	r7, #48	; 0x30
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	20000fbc 	.word	0x20000fbc

0800833c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b088      	sub	sp, #32
 8008340:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008342:	e045      	b.n	80083d0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008344:	4b2c      	ldr	r3, [pc, #176]	; (80083f8 <prvSwitchTimerLists+0xbc>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	68db      	ldr	r3, [r3, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800834e:	4b2a      	ldr	r3, [pc, #168]	; (80083f8 <prvSwitchTimerLists+0xbc>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	68db      	ldr	r3, [r3, #12]
 8008354:	68db      	ldr	r3, [r3, #12]
 8008356:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	3304      	adds	r3, #4
 800835c:	4618      	mov	r0, r3
 800835e:	f7fe f943 	bl	80065e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008366:	68f8      	ldr	r0, [r7, #12]
 8008368:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	69db      	ldr	r3, [r3, #28]
 800836e:	2b01      	cmp	r3, #1
 8008370:	d12e      	bne.n	80083d0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	699b      	ldr	r3, [r3, #24]
 8008376:	693a      	ldr	r2, [r7, #16]
 8008378:	4413      	add	r3, r2
 800837a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800837c:	68ba      	ldr	r2, [r7, #8]
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	429a      	cmp	r2, r3
 8008382:	d90e      	bls.n	80083a2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	68ba      	ldr	r2, [r7, #8]
 8008388:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	68fa      	ldr	r2, [r7, #12]
 800838e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008390:	4b19      	ldr	r3, [pc, #100]	; (80083f8 <prvSwitchTimerLists+0xbc>)
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	3304      	adds	r3, #4
 8008398:	4619      	mov	r1, r3
 800839a:	4610      	mov	r0, r2
 800839c:	f7fe f8eb 	bl	8006576 <vListInsert>
 80083a0:	e016      	b.n	80083d0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80083a2:	2300      	movs	r3, #0
 80083a4:	9300      	str	r3, [sp, #0]
 80083a6:	2300      	movs	r3, #0
 80083a8:	693a      	ldr	r2, [r7, #16]
 80083aa:	2100      	movs	r1, #0
 80083ac:	68f8      	ldr	r0, [r7, #12]
 80083ae:	f7ff fd9d 	bl	8007eec <xTimerGenericCommand>
 80083b2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d10a      	bne.n	80083d0 <prvSwitchTimerLists+0x94>
	__asm volatile
 80083ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083be:	f383 8811 	msr	BASEPRI, r3
 80083c2:	f3bf 8f6f 	isb	sy
 80083c6:	f3bf 8f4f 	dsb	sy
 80083ca:	603b      	str	r3, [r7, #0]
}
 80083cc:	bf00      	nop
 80083ce:	e7fe      	b.n	80083ce <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80083d0:	4b09      	ldr	r3, [pc, #36]	; (80083f8 <prvSwitchTimerLists+0xbc>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1b4      	bne.n	8008344 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80083da:	4b07      	ldr	r3, [pc, #28]	; (80083f8 <prvSwitchTimerLists+0xbc>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80083e0:	4b06      	ldr	r3, [pc, #24]	; (80083fc <prvSwitchTimerLists+0xc0>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a04      	ldr	r2, [pc, #16]	; (80083f8 <prvSwitchTimerLists+0xbc>)
 80083e6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80083e8:	4a04      	ldr	r2, [pc, #16]	; (80083fc <prvSwitchTimerLists+0xc0>)
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	6013      	str	r3, [r2, #0]
}
 80083ee:	bf00      	nop
 80083f0:	3718      	adds	r7, #24
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	20000fb4 	.word	0x20000fb4
 80083fc:	20000fb8 	.word	0x20000fb8

08008400 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008406:	f000 f965 	bl	80086d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800840a:	4b15      	ldr	r3, [pc, #84]	; (8008460 <prvCheckForValidListAndQueue+0x60>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d120      	bne.n	8008454 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008412:	4814      	ldr	r0, [pc, #80]	; (8008464 <prvCheckForValidListAndQueue+0x64>)
 8008414:	f7fe f85e 	bl	80064d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008418:	4813      	ldr	r0, [pc, #76]	; (8008468 <prvCheckForValidListAndQueue+0x68>)
 800841a:	f7fe f85b 	bl	80064d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800841e:	4b13      	ldr	r3, [pc, #76]	; (800846c <prvCheckForValidListAndQueue+0x6c>)
 8008420:	4a10      	ldr	r2, [pc, #64]	; (8008464 <prvCheckForValidListAndQueue+0x64>)
 8008422:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008424:	4b12      	ldr	r3, [pc, #72]	; (8008470 <prvCheckForValidListAndQueue+0x70>)
 8008426:	4a10      	ldr	r2, [pc, #64]	; (8008468 <prvCheckForValidListAndQueue+0x68>)
 8008428:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800842a:	2300      	movs	r3, #0
 800842c:	9300      	str	r3, [sp, #0]
 800842e:	4b11      	ldr	r3, [pc, #68]	; (8008474 <prvCheckForValidListAndQueue+0x74>)
 8008430:	4a11      	ldr	r2, [pc, #68]	; (8008478 <prvCheckForValidListAndQueue+0x78>)
 8008432:	2110      	movs	r1, #16
 8008434:	200a      	movs	r0, #10
 8008436:	f7fe f969 	bl	800670c <xQueueGenericCreateStatic>
 800843a:	4603      	mov	r3, r0
 800843c:	4a08      	ldr	r2, [pc, #32]	; (8008460 <prvCheckForValidListAndQueue+0x60>)
 800843e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008440:	4b07      	ldr	r3, [pc, #28]	; (8008460 <prvCheckForValidListAndQueue+0x60>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d005      	beq.n	8008454 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008448:	4b05      	ldr	r3, [pc, #20]	; (8008460 <prvCheckForValidListAndQueue+0x60>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	490b      	ldr	r1, [pc, #44]	; (800847c <prvCheckForValidListAndQueue+0x7c>)
 800844e:	4618      	mov	r0, r3
 8008450:	f7fe fd7c 	bl	8006f4c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008454:	f000 f96e 	bl	8008734 <vPortExitCritical>
}
 8008458:	bf00      	nop
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop
 8008460:	20000fbc 	.word	0x20000fbc
 8008464:	20000f8c 	.word	0x20000f8c
 8008468:	20000fa0 	.word	0x20000fa0
 800846c:	20000fb4 	.word	0x20000fb4
 8008470:	20000fb8 	.word	0x20000fb8
 8008474:	20001068 	.word	0x20001068
 8008478:	20000fc8 	.word	0x20000fc8
 800847c:	08009c64 	.word	0x08009c64

08008480 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008480:	b480      	push	{r7}
 8008482:	b085      	sub	sp, #20
 8008484:	af00      	add	r7, sp, #0
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	3b04      	subs	r3, #4
 8008490:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008498:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	3b04      	subs	r3, #4
 800849e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	f023 0201 	bic.w	r2, r3, #1
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	3b04      	subs	r3, #4
 80084ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80084b0:	4a0c      	ldr	r2, [pc, #48]	; (80084e4 <pxPortInitialiseStack+0x64>)
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	3b14      	subs	r3, #20
 80084ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	3b04      	subs	r3, #4
 80084c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f06f 0202 	mvn.w	r2, #2
 80084ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	3b20      	subs	r3, #32
 80084d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80084d6:	68fb      	ldr	r3, [r7, #12]
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3714      	adds	r7, #20
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr
 80084e4:	080084e9 	.word	0x080084e9

080084e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80084e8:	b480      	push	{r7}
 80084ea:	b085      	sub	sp, #20
 80084ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80084ee:	2300      	movs	r3, #0
 80084f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80084f2:	4b12      	ldr	r3, [pc, #72]	; (800853c <prvTaskExitError+0x54>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084fa:	d00a      	beq.n	8008512 <prvTaskExitError+0x2a>
	__asm volatile
 80084fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008500:	f383 8811 	msr	BASEPRI, r3
 8008504:	f3bf 8f6f 	isb	sy
 8008508:	f3bf 8f4f 	dsb	sy
 800850c:	60fb      	str	r3, [r7, #12]
}
 800850e:	bf00      	nop
 8008510:	e7fe      	b.n	8008510 <prvTaskExitError+0x28>
	__asm volatile
 8008512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008516:	f383 8811 	msr	BASEPRI, r3
 800851a:	f3bf 8f6f 	isb	sy
 800851e:	f3bf 8f4f 	dsb	sy
 8008522:	60bb      	str	r3, [r7, #8]
}
 8008524:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008526:	bf00      	nop
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d0fc      	beq.n	8008528 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800852e:	bf00      	nop
 8008530:	bf00      	nop
 8008532:	3714      	adds	r7, #20
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr
 800853c:	20000014 	.word	0x20000014

08008540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008540:	4b07      	ldr	r3, [pc, #28]	; (8008560 <pxCurrentTCBConst2>)
 8008542:	6819      	ldr	r1, [r3, #0]
 8008544:	6808      	ldr	r0, [r1, #0]
 8008546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800854a:	f380 8809 	msr	PSP, r0
 800854e:	f3bf 8f6f 	isb	sy
 8008552:	f04f 0000 	mov.w	r0, #0
 8008556:	f380 8811 	msr	BASEPRI, r0
 800855a:	4770      	bx	lr
 800855c:	f3af 8000 	nop.w

08008560 <pxCurrentTCBConst2>:
 8008560:	20000a8c 	.word	0x20000a8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008564:	bf00      	nop
 8008566:	bf00      	nop

08008568 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008568:	4808      	ldr	r0, [pc, #32]	; (800858c <prvPortStartFirstTask+0x24>)
 800856a:	6800      	ldr	r0, [r0, #0]
 800856c:	6800      	ldr	r0, [r0, #0]
 800856e:	f380 8808 	msr	MSP, r0
 8008572:	f04f 0000 	mov.w	r0, #0
 8008576:	f380 8814 	msr	CONTROL, r0
 800857a:	b662      	cpsie	i
 800857c:	b661      	cpsie	f
 800857e:	f3bf 8f4f 	dsb	sy
 8008582:	f3bf 8f6f 	isb	sy
 8008586:	df00      	svc	0
 8008588:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800858a:	bf00      	nop
 800858c:	e000ed08 	.word	0xe000ed08

08008590 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b086      	sub	sp, #24
 8008594:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008596:	4b46      	ldr	r3, [pc, #280]	; (80086b0 <xPortStartScheduler+0x120>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a46      	ldr	r2, [pc, #280]	; (80086b4 <xPortStartScheduler+0x124>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d10a      	bne.n	80085b6 <xPortStartScheduler+0x26>
	__asm volatile
 80085a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a4:	f383 8811 	msr	BASEPRI, r3
 80085a8:	f3bf 8f6f 	isb	sy
 80085ac:	f3bf 8f4f 	dsb	sy
 80085b0:	613b      	str	r3, [r7, #16]
}
 80085b2:	bf00      	nop
 80085b4:	e7fe      	b.n	80085b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80085b6:	4b3e      	ldr	r3, [pc, #248]	; (80086b0 <xPortStartScheduler+0x120>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a3f      	ldr	r2, [pc, #252]	; (80086b8 <xPortStartScheduler+0x128>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d10a      	bne.n	80085d6 <xPortStartScheduler+0x46>
	__asm volatile
 80085c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c4:	f383 8811 	msr	BASEPRI, r3
 80085c8:	f3bf 8f6f 	isb	sy
 80085cc:	f3bf 8f4f 	dsb	sy
 80085d0:	60fb      	str	r3, [r7, #12]
}
 80085d2:	bf00      	nop
 80085d4:	e7fe      	b.n	80085d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80085d6:	4b39      	ldr	r3, [pc, #228]	; (80086bc <xPortStartScheduler+0x12c>)
 80085d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	22ff      	movs	r2, #255	; 0xff
 80085e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	b2db      	uxtb	r3, r3
 80085ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80085f0:	78fb      	ldrb	r3, [r7, #3]
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80085f8:	b2da      	uxtb	r2, r3
 80085fa:	4b31      	ldr	r3, [pc, #196]	; (80086c0 <xPortStartScheduler+0x130>)
 80085fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80085fe:	4b31      	ldr	r3, [pc, #196]	; (80086c4 <xPortStartScheduler+0x134>)
 8008600:	2207      	movs	r2, #7
 8008602:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008604:	e009      	b.n	800861a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008606:	4b2f      	ldr	r3, [pc, #188]	; (80086c4 <xPortStartScheduler+0x134>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	3b01      	subs	r3, #1
 800860c:	4a2d      	ldr	r2, [pc, #180]	; (80086c4 <xPortStartScheduler+0x134>)
 800860e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008610:	78fb      	ldrb	r3, [r7, #3]
 8008612:	b2db      	uxtb	r3, r3
 8008614:	005b      	lsls	r3, r3, #1
 8008616:	b2db      	uxtb	r3, r3
 8008618:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800861a:	78fb      	ldrb	r3, [r7, #3]
 800861c:	b2db      	uxtb	r3, r3
 800861e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008622:	2b80      	cmp	r3, #128	; 0x80
 8008624:	d0ef      	beq.n	8008606 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008626:	4b27      	ldr	r3, [pc, #156]	; (80086c4 <xPortStartScheduler+0x134>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f1c3 0307 	rsb	r3, r3, #7
 800862e:	2b04      	cmp	r3, #4
 8008630:	d00a      	beq.n	8008648 <xPortStartScheduler+0xb8>
	__asm volatile
 8008632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008636:	f383 8811 	msr	BASEPRI, r3
 800863a:	f3bf 8f6f 	isb	sy
 800863e:	f3bf 8f4f 	dsb	sy
 8008642:	60bb      	str	r3, [r7, #8]
}
 8008644:	bf00      	nop
 8008646:	e7fe      	b.n	8008646 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008648:	4b1e      	ldr	r3, [pc, #120]	; (80086c4 <xPortStartScheduler+0x134>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	021b      	lsls	r3, r3, #8
 800864e:	4a1d      	ldr	r2, [pc, #116]	; (80086c4 <xPortStartScheduler+0x134>)
 8008650:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008652:	4b1c      	ldr	r3, [pc, #112]	; (80086c4 <xPortStartScheduler+0x134>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800865a:	4a1a      	ldr	r2, [pc, #104]	; (80086c4 <xPortStartScheduler+0x134>)
 800865c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	b2da      	uxtb	r2, r3
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008666:	4b18      	ldr	r3, [pc, #96]	; (80086c8 <xPortStartScheduler+0x138>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a17      	ldr	r2, [pc, #92]	; (80086c8 <xPortStartScheduler+0x138>)
 800866c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008670:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008672:	4b15      	ldr	r3, [pc, #84]	; (80086c8 <xPortStartScheduler+0x138>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a14      	ldr	r2, [pc, #80]	; (80086c8 <xPortStartScheduler+0x138>)
 8008678:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800867c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800867e:	f000 f8dd 	bl	800883c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008682:	4b12      	ldr	r3, [pc, #72]	; (80086cc <xPortStartScheduler+0x13c>)
 8008684:	2200      	movs	r2, #0
 8008686:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008688:	f000 f8fc 	bl	8008884 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800868c:	4b10      	ldr	r3, [pc, #64]	; (80086d0 <xPortStartScheduler+0x140>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a0f      	ldr	r2, [pc, #60]	; (80086d0 <xPortStartScheduler+0x140>)
 8008692:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008696:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008698:	f7ff ff66 	bl	8008568 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800869c:	f7ff f882 	bl	80077a4 <vTaskSwitchContext>
	prvTaskExitError();
 80086a0:	f7ff ff22 	bl	80084e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3718      	adds	r7, #24
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop
 80086b0:	e000ed00 	.word	0xe000ed00
 80086b4:	410fc271 	.word	0x410fc271
 80086b8:	410fc270 	.word	0x410fc270
 80086bc:	e000e400 	.word	0xe000e400
 80086c0:	200010b8 	.word	0x200010b8
 80086c4:	200010bc 	.word	0x200010bc
 80086c8:	e000ed20 	.word	0xe000ed20
 80086cc:	20000014 	.word	0x20000014
 80086d0:	e000ef34 	.word	0xe000ef34

080086d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80086d4:	b480      	push	{r7}
 80086d6:	b083      	sub	sp, #12
 80086d8:	af00      	add	r7, sp, #0
	__asm volatile
 80086da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086de:	f383 8811 	msr	BASEPRI, r3
 80086e2:	f3bf 8f6f 	isb	sy
 80086e6:	f3bf 8f4f 	dsb	sy
 80086ea:	607b      	str	r3, [r7, #4]
}
 80086ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80086ee:	4b0f      	ldr	r3, [pc, #60]	; (800872c <vPortEnterCritical+0x58>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	3301      	adds	r3, #1
 80086f4:	4a0d      	ldr	r2, [pc, #52]	; (800872c <vPortEnterCritical+0x58>)
 80086f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80086f8:	4b0c      	ldr	r3, [pc, #48]	; (800872c <vPortEnterCritical+0x58>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	d10f      	bne.n	8008720 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008700:	4b0b      	ldr	r3, [pc, #44]	; (8008730 <vPortEnterCritical+0x5c>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	b2db      	uxtb	r3, r3
 8008706:	2b00      	cmp	r3, #0
 8008708:	d00a      	beq.n	8008720 <vPortEnterCritical+0x4c>
	__asm volatile
 800870a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800870e:	f383 8811 	msr	BASEPRI, r3
 8008712:	f3bf 8f6f 	isb	sy
 8008716:	f3bf 8f4f 	dsb	sy
 800871a:	603b      	str	r3, [r7, #0]
}
 800871c:	bf00      	nop
 800871e:	e7fe      	b.n	800871e <vPortEnterCritical+0x4a>
	}
}
 8008720:	bf00      	nop
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr
 800872c:	20000014 	.word	0x20000014
 8008730:	e000ed04 	.word	0xe000ed04

08008734 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008734:	b480      	push	{r7}
 8008736:	b083      	sub	sp, #12
 8008738:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800873a:	4b12      	ldr	r3, [pc, #72]	; (8008784 <vPortExitCritical+0x50>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d10a      	bne.n	8008758 <vPortExitCritical+0x24>
	__asm volatile
 8008742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008746:	f383 8811 	msr	BASEPRI, r3
 800874a:	f3bf 8f6f 	isb	sy
 800874e:	f3bf 8f4f 	dsb	sy
 8008752:	607b      	str	r3, [r7, #4]
}
 8008754:	bf00      	nop
 8008756:	e7fe      	b.n	8008756 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008758:	4b0a      	ldr	r3, [pc, #40]	; (8008784 <vPortExitCritical+0x50>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	3b01      	subs	r3, #1
 800875e:	4a09      	ldr	r2, [pc, #36]	; (8008784 <vPortExitCritical+0x50>)
 8008760:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008762:	4b08      	ldr	r3, [pc, #32]	; (8008784 <vPortExitCritical+0x50>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d105      	bne.n	8008776 <vPortExitCritical+0x42>
 800876a:	2300      	movs	r3, #0
 800876c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	f383 8811 	msr	BASEPRI, r3
}
 8008774:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008776:	bf00      	nop
 8008778:	370c      	adds	r7, #12
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr
 8008782:	bf00      	nop
 8008784:	20000014 	.word	0x20000014
	...

08008790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008790:	f3ef 8009 	mrs	r0, PSP
 8008794:	f3bf 8f6f 	isb	sy
 8008798:	4b15      	ldr	r3, [pc, #84]	; (80087f0 <pxCurrentTCBConst>)
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	f01e 0f10 	tst.w	lr, #16
 80087a0:	bf08      	it	eq
 80087a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80087a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087aa:	6010      	str	r0, [r2, #0]
 80087ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80087b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80087b4:	f380 8811 	msr	BASEPRI, r0
 80087b8:	f3bf 8f4f 	dsb	sy
 80087bc:	f3bf 8f6f 	isb	sy
 80087c0:	f7fe fff0 	bl	80077a4 <vTaskSwitchContext>
 80087c4:	f04f 0000 	mov.w	r0, #0
 80087c8:	f380 8811 	msr	BASEPRI, r0
 80087cc:	bc09      	pop	{r0, r3}
 80087ce:	6819      	ldr	r1, [r3, #0]
 80087d0:	6808      	ldr	r0, [r1, #0]
 80087d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087d6:	f01e 0f10 	tst.w	lr, #16
 80087da:	bf08      	it	eq
 80087dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80087e0:	f380 8809 	msr	PSP, r0
 80087e4:	f3bf 8f6f 	isb	sy
 80087e8:	4770      	bx	lr
 80087ea:	bf00      	nop
 80087ec:	f3af 8000 	nop.w

080087f0 <pxCurrentTCBConst>:
 80087f0:	20000a8c 	.word	0x20000a8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80087f4:	bf00      	nop
 80087f6:	bf00      	nop

080087f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
	__asm volatile
 80087fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008802:	f383 8811 	msr	BASEPRI, r3
 8008806:	f3bf 8f6f 	isb	sy
 800880a:	f3bf 8f4f 	dsb	sy
 800880e:	607b      	str	r3, [r7, #4]
}
 8008810:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008812:	f7fe ff09 	bl	8007628 <xTaskIncrementTick>
 8008816:	4603      	mov	r3, r0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d003      	beq.n	8008824 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800881c:	4b06      	ldr	r3, [pc, #24]	; (8008838 <SysTick_Handler+0x40>)
 800881e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008822:	601a      	str	r2, [r3, #0]
 8008824:	2300      	movs	r3, #0
 8008826:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	f383 8811 	msr	BASEPRI, r3
}
 800882e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008830:	bf00      	nop
 8008832:	3708      	adds	r7, #8
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}
 8008838:	e000ed04 	.word	0xe000ed04

0800883c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800883c:	b480      	push	{r7}
 800883e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008840:	4b0b      	ldr	r3, [pc, #44]	; (8008870 <vPortSetupTimerInterrupt+0x34>)
 8008842:	2200      	movs	r2, #0
 8008844:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008846:	4b0b      	ldr	r3, [pc, #44]	; (8008874 <vPortSetupTimerInterrupt+0x38>)
 8008848:	2200      	movs	r2, #0
 800884a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800884c:	4b0a      	ldr	r3, [pc, #40]	; (8008878 <vPortSetupTimerInterrupt+0x3c>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a0a      	ldr	r2, [pc, #40]	; (800887c <vPortSetupTimerInterrupt+0x40>)
 8008852:	fba2 2303 	umull	r2, r3, r2, r3
 8008856:	099b      	lsrs	r3, r3, #6
 8008858:	4a09      	ldr	r2, [pc, #36]	; (8008880 <vPortSetupTimerInterrupt+0x44>)
 800885a:	3b01      	subs	r3, #1
 800885c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800885e:	4b04      	ldr	r3, [pc, #16]	; (8008870 <vPortSetupTimerInterrupt+0x34>)
 8008860:	2207      	movs	r2, #7
 8008862:	601a      	str	r2, [r3, #0]
}
 8008864:	bf00      	nop
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr
 800886e:	bf00      	nop
 8008870:	e000e010 	.word	0xe000e010
 8008874:	e000e018 	.word	0xe000e018
 8008878:	20000008 	.word	0x20000008
 800887c:	10624dd3 	.word	0x10624dd3
 8008880:	e000e014 	.word	0xe000e014

08008884 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008884:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008894 <vPortEnableVFP+0x10>
 8008888:	6801      	ldr	r1, [r0, #0]
 800888a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800888e:	6001      	str	r1, [r0, #0]
 8008890:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008892:	bf00      	nop
 8008894:	e000ed88 	.word	0xe000ed88

08008898 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008898:	b480      	push	{r7}
 800889a:	b085      	sub	sp, #20
 800889c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800889e:	f3ef 8305 	mrs	r3, IPSR
 80088a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2b0f      	cmp	r3, #15
 80088a8:	d914      	bls.n	80088d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80088aa:	4a17      	ldr	r2, [pc, #92]	; (8008908 <vPortValidateInterruptPriority+0x70>)
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	4413      	add	r3, r2
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80088b4:	4b15      	ldr	r3, [pc, #84]	; (800890c <vPortValidateInterruptPriority+0x74>)
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	7afa      	ldrb	r2, [r7, #11]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d20a      	bcs.n	80088d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80088be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c2:	f383 8811 	msr	BASEPRI, r3
 80088c6:	f3bf 8f6f 	isb	sy
 80088ca:	f3bf 8f4f 	dsb	sy
 80088ce:	607b      	str	r3, [r7, #4]
}
 80088d0:	bf00      	nop
 80088d2:	e7fe      	b.n	80088d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80088d4:	4b0e      	ldr	r3, [pc, #56]	; (8008910 <vPortValidateInterruptPriority+0x78>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80088dc:	4b0d      	ldr	r3, [pc, #52]	; (8008914 <vPortValidateInterruptPriority+0x7c>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d90a      	bls.n	80088fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80088e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e8:	f383 8811 	msr	BASEPRI, r3
 80088ec:	f3bf 8f6f 	isb	sy
 80088f0:	f3bf 8f4f 	dsb	sy
 80088f4:	603b      	str	r3, [r7, #0]
}
 80088f6:	bf00      	nop
 80088f8:	e7fe      	b.n	80088f8 <vPortValidateInterruptPriority+0x60>
	}
 80088fa:	bf00      	nop
 80088fc:	3714      	adds	r7, #20
 80088fe:	46bd      	mov	sp, r7
 8008900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008904:	4770      	bx	lr
 8008906:	bf00      	nop
 8008908:	e000e3f0 	.word	0xe000e3f0
 800890c:	200010b8 	.word	0x200010b8
 8008910:	e000ed0c 	.word	0xe000ed0c
 8008914:	200010bc 	.word	0x200010bc

08008918 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b08a      	sub	sp, #40	; 0x28
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008920:	2300      	movs	r3, #0
 8008922:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008924:	f7fe fdc4 	bl	80074b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008928:	4b58      	ldr	r3, [pc, #352]	; (8008a8c <pvPortMalloc+0x174>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d101      	bne.n	8008934 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008930:	f000 f910 	bl	8008b54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008934:	4b56      	ldr	r3, [pc, #344]	; (8008a90 <pvPortMalloc+0x178>)
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4013      	ands	r3, r2
 800893c:	2b00      	cmp	r3, #0
 800893e:	f040 808e 	bne.w	8008a5e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d01d      	beq.n	8008984 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008948:	2208      	movs	r2, #8
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	4413      	add	r3, r2
 800894e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f003 0307 	and.w	r3, r3, #7
 8008956:	2b00      	cmp	r3, #0
 8008958:	d014      	beq.n	8008984 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f023 0307 	bic.w	r3, r3, #7
 8008960:	3308      	adds	r3, #8
 8008962:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f003 0307 	and.w	r3, r3, #7
 800896a:	2b00      	cmp	r3, #0
 800896c:	d00a      	beq.n	8008984 <pvPortMalloc+0x6c>
	__asm volatile
 800896e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008972:	f383 8811 	msr	BASEPRI, r3
 8008976:	f3bf 8f6f 	isb	sy
 800897a:	f3bf 8f4f 	dsb	sy
 800897e:	617b      	str	r3, [r7, #20]
}
 8008980:	bf00      	nop
 8008982:	e7fe      	b.n	8008982 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d069      	beq.n	8008a5e <pvPortMalloc+0x146>
 800898a:	4b42      	ldr	r3, [pc, #264]	; (8008a94 <pvPortMalloc+0x17c>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	429a      	cmp	r2, r3
 8008992:	d864      	bhi.n	8008a5e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008994:	4b40      	ldr	r3, [pc, #256]	; (8008a98 <pvPortMalloc+0x180>)
 8008996:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008998:	4b3f      	ldr	r3, [pc, #252]	; (8008a98 <pvPortMalloc+0x180>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800899e:	e004      	b.n	80089aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80089a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80089a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d903      	bls.n	80089bc <pvPortMalloc+0xa4>
 80089b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d1f1      	bne.n	80089a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80089bc:	4b33      	ldr	r3, [pc, #204]	; (8008a8c <pvPortMalloc+0x174>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d04b      	beq.n	8008a5e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80089c6:	6a3b      	ldr	r3, [r7, #32]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	2208      	movs	r2, #8
 80089cc:	4413      	add	r3, r2
 80089ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80089d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	6a3b      	ldr	r3, [r7, #32]
 80089d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80089d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089da:	685a      	ldr	r2, [r3, #4]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	1ad2      	subs	r2, r2, r3
 80089e0:	2308      	movs	r3, #8
 80089e2:	005b      	lsls	r3, r3, #1
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d91f      	bls.n	8008a28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80089e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	4413      	add	r3, r2
 80089ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089f0:	69bb      	ldr	r3, [r7, #24]
 80089f2:	f003 0307 	and.w	r3, r3, #7
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d00a      	beq.n	8008a10 <pvPortMalloc+0xf8>
	__asm volatile
 80089fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089fe:	f383 8811 	msr	BASEPRI, r3
 8008a02:	f3bf 8f6f 	isb	sy
 8008a06:	f3bf 8f4f 	dsb	sy
 8008a0a:	613b      	str	r3, [r7, #16]
}
 8008a0c:	bf00      	nop
 8008a0e:	e7fe      	b.n	8008a0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a12:	685a      	ldr	r2, [r3, #4]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	1ad2      	subs	r2, r2, r3
 8008a18:	69bb      	ldr	r3, [r7, #24]
 8008a1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008a22:	69b8      	ldr	r0, [r7, #24]
 8008a24:	f000 f8f8 	bl	8008c18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a28:	4b1a      	ldr	r3, [pc, #104]	; (8008a94 <pvPortMalloc+0x17c>)
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	1ad3      	subs	r3, r2, r3
 8008a32:	4a18      	ldr	r2, [pc, #96]	; (8008a94 <pvPortMalloc+0x17c>)
 8008a34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a36:	4b17      	ldr	r3, [pc, #92]	; (8008a94 <pvPortMalloc+0x17c>)
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	4b18      	ldr	r3, [pc, #96]	; (8008a9c <pvPortMalloc+0x184>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d203      	bcs.n	8008a4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a42:	4b14      	ldr	r3, [pc, #80]	; (8008a94 <pvPortMalloc+0x17c>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a15      	ldr	r2, [pc, #84]	; (8008a9c <pvPortMalloc+0x184>)
 8008a48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4c:	685a      	ldr	r2, [r3, #4]
 8008a4e:	4b10      	ldr	r3, [pc, #64]	; (8008a90 <pvPortMalloc+0x178>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	431a      	orrs	r2, r3
 8008a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a5e:	f7fe fd35 	bl	80074cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a62:	69fb      	ldr	r3, [r7, #28]
 8008a64:	f003 0307 	and.w	r3, r3, #7
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d00a      	beq.n	8008a82 <pvPortMalloc+0x16a>
	__asm volatile
 8008a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a70:	f383 8811 	msr	BASEPRI, r3
 8008a74:	f3bf 8f6f 	isb	sy
 8008a78:	f3bf 8f4f 	dsb	sy
 8008a7c:	60fb      	str	r3, [r7, #12]
}
 8008a7e:	bf00      	nop
 8008a80:	e7fe      	b.n	8008a80 <pvPortMalloc+0x168>
	return pvReturn;
 8008a82:	69fb      	ldr	r3, [r7, #28]
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3728      	adds	r7, #40	; 0x28
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}
 8008a8c:	20001cc8 	.word	0x20001cc8
 8008a90:	20001cd4 	.word	0x20001cd4
 8008a94:	20001ccc 	.word	0x20001ccc
 8008a98:	20001cc0 	.word	0x20001cc0
 8008a9c:	20001cd0 	.word	0x20001cd0

08008aa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b086      	sub	sp, #24
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d048      	beq.n	8008b44 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008ab2:	2308      	movs	r3, #8
 8008ab4:	425b      	negs	r3, r3
 8008ab6:	697a      	ldr	r2, [r7, #20]
 8008ab8:	4413      	add	r3, r2
 8008aba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	685a      	ldr	r2, [r3, #4]
 8008ac4:	4b21      	ldr	r3, [pc, #132]	; (8008b4c <vPortFree+0xac>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4013      	ands	r3, r2
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d10a      	bne.n	8008ae4 <vPortFree+0x44>
	__asm volatile
 8008ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad2:	f383 8811 	msr	BASEPRI, r3
 8008ad6:	f3bf 8f6f 	isb	sy
 8008ada:	f3bf 8f4f 	dsb	sy
 8008ade:	60fb      	str	r3, [r7, #12]
}
 8008ae0:	bf00      	nop
 8008ae2:	e7fe      	b.n	8008ae2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d00a      	beq.n	8008b02 <vPortFree+0x62>
	__asm volatile
 8008aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af0:	f383 8811 	msr	BASEPRI, r3
 8008af4:	f3bf 8f6f 	isb	sy
 8008af8:	f3bf 8f4f 	dsb	sy
 8008afc:	60bb      	str	r3, [r7, #8]
}
 8008afe:	bf00      	nop
 8008b00:	e7fe      	b.n	8008b00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	685a      	ldr	r2, [r3, #4]
 8008b06:	4b11      	ldr	r3, [pc, #68]	; (8008b4c <vPortFree+0xac>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4013      	ands	r3, r2
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d019      	beq.n	8008b44 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d115      	bne.n	8008b44 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	685a      	ldr	r2, [r3, #4]
 8008b1c:	4b0b      	ldr	r3, [pc, #44]	; (8008b4c <vPortFree+0xac>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	43db      	mvns	r3, r3
 8008b22:	401a      	ands	r2, r3
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008b28:	f7fe fcc2 	bl	80074b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	685a      	ldr	r2, [r3, #4]
 8008b30:	4b07      	ldr	r3, [pc, #28]	; (8008b50 <vPortFree+0xb0>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4413      	add	r3, r2
 8008b36:	4a06      	ldr	r2, [pc, #24]	; (8008b50 <vPortFree+0xb0>)
 8008b38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b3a:	6938      	ldr	r0, [r7, #16]
 8008b3c:	f000 f86c 	bl	8008c18 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008b40:	f7fe fcc4 	bl	80074cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b44:	bf00      	nop
 8008b46:	3718      	adds	r7, #24
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}
 8008b4c:	20001cd4 	.word	0x20001cd4
 8008b50:	20001ccc 	.word	0x20001ccc

08008b54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b54:	b480      	push	{r7}
 8008b56:	b085      	sub	sp, #20
 8008b58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b5a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008b5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008b60:	4b27      	ldr	r3, [pc, #156]	; (8008c00 <prvHeapInit+0xac>)
 8008b62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f003 0307 	and.w	r3, r3, #7
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d00c      	beq.n	8008b88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	3307      	adds	r3, #7
 8008b72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f023 0307 	bic.w	r3, r3, #7
 8008b7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008b7c:	68ba      	ldr	r2, [r7, #8]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	1ad3      	subs	r3, r2, r3
 8008b82:	4a1f      	ldr	r2, [pc, #124]	; (8008c00 <prvHeapInit+0xac>)
 8008b84:	4413      	add	r3, r2
 8008b86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b8c:	4a1d      	ldr	r2, [pc, #116]	; (8008c04 <prvHeapInit+0xb0>)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008b92:	4b1c      	ldr	r3, [pc, #112]	; (8008c04 <prvHeapInit+0xb0>)
 8008b94:	2200      	movs	r2, #0
 8008b96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	68ba      	ldr	r2, [r7, #8]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008ba0:	2208      	movs	r2, #8
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	1a9b      	subs	r3, r3, r2
 8008ba6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f023 0307 	bic.w	r3, r3, #7
 8008bae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	4a15      	ldr	r2, [pc, #84]	; (8008c08 <prvHeapInit+0xb4>)
 8008bb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008bb6:	4b14      	ldr	r3, [pc, #80]	; (8008c08 <prvHeapInit+0xb4>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008bbe:	4b12      	ldr	r3, [pc, #72]	; (8008c08 <prvHeapInit+0xb4>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	68fa      	ldr	r2, [r7, #12]
 8008bce:	1ad2      	subs	r2, r2, r3
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008bd4:	4b0c      	ldr	r3, [pc, #48]	; (8008c08 <prvHeapInit+0xb4>)
 8008bd6:	681a      	ldr	r2, [r3, #0]
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	4a0a      	ldr	r2, [pc, #40]	; (8008c0c <prvHeapInit+0xb8>)
 8008be2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	4a09      	ldr	r2, [pc, #36]	; (8008c10 <prvHeapInit+0xbc>)
 8008bea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008bec:	4b09      	ldr	r3, [pc, #36]	; (8008c14 <prvHeapInit+0xc0>)
 8008bee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008bf2:	601a      	str	r2, [r3, #0]
}
 8008bf4:	bf00      	nop
 8008bf6:	3714      	adds	r7, #20
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr
 8008c00:	200010c0 	.word	0x200010c0
 8008c04:	20001cc0 	.word	0x20001cc0
 8008c08:	20001cc8 	.word	0x20001cc8
 8008c0c:	20001cd0 	.word	0x20001cd0
 8008c10:	20001ccc 	.word	0x20001ccc
 8008c14:	20001cd4 	.word	0x20001cd4

08008c18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b085      	sub	sp, #20
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c20:	4b28      	ldr	r3, [pc, #160]	; (8008cc4 <prvInsertBlockIntoFreeList+0xac>)
 8008c22:	60fb      	str	r3, [r7, #12]
 8008c24:	e002      	b.n	8008c2c <prvInsertBlockIntoFreeList+0x14>
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	60fb      	str	r3, [r7, #12]
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d8f7      	bhi.n	8008c26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	68ba      	ldr	r2, [r7, #8]
 8008c40:	4413      	add	r3, r2
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d108      	bne.n	8008c5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	685a      	ldr	r2, [r3, #4]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	441a      	add	r2, r3
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	68ba      	ldr	r2, [r7, #8]
 8008c64:	441a      	add	r2, r3
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d118      	bne.n	8008ca0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	4b15      	ldr	r3, [pc, #84]	; (8008cc8 <prvInsertBlockIntoFreeList+0xb0>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d00d      	beq.n	8008c96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	685a      	ldr	r2, [r3, #4]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	441a      	add	r2, r3
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	601a      	str	r2, [r3, #0]
 8008c94:	e008      	b.n	8008ca8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008c96:	4b0c      	ldr	r3, [pc, #48]	; (8008cc8 <prvInsertBlockIntoFreeList+0xb0>)
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	601a      	str	r2, [r3, #0]
 8008c9e:	e003      	b.n	8008ca8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008ca8:	68fa      	ldr	r2, [r7, #12]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d002      	beq.n	8008cb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cb6:	bf00      	nop
 8008cb8:	3714      	adds	r7, #20
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr
 8008cc2:	bf00      	nop
 8008cc4:	20001cc0 	.word	0x20001cc0
 8008cc8:	20001cc8 	.word	0x20001cc8

08008ccc <siprintf>:
 8008ccc:	b40e      	push	{r1, r2, r3}
 8008cce:	b500      	push	{lr}
 8008cd0:	b09c      	sub	sp, #112	; 0x70
 8008cd2:	ab1d      	add	r3, sp, #116	; 0x74
 8008cd4:	9002      	str	r0, [sp, #8]
 8008cd6:	9006      	str	r0, [sp, #24]
 8008cd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008cdc:	4809      	ldr	r0, [pc, #36]	; (8008d04 <siprintf+0x38>)
 8008cde:	9107      	str	r1, [sp, #28]
 8008ce0:	9104      	str	r1, [sp, #16]
 8008ce2:	4909      	ldr	r1, [pc, #36]	; (8008d08 <siprintf+0x3c>)
 8008ce4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ce8:	9105      	str	r1, [sp, #20]
 8008cea:	6800      	ldr	r0, [r0, #0]
 8008cec:	9301      	str	r3, [sp, #4]
 8008cee:	a902      	add	r1, sp, #8
 8008cf0:	f000 f9f6 	bl	80090e0 <_svfiprintf_r>
 8008cf4:	9b02      	ldr	r3, [sp, #8]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	701a      	strb	r2, [r3, #0]
 8008cfa:	b01c      	add	sp, #112	; 0x70
 8008cfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d00:	b003      	add	sp, #12
 8008d02:	4770      	bx	lr
 8008d04:	20000064 	.word	0x20000064
 8008d08:	ffff0208 	.word	0xffff0208

08008d0c <memset>:
 8008d0c:	4402      	add	r2, r0
 8008d0e:	4603      	mov	r3, r0
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d100      	bne.n	8008d16 <memset+0xa>
 8008d14:	4770      	bx	lr
 8008d16:	f803 1b01 	strb.w	r1, [r3], #1
 8008d1a:	e7f9      	b.n	8008d10 <memset+0x4>

08008d1c <_reclaim_reent>:
 8008d1c:	4b29      	ldr	r3, [pc, #164]	; (8008dc4 <_reclaim_reent+0xa8>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4283      	cmp	r3, r0
 8008d22:	b570      	push	{r4, r5, r6, lr}
 8008d24:	4604      	mov	r4, r0
 8008d26:	d04b      	beq.n	8008dc0 <_reclaim_reent+0xa4>
 8008d28:	69c3      	ldr	r3, [r0, #28]
 8008d2a:	b143      	cbz	r3, 8008d3e <_reclaim_reent+0x22>
 8008d2c:	68db      	ldr	r3, [r3, #12]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d144      	bne.n	8008dbc <_reclaim_reent+0xa0>
 8008d32:	69e3      	ldr	r3, [r4, #28]
 8008d34:	6819      	ldr	r1, [r3, #0]
 8008d36:	b111      	cbz	r1, 8008d3e <_reclaim_reent+0x22>
 8008d38:	4620      	mov	r0, r4
 8008d3a:	f000 f87f 	bl	8008e3c <_free_r>
 8008d3e:	6961      	ldr	r1, [r4, #20]
 8008d40:	b111      	cbz	r1, 8008d48 <_reclaim_reent+0x2c>
 8008d42:	4620      	mov	r0, r4
 8008d44:	f000 f87a 	bl	8008e3c <_free_r>
 8008d48:	69e1      	ldr	r1, [r4, #28]
 8008d4a:	b111      	cbz	r1, 8008d52 <_reclaim_reent+0x36>
 8008d4c:	4620      	mov	r0, r4
 8008d4e:	f000 f875 	bl	8008e3c <_free_r>
 8008d52:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008d54:	b111      	cbz	r1, 8008d5c <_reclaim_reent+0x40>
 8008d56:	4620      	mov	r0, r4
 8008d58:	f000 f870 	bl	8008e3c <_free_r>
 8008d5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d5e:	b111      	cbz	r1, 8008d66 <_reclaim_reent+0x4a>
 8008d60:	4620      	mov	r0, r4
 8008d62:	f000 f86b 	bl	8008e3c <_free_r>
 8008d66:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008d68:	b111      	cbz	r1, 8008d70 <_reclaim_reent+0x54>
 8008d6a:	4620      	mov	r0, r4
 8008d6c:	f000 f866 	bl	8008e3c <_free_r>
 8008d70:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008d72:	b111      	cbz	r1, 8008d7a <_reclaim_reent+0x5e>
 8008d74:	4620      	mov	r0, r4
 8008d76:	f000 f861 	bl	8008e3c <_free_r>
 8008d7a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008d7c:	b111      	cbz	r1, 8008d84 <_reclaim_reent+0x68>
 8008d7e:	4620      	mov	r0, r4
 8008d80:	f000 f85c 	bl	8008e3c <_free_r>
 8008d84:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008d86:	b111      	cbz	r1, 8008d8e <_reclaim_reent+0x72>
 8008d88:	4620      	mov	r0, r4
 8008d8a:	f000 f857 	bl	8008e3c <_free_r>
 8008d8e:	6a23      	ldr	r3, [r4, #32]
 8008d90:	b1b3      	cbz	r3, 8008dc0 <_reclaim_reent+0xa4>
 8008d92:	4620      	mov	r0, r4
 8008d94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008d98:	4718      	bx	r3
 8008d9a:	5949      	ldr	r1, [r1, r5]
 8008d9c:	b941      	cbnz	r1, 8008db0 <_reclaim_reent+0x94>
 8008d9e:	3504      	adds	r5, #4
 8008da0:	69e3      	ldr	r3, [r4, #28]
 8008da2:	2d80      	cmp	r5, #128	; 0x80
 8008da4:	68d9      	ldr	r1, [r3, #12]
 8008da6:	d1f8      	bne.n	8008d9a <_reclaim_reent+0x7e>
 8008da8:	4620      	mov	r0, r4
 8008daa:	f000 f847 	bl	8008e3c <_free_r>
 8008dae:	e7c0      	b.n	8008d32 <_reclaim_reent+0x16>
 8008db0:	680e      	ldr	r6, [r1, #0]
 8008db2:	4620      	mov	r0, r4
 8008db4:	f000 f842 	bl	8008e3c <_free_r>
 8008db8:	4631      	mov	r1, r6
 8008dba:	e7ef      	b.n	8008d9c <_reclaim_reent+0x80>
 8008dbc:	2500      	movs	r5, #0
 8008dbe:	e7ef      	b.n	8008da0 <_reclaim_reent+0x84>
 8008dc0:	bd70      	pop	{r4, r5, r6, pc}
 8008dc2:	bf00      	nop
 8008dc4:	20000064 	.word	0x20000064

08008dc8 <__errno>:
 8008dc8:	4b01      	ldr	r3, [pc, #4]	; (8008dd0 <__errno+0x8>)
 8008dca:	6818      	ldr	r0, [r3, #0]
 8008dcc:	4770      	bx	lr
 8008dce:	bf00      	nop
 8008dd0:	20000064 	.word	0x20000064

08008dd4 <__libc_init_array>:
 8008dd4:	b570      	push	{r4, r5, r6, lr}
 8008dd6:	4d0d      	ldr	r5, [pc, #52]	; (8008e0c <__libc_init_array+0x38>)
 8008dd8:	4c0d      	ldr	r4, [pc, #52]	; (8008e10 <__libc_init_array+0x3c>)
 8008dda:	1b64      	subs	r4, r4, r5
 8008ddc:	10a4      	asrs	r4, r4, #2
 8008dde:	2600      	movs	r6, #0
 8008de0:	42a6      	cmp	r6, r4
 8008de2:	d109      	bne.n	8008df8 <__libc_init_array+0x24>
 8008de4:	4d0b      	ldr	r5, [pc, #44]	; (8008e14 <__libc_init_array+0x40>)
 8008de6:	4c0c      	ldr	r4, [pc, #48]	; (8008e18 <__libc_init_array+0x44>)
 8008de8:	f000 fc6a 	bl	80096c0 <_init>
 8008dec:	1b64      	subs	r4, r4, r5
 8008dee:	10a4      	asrs	r4, r4, #2
 8008df0:	2600      	movs	r6, #0
 8008df2:	42a6      	cmp	r6, r4
 8008df4:	d105      	bne.n	8008e02 <__libc_init_array+0x2e>
 8008df6:	bd70      	pop	{r4, r5, r6, pc}
 8008df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dfc:	4798      	blx	r3
 8008dfe:	3601      	adds	r6, #1
 8008e00:	e7ee      	b.n	8008de0 <__libc_init_array+0xc>
 8008e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e06:	4798      	blx	r3
 8008e08:	3601      	adds	r6, #1
 8008e0a:	e7f2      	b.n	8008df2 <__libc_init_array+0x1e>
 8008e0c:	08009d20 	.word	0x08009d20
 8008e10:	08009d20 	.word	0x08009d20
 8008e14:	08009d20 	.word	0x08009d20
 8008e18:	08009d24 	.word	0x08009d24

08008e1c <__retarget_lock_acquire_recursive>:
 8008e1c:	4770      	bx	lr

08008e1e <__retarget_lock_release_recursive>:
 8008e1e:	4770      	bx	lr

08008e20 <memcpy>:
 8008e20:	440a      	add	r2, r1
 8008e22:	4291      	cmp	r1, r2
 8008e24:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e28:	d100      	bne.n	8008e2c <memcpy+0xc>
 8008e2a:	4770      	bx	lr
 8008e2c:	b510      	push	{r4, lr}
 8008e2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e36:	4291      	cmp	r1, r2
 8008e38:	d1f9      	bne.n	8008e2e <memcpy+0xe>
 8008e3a:	bd10      	pop	{r4, pc}

08008e3c <_free_r>:
 8008e3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e3e:	2900      	cmp	r1, #0
 8008e40:	d044      	beq.n	8008ecc <_free_r+0x90>
 8008e42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e46:	9001      	str	r0, [sp, #4]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	f1a1 0404 	sub.w	r4, r1, #4
 8008e4e:	bfb8      	it	lt
 8008e50:	18e4      	addlt	r4, r4, r3
 8008e52:	f000 f8df 	bl	8009014 <__malloc_lock>
 8008e56:	4a1e      	ldr	r2, [pc, #120]	; (8008ed0 <_free_r+0x94>)
 8008e58:	9801      	ldr	r0, [sp, #4]
 8008e5a:	6813      	ldr	r3, [r2, #0]
 8008e5c:	b933      	cbnz	r3, 8008e6c <_free_r+0x30>
 8008e5e:	6063      	str	r3, [r4, #4]
 8008e60:	6014      	str	r4, [r2, #0]
 8008e62:	b003      	add	sp, #12
 8008e64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e68:	f000 b8da 	b.w	8009020 <__malloc_unlock>
 8008e6c:	42a3      	cmp	r3, r4
 8008e6e:	d908      	bls.n	8008e82 <_free_r+0x46>
 8008e70:	6825      	ldr	r5, [r4, #0]
 8008e72:	1961      	adds	r1, r4, r5
 8008e74:	428b      	cmp	r3, r1
 8008e76:	bf01      	itttt	eq
 8008e78:	6819      	ldreq	r1, [r3, #0]
 8008e7a:	685b      	ldreq	r3, [r3, #4]
 8008e7c:	1949      	addeq	r1, r1, r5
 8008e7e:	6021      	streq	r1, [r4, #0]
 8008e80:	e7ed      	b.n	8008e5e <_free_r+0x22>
 8008e82:	461a      	mov	r2, r3
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	b10b      	cbz	r3, 8008e8c <_free_r+0x50>
 8008e88:	42a3      	cmp	r3, r4
 8008e8a:	d9fa      	bls.n	8008e82 <_free_r+0x46>
 8008e8c:	6811      	ldr	r1, [r2, #0]
 8008e8e:	1855      	adds	r5, r2, r1
 8008e90:	42a5      	cmp	r5, r4
 8008e92:	d10b      	bne.n	8008eac <_free_r+0x70>
 8008e94:	6824      	ldr	r4, [r4, #0]
 8008e96:	4421      	add	r1, r4
 8008e98:	1854      	adds	r4, r2, r1
 8008e9a:	42a3      	cmp	r3, r4
 8008e9c:	6011      	str	r1, [r2, #0]
 8008e9e:	d1e0      	bne.n	8008e62 <_free_r+0x26>
 8008ea0:	681c      	ldr	r4, [r3, #0]
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	6053      	str	r3, [r2, #4]
 8008ea6:	440c      	add	r4, r1
 8008ea8:	6014      	str	r4, [r2, #0]
 8008eaa:	e7da      	b.n	8008e62 <_free_r+0x26>
 8008eac:	d902      	bls.n	8008eb4 <_free_r+0x78>
 8008eae:	230c      	movs	r3, #12
 8008eb0:	6003      	str	r3, [r0, #0]
 8008eb2:	e7d6      	b.n	8008e62 <_free_r+0x26>
 8008eb4:	6825      	ldr	r5, [r4, #0]
 8008eb6:	1961      	adds	r1, r4, r5
 8008eb8:	428b      	cmp	r3, r1
 8008eba:	bf04      	itt	eq
 8008ebc:	6819      	ldreq	r1, [r3, #0]
 8008ebe:	685b      	ldreq	r3, [r3, #4]
 8008ec0:	6063      	str	r3, [r4, #4]
 8008ec2:	bf04      	itt	eq
 8008ec4:	1949      	addeq	r1, r1, r5
 8008ec6:	6021      	streq	r1, [r4, #0]
 8008ec8:	6054      	str	r4, [r2, #4]
 8008eca:	e7ca      	b.n	8008e62 <_free_r+0x26>
 8008ecc:	b003      	add	sp, #12
 8008ece:	bd30      	pop	{r4, r5, pc}
 8008ed0:	20001e18 	.word	0x20001e18

08008ed4 <sbrk_aligned>:
 8008ed4:	b570      	push	{r4, r5, r6, lr}
 8008ed6:	4e0e      	ldr	r6, [pc, #56]	; (8008f10 <sbrk_aligned+0x3c>)
 8008ed8:	460c      	mov	r4, r1
 8008eda:	6831      	ldr	r1, [r6, #0]
 8008edc:	4605      	mov	r5, r0
 8008ede:	b911      	cbnz	r1, 8008ee6 <sbrk_aligned+0x12>
 8008ee0:	f000 fba6 	bl	8009630 <_sbrk_r>
 8008ee4:	6030      	str	r0, [r6, #0]
 8008ee6:	4621      	mov	r1, r4
 8008ee8:	4628      	mov	r0, r5
 8008eea:	f000 fba1 	bl	8009630 <_sbrk_r>
 8008eee:	1c43      	adds	r3, r0, #1
 8008ef0:	d00a      	beq.n	8008f08 <sbrk_aligned+0x34>
 8008ef2:	1cc4      	adds	r4, r0, #3
 8008ef4:	f024 0403 	bic.w	r4, r4, #3
 8008ef8:	42a0      	cmp	r0, r4
 8008efa:	d007      	beq.n	8008f0c <sbrk_aligned+0x38>
 8008efc:	1a21      	subs	r1, r4, r0
 8008efe:	4628      	mov	r0, r5
 8008f00:	f000 fb96 	bl	8009630 <_sbrk_r>
 8008f04:	3001      	adds	r0, #1
 8008f06:	d101      	bne.n	8008f0c <sbrk_aligned+0x38>
 8008f08:	f04f 34ff 	mov.w	r4, #4294967295
 8008f0c:	4620      	mov	r0, r4
 8008f0e:	bd70      	pop	{r4, r5, r6, pc}
 8008f10:	20001e1c 	.word	0x20001e1c

08008f14 <_malloc_r>:
 8008f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f18:	1ccd      	adds	r5, r1, #3
 8008f1a:	f025 0503 	bic.w	r5, r5, #3
 8008f1e:	3508      	adds	r5, #8
 8008f20:	2d0c      	cmp	r5, #12
 8008f22:	bf38      	it	cc
 8008f24:	250c      	movcc	r5, #12
 8008f26:	2d00      	cmp	r5, #0
 8008f28:	4607      	mov	r7, r0
 8008f2a:	db01      	blt.n	8008f30 <_malloc_r+0x1c>
 8008f2c:	42a9      	cmp	r1, r5
 8008f2e:	d905      	bls.n	8008f3c <_malloc_r+0x28>
 8008f30:	230c      	movs	r3, #12
 8008f32:	603b      	str	r3, [r7, #0]
 8008f34:	2600      	movs	r6, #0
 8008f36:	4630      	mov	r0, r6
 8008f38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f3c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009010 <_malloc_r+0xfc>
 8008f40:	f000 f868 	bl	8009014 <__malloc_lock>
 8008f44:	f8d8 3000 	ldr.w	r3, [r8]
 8008f48:	461c      	mov	r4, r3
 8008f4a:	bb5c      	cbnz	r4, 8008fa4 <_malloc_r+0x90>
 8008f4c:	4629      	mov	r1, r5
 8008f4e:	4638      	mov	r0, r7
 8008f50:	f7ff ffc0 	bl	8008ed4 <sbrk_aligned>
 8008f54:	1c43      	adds	r3, r0, #1
 8008f56:	4604      	mov	r4, r0
 8008f58:	d155      	bne.n	8009006 <_malloc_r+0xf2>
 8008f5a:	f8d8 4000 	ldr.w	r4, [r8]
 8008f5e:	4626      	mov	r6, r4
 8008f60:	2e00      	cmp	r6, #0
 8008f62:	d145      	bne.n	8008ff0 <_malloc_r+0xdc>
 8008f64:	2c00      	cmp	r4, #0
 8008f66:	d048      	beq.n	8008ffa <_malloc_r+0xe6>
 8008f68:	6823      	ldr	r3, [r4, #0]
 8008f6a:	4631      	mov	r1, r6
 8008f6c:	4638      	mov	r0, r7
 8008f6e:	eb04 0903 	add.w	r9, r4, r3
 8008f72:	f000 fb5d 	bl	8009630 <_sbrk_r>
 8008f76:	4581      	cmp	r9, r0
 8008f78:	d13f      	bne.n	8008ffa <_malloc_r+0xe6>
 8008f7a:	6821      	ldr	r1, [r4, #0]
 8008f7c:	1a6d      	subs	r5, r5, r1
 8008f7e:	4629      	mov	r1, r5
 8008f80:	4638      	mov	r0, r7
 8008f82:	f7ff ffa7 	bl	8008ed4 <sbrk_aligned>
 8008f86:	3001      	adds	r0, #1
 8008f88:	d037      	beq.n	8008ffa <_malloc_r+0xe6>
 8008f8a:	6823      	ldr	r3, [r4, #0]
 8008f8c:	442b      	add	r3, r5
 8008f8e:	6023      	str	r3, [r4, #0]
 8008f90:	f8d8 3000 	ldr.w	r3, [r8]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d038      	beq.n	800900a <_malloc_r+0xf6>
 8008f98:	685a      	ldr	r2, [r3, #4]
 8008f9a:	42a2      	cmp	r2, r4
 8008f9c:	d12b      	bne.n	8008ff6 <_malloc_r+0xe2>
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	605a      	str	r2, [r3, #4]
 8008fa2:	e00f      	b.n	8008fc4 <_malloc_r+0xb0>
 8008fa4:	6822      	ldr	r2, [r4, #0]
 8008fa6:	1b52      	subs	r2, r2, r5
 8008fa8:	d41f      	bmi.n	8008fea <_malloc_r+0xd6>
 8008faa:	2a0b      	cmp	r2, #11
 8008fac:	d917      	bls.n	8008fde <_malloc_r+0xca>
 8008fae:	1961      	adds	r1, r4, r5
 8008fb0:	42a3      	cmp	r3, r4
 8008fb2:	6025      	str	r5, [r4, #0]
 8008fb4:	bf18      	it	ne
 8008fb6:	6059      	strne	r1, [r3, #4]
 8008fb8:	6863      	ldr	r3, [r4, #4]
 8008fba:	bf08      	it	eq
 8008fbc:	f8c8 1000 	streq.w	r1, [r8]
 8008fc0:	5162      	str	r2, [r4, r5]
 8008fc2:	604b      	str	r3, [r1, #4]
 8008fc4:	4638      	mov	r0, r7
 8008fc6:	f104 060b 	add.w	r6, r4, #11
 8008fca:	f000 f829 	bl	8009020 <__malloc_unlock>
 8008fce:	f026 0607 	bic.w	r6, r6, #7
 8008fd2:	1d23      	adds	r3, r4, #4
 8008fd4:	1af2      	subs	r2, r6, r3
 8008fd6:	d0ae      	beq.n	8008f36 <_malloc_r+0x22>
 8008fd8:	1b9b      	subs	r3, r3, r6
 8008fda:	50a3      	str	r3, [r4, r2]
 8008fdc:	e7ab      	b.n	8008f36 <_malloc_r+0x22>
 8008fde:	42a3      	cmp	r3, r4
 8008fe0:	6862      	ldr	r2, [r4, #4]
 8008fe2:	d1dd      	bne.n	8008fa0 <_malloc_r+0x8c>
 8008fe4:	f8c8 2000 	str.w	r2, [r8]
 8008fe8:	e7ec      	b.n	8008fc4 <_malloc_r+0xb0>
 8008fea:	4623      	mov	r3, r4
 8008fec:	6864      	ldr	r4, [r4, #4]
 8008fee:	e7ac      	b.n	8008f4a <_malloc_r+0x36>
 8008ff0:	4634      	mov	r4, r6
 8008ff2:	6876      	ldr	r6, [r6, #4]
 8008ff4:	e7b4      	b.n	8008f60 <_malloc_r+0x4c>
 8008ff6:	4613      	mov	r3, r2
 8008ff8:	e7cc      	b.n	8008f94 <_malloc_r+0x80>
 8008ffa:	230c      	movs	r3, #12
 8008ffc:	603b      	str	r3, [r7, #0]
 8008ffe:	4638      	mov	r0, r7
 8009000:	f000 f80e 	bl	8009020 <__malloc_unlock>
 8009004:	e797      	b.n	8008f36 <_malloc_r+0x22>
 8009006:	6025      	str	r5, [r4, #0]
 8009008:	e7dc      	b.n	8008fc4 <_malloc_r+0xb0>
 800900a:	605b      	str	r3, [r3, #4]
 800900c:	deff      	udf	#255	; 0xff
 800900e:	bf00      	nop
 8009010:	20001e18 	.word	0x20001e18

08009014 <__malloc_lock>:
 8009014:	4801      	ldr	r0, [pc, #4]	; (800901c <__malloc_lock+0x8>)
 8009016:	f7ff bf01 	b.w	8008e1c <__retarget_lock_acquire_recursive>
 800901a:	bf00      	nop
 800901c:	20001e14 	.word	0x20001e14

08009020 <__malloc_unlock>:
 8009020:	4801      	ldr	r0, [pc, #4]	; (8009028 <__malloc_unlock+0x8>)
 8009022:	f7ff befc 	b.w	8008e1e <__retarget_lock_release_recursive>
 8009026:	bf00      	nop
 8009028:	20001e14 	.word	0x20001e14

0800902c <__ssputs_r>:
 800902c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009030:	688e      	ldr	r6, [r1, #8]
 8009032:	461f      	mov	r7, r3
 8009034:	42be      	cmp	r6, r7
 8009036:	680b      	ldr	r3, [r1, #0]
 8009038:	4682      	mov	sl, r0
 800903a:	460c      	mov	r4, r1
 800903c:	4690      	mov	r8, r2
 800903e:	d82c      	bhi.n	800909a <__ssputs_r+0x6e>
 8009040:	898a      	ldrh	r2, [r1, #12]
 8009042:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009046:	d026      	beq.n	8009096 <__ssputs_r+0x6a>
 8009048:	6965      	ldr	r5, [r4, #20]
 800904a:	6909      	ldr	r1, [r1, #16]
 800904c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009050:	eba3 0901 	sub.w	r9, r3, r1
 8009054:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009058:	1c7b      	adds	r3, r7, #1
 800905a:	444b      	add	r3, r9
 800905c:	106d      	asrs	r5, r5, #1
 800905e:	429d      	cmp	r5, r3
 8009060:	bf38      	it	cc
 8009062:	461d      	movcc	r5, r3
 8009064:	0553      	lsls	r3, r2, #21
 8009066:	d527      	bpl.n	80090b8 <__ssputs_r+0x8c>
 8009068:	4629      	mov	r1, r5
 800906a:	f7ff ff53 	bl	8008f14 <_malloc_r>
 800906e:	4606      	mov	r6, r0
 8009070:	b360      	cbz	r0, 80090cc <__ssputs_r+0xa0>
 8009072:	6921      	ldr	r1, [r4, #16]
 8009074:	464a      	mov	r2, r9
 8009076:	f7ff fed3 	bl	8008e20 <memcpy>
 800907a:	89a3      	ldrh	r3, [r4, #12]
 800907c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009084:	81a3      	strh	r3, [r4, #12]
 8009086:	6126      	str	r6, [r4, #16]
 8009088:	6165      	str	r5, [r4, #20]
 800908a:	444e      	add	r6, r9
 800908c:	eba5 0509 	sub.w	r5, r5, r9
 8009090:	6026      	str	r6, [r4, #0]
 8009092:	60a5      	str	r5, [r4, #8]
 8009094:	463e      	mov	r6, r7
 8009096:	42be      	cmp	r6, r7
 8009098:	d900      	bls.n	800909c <__ssputs_r+0x70>
 800909a:	463e      	mov	r6, r7
 800909c:	6820      	ldr	r0, [r4, #0]
 800909e:	4632      	mov	r2, r6
 80090a0:	4641      	mov	r1, r8
 80090a2:	f000 faab 	bl	80095fc <memmove>
 80090a6:	68a3      	ldr	r3, [r4, #8]
 80090a8:	1b9b      	subs	r3, r3, r6
 80090aa:	60a3      	str	r3, [r4, #8]
 80090ac:	6823      	ldr	r3, [r4, #0]
 80090ae:	4433      	add	r3, r6
 80090b0:	6023      	str	r3, [r4, #0]
 80090b2:	2000      	movs	r0, #0
 80090b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090b8:	462a      	mov	r2, r5
 80090ba:	f000 fac9 	bl	8009650 <_realloc_r>
 80090be:	4606      	mov	r6, r0
 80090c0:	2800      	cmp	r0, #0
 80090c2:	d1e0      	bne.n	8009086 <__ssputs_r+0x5a>
 80090c4:	6921      	ldr	r1, [r4, #16]
 80090c6:	4650      	mov	r0, sl
 80090c8:	f7ff feb8 	bl	8008e3c <_free_r>
 80090cc:	230c      	movs	r3, #12
 80090ce:	f8ca 3000 	str.w	r3, [sl]
 80090d2:	89a3      	ldrh	r3, [r4, #12]
 80090d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090d8:	81a3      	strh	r3, [r4, #12]
 80090da:	f04f 30ff 	mov.w	r0, #4294967295
 80090de:	e7e9      	b.n	80090b4 <__ssputs_r+0x88>

080090e0 <_svfiprintf_r>:
 80090e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090e4:	4698      	mov	r8, r3
 80090e6:	898b      	ldrh	r3, [r1, #12]
 80090e8:	061b      	lsls	r3, r3, #24
 80090ea:	b09d      	sub	sp, #116	; 0x74
 80090ec:	4607      	mov	r7, r0
 80090ee:	460d      	mov	r5, r1
 80090f0:	4614      	mov	r4, r2
 80090f2:	d50e      	bpl.n	8009112 <_svfiprintf_r+0x32>
 80090f4:	690b      	ldr	r3, [r1, #16]
 80090f6:	b963      	cbnz	r3, 8009112 <_svfiprintf_r+0x32>
 80090f8:	2140      	movs	r1, #64	; 0x40
 80090fa:	f7ff ff0b 	bl	8008f14 <_malloc_r>
 80090fe:	6028      	str	r0, [r5, #0]
 8009100:	6128      	str	r0, [r5, #16]
 8009102:	b920      	cbnz	r0, 800910e <_svfiprintf_r+0x2e>
 8009104:	230c      	movs	r3, #12
 8009106:	603b      	str	r3, [r7, #0]
 8009108:	f04f 30ff 	mov.w	r0, #4294967295
 800910c:	e0d0      	b.n	80092b0 <_svfiprintf_r+0x1d0>
 800910e:	2340      	movs	r3, #64	; 0x40
 8009110:	616b      	str	r3, [r5, #20]
 8009112:	2300      	movs	r3, #0
 8009114:	9309      	str	r3, [sp, #36]	; 0x24
 8009116:	2320      	movs	r3, #32
 8009118:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800911c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009120:	2330      	movs	r3, #48	; 0x30
 8009122:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80092c8 <_svfiprintf_r+0x1e8>
 8009126:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800912a:	f04f 0901 	mov.w	r9, #1
 800912e:	4623      	mov	r3, r4
 8009130:	469a      	mov	sl, r3
 8009132:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009136:	b10a      	cbz	r2, 800913c <_svfiprintf_r+0x5c>
 8009138:	2a25      	cmp	r2, #37	; 0x25
 800913a:	d1f9      	bne.n	8009130 <_svfiprintf_r+0x50>
 800913c:	ebba 0b04 	subs.w	fp, sl, r4
 8009140:	d00b      	beq.n	800915a <_svfiprintf_r+0x7a>
 8009142:	465b      	mov	r3, fp
 8009144:	4622      	mov	r2, r4
 8009146:	4629      	mov	r1, r5
 8009148:	4638      	mov	r0, r7
 800914a:	f7ff ff6f 	bl	800902c <__ssputs_r>
 800914e:	3001      	adds	r0, #1
 8009150:	f000 80a9 	beq.w	80092a6 <_svfiprintf_r+0x1c6>
 8009154:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009156:	445a      	add	r2, fp
 8009158:	9209      	str	r2, [sp, #36]	; 0x24
 800915a:	f89a 3000 	ldrb.w	r3, [sl]
 800915e:	2b00      	cmp	r3, #0
 8009160:	f000 80a1 	beq.w	80092a6 <_svfiprintf_r+0x1c6>
 8009164:	2300      	movs	r3, #0
 8009166:	f04f 32ff 	mov.w	r2, #4294967295
 800916a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800916e:	f10a 0a01 	add.w	sl, sl, #1
 8009172:	9304      	str	r3, [sp, #16]
 8009174:	9307      	str	r3, [sp, #28]
 8009176:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800917a:	931a      	str	r3, [sp, #104]	; 0x68
 800917c:	4654      	mov	r4, sl
 800917e:	2205      	movs	r2, #5
 8009180:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009184:	4850      	ldr	r0, [pc, #320]	; (80092c8 <_svfiprintf_r+0x1e8>)
 8009186:	f7f7 f82b 	bl	80001e0 <memchr>
 800918a:	9a04      	ldr	r2, [sp, #16]
 800918c:	b9d8      	cbnz	r0, 80091c6 <_svfiprintf_r+0xe6>
 800918e:	06d0      	lsls	r0, r2, #27
 8009190:	bf44      	itt	mi
 8009192:	2320      	movmi	r3, #32
 8009194:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009198:	0711      	lsls	r1, r2, #28
 800919a:	bf44      	itt	mi
 800919c:	232b      	movmi	r3, #43	; 0x2b
 800919e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091a2:	f89a 3000 	ldrb.w	r3, [sl]
 80091a6:	2b2a      	cmp	r3, #42	; 0x2a
 80091a8:	d015      	beq.n	80091d6 <_svfiprintf_r+0xf6>
 80091aa:	9a07      	ldr	r2, [sp, #28]
 80091ac:	4654      	mov	r4, sl
 80091ae:	2000      	movs	r0, #0
 80091b0:	f04f 0c0a 	mov.w	ip, #10
 80091b4:	4621      	mov	r1, r4
 80091b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091ba:	3b30      	subs	r3, #48	; 0x30
 80091bc:	2b09      	cmp	r3, #9
 80091be:	d94d      	bls.n	800925c <_svfiprintf_r+0x17c>
 80091c0:	b1b0      	cbz	r0, 80091f0 <_svfiprintf_r+0x110>
 80091c2:	9207      	str	r2, [sp, #28]
 80091c4:	e014      	b.n	80091f0 <_svfiprintf_r+0x110>
 80091c6:	eba0 0308 	sub.w	r3, r0, r8
 80091ca:	fa09 f303 	lsl.w	r3, r9, r3
 80091ce:	4313      	orrs	r3, r2
 80091d0:	9304      	str	r3, [sp, #16]
 80091d2:	46a2      	mov	sl, r4
 80091d4:	e7d2      	b.n	800917c <_svfiprintf_r+0x9c>
 80091d6:	9b03      	ldr	r3, [sp, #12]
 80091d8:	1d19      	adds	r1, r3, #4
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	9103      	str	r1, [sp, #12]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	bfbb      	ittet	lt
 80091e2:	425b      	neglt	r3, r3
 80091e4:	f042 0202 	orrlt.w	r2, r2, #2
 80091e8:	9307      	strge	r3, [sp, #28]
 80091ea:	9307      	strlt	r3, [sp, #28]
 80091ec:	bfb8      	it	lt
 80091ee:	9204      	strlt	r2, [sp, #16]
 80091f0:	7823      	ldrb	r3, [r4, #0]
 80091f2:	2b2e      	cmp	r3, #46	; 0x2e
 80091f4:	d10c      	bne.n	8009210 <_svfiprintf_r+0x130>
 80091f6:	7863      	ldrb	r3, [r4, #1]
 80091f8:	2b2a      	cmp	r3, #42	; 0x2a
 80091fa:	d134      	bne.n	8009266 <_svfiprintf_r+0x186>
 80091fc:	9b03      	ldr	r3, [sp, #12]
 80091fe:	1d1a      	adds	r2, r3, #4
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	9203      	str	r2, [sp, #12]
 8009204:	2b00      	cmp	r3, #0
 8009206:	bfb8      	it	lt
 8009208:	f04f 33ff 	movlt.w	r3, #4294967295
 800920c:	3402      	adds	r4, #2
 800920e:	9305      	str	r3, [sp, #20]
 8009210:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80092d8 <_svfiprintf_r+0x1f8>
 8009214:	7821      	ldrb	r1, [r4, #0]
 8009216:	2203      	movs	r2, #3
 8009218:	4650      	mov	r0, sl
 800921a:	f7f6 ffe1 	bl	80001e0 <memchr>
 800921e:	b138      	cbz	r0, 8009230 <_svfiprintf_r+0x150>
 8009220:	9b04      	ldr	r3, [sp, #16]
 8009222:	eba0 000a 	sub.w	r0, r0, sl
 8009226:	2240      	movs	r2, #64	; 0x40
 8009228:	4082      	lsls	r2, r0
 800922a:	4313      	orrs	r3, r2
 800922c:	3401      	adds	r4, #1
 800922e:	9304      	str	r3, [sp, #16]
 8009230:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009234:	4825      	ldr	r0, [pc, #148]	; (80092cc <_svfiprintf_r+0x1ec>)
 8009236:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800923a:	2206      	movs	r2, #6
 800923c:	f7f6 ffd0 	bl	80001e0 <memchr>
 8009240:	2800      	cmp	r0, #0
 8009242:	d038      	beq.n	80092b6 <_svfiprintf_r+0x1d6>
 8009244:	4b22      	ldr	r3, [pc, #136]	; (80092d0 <_svfiprintf_r+0x1f0>)
 8009246:	bb1b      	cbnz	r3, 8009290 <_svfiprintf_r+0x1b0>
 8009248:	9b03      	ldr	r3, [sp, #12]
 800924a:	3307      	adds	r3, #7
 800924c:	f023 0307 	bic.w	r3, r3, #7
 8009250:	3308      	adds	r3, #8
 8009252:	9303      	str	r3, [sp, #12]
 8009254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009256:	4433      	add	r3, r6
 8009258:	9309      	str	r3, [sp, #36]	; 0x24
 800925a:	e768      	b.n	800912e <_svfiprintf_r+0x4e>
 800925c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009260:	460c      	mov	r4, r1
 8009262:	2001      	movs	r0, #1
 8009264:	e7a6      	b.n	80091b4 <_svfiprintf_r+0xd4>
 8009266:	2300      	movs	r3, #0
 8009268:	3401      	adds	r4, #1
 800926a:	9305      	str	r3, [sp, #20]
 800926c:	4619      	mov	r1, r3
 800926e:	f04f 0c0a 	mov.w	ip, #10
 8009272:	4620      	mov	r0, r4
 8009274:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009278:	3a30      	subs	r2, #48	; 0x30
 800927a:	2a09      	cmp	r2, #9
 800927c:	d903      	bls.n	8009286 <_svfiprintf_r+0x1a6>
 800927e:	2b00      	cmp	r3, #0
 8009280:	d0c6      	beq.n	8009210 <_svfiprintf_r+0x130>
 8009282:	9105      	str	r1, [sp, #20]
 8009284:	e7c4      	b.n	8009210 <_svfiprintf_r+0x130>
 8009286:	fb0c 2101 	mla	r1, ip, r1, r2
 800928a:	4604      	mov	r4, r0
 800928c:	2301      	movs	r3, #1
 800928e:	e7f0      	b.n	8009272 <_svfiprintf_r+0x192>
 8009290:	ab03      	add	r3, sp, #12
 8009292:	9300      	str	r3, [sp, #0]
 8009294:	462a      	mov	r2, r5
 8009296:	4b0f      	ldr	r3, [pc, #60]	; (80092d4 <_svfiprintf_r+0x1f4>)
 8009298:	a904      	add	r1, sp, #16
 800929a:	4638      	mov	r0, r7
 800929c:	f3af 8000 	nop.w
 80092a0:	1c42      	adds	r2, r0, #1
 80092a2:	4606      	mov	r6, r0
 80092a4:	d1d6      	bne.n	8009254 <_svfiprintf_r+0x174>
 80092a6:	89ab      	ldrh	r3, [r5, #12]
 80092a8:	065b      	lsls	r3, r3, #25
 80092aa:	f53f af2d 	bmi.w	8009108 <_svfiprintf_r+0x28>
 80092ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092b0:	b01d      	add	sp, #116	; 0x74
 80092b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092b6:	ab03      	add	r3, sp, #12
 80092b8:	9300      	str	r3, [sp, #0]
 80092ba:	462a      	mov	r2, r5
 80092bc:	4b05      	ldr	r3, [pc, #20]	; (80092d4 <_svfiprintf_r+0x1f4>)
 80092be:	a904      	add	r1, sp, #16
 80092c0:	4638      	mov	r0, r7
 80092c2:	f000 f879 	bl	80093b8 <_printf_i>
 80092c6:	e7eb      	b.n	80092a0 <_svfiprintf_r+0x1c0>
 80092c8:	08009cec 	.word	0x08009cec
 80092cc:	08009cf6 	.word	0x08009cf6
 80092d0:	00000000 	.word	0x00000000
 80092d4:	0800902d 	.word	0x0800902d
 80092d8:	08009cf2 	.word	0x08009cf2

080092dc <_printf_common>:
 80092dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092e0:	4616      	mov	r6, r2
 80092e2:	4699      	mov	r9, r3
 80092e4:	688a      	ldr	r2, [r1, #8]
 80092e6:	690b      	ldr	r3, [r1, #16]
 80092e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80092ec:	4293      	cmp	r3, r2
 80092ee:	bfb8      	it	lt
 80092f0:	4613      	movlt	r3, r2
 80092f2:	6033      	str	r3, [r6, #0]
 80092f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80092f8:	4607      	mov	r7, r0
 80092fa:	460c      	mov	r4, r1
 80092fc:	b10a      	cbz	r2, 8009302 <_printf_common+0x26>
 80092fe:	3301      	adds	r3, #1
 8009300:	6033      	str	r3, [r6, #0]
 8009302:	6823      	ldr	r3, [r4, #0]
 8009304:	0699      	lsls	r1, r3, #26
 8009306:	bf42      	ittt	mi
 8009308:	6833      	ldrmi	r3, [r6, #0]
 800930a:	3302      	addmi	r3, #2
 800930c:	6033      	strmi	r3, [r6, #0]
 800930e:	6825      	ldr	r5, [r4, #0]
 8009310:	f015 0506 	ands.w	r5, r5, #6
 8009314:	d106      	bne.n	8009324 <_printf_common+0x48>
 8009316:	f104 0a19 	add.w	sl, r4, #25
 800931a:	68e3      	ldr	r3, [r4, #12]
 800931c:	6832      	ldr	r2, [r6, #0]
 800931e:	1a9b      	subs	r3, r3, r2
 8009320:	42ab      	cmp	r3, r5
 8009322:	dc26      	bgt.n	8009372 <_printf_common+0x96>
 8009324:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009328:	1e13      	subs	r3, r2, #0
 800932a:	6822      	ldr	r2, [r4, #0]
 800932c:	bf18      	it	ne
 800932e:	2301      	movne	r3, #1
 8009330:	0692      	lsls	r2, r2, #26
 8009332:	d42b      	bmi.n	800938c <_printf_common+0xb0>
 8009334:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009338:	4649      	mov	r1, r9
 800933a:	4638      	mov	r0, r7
 800933c:	47c0      	blx	r8
 800933e:	3001      	adds	r0, #1
 8009340:	d01e      	beq.n	8009380 <_printf_common+0xa4>
 8009342:	6823      	ldr	r3, [r4, #0]
 8009344:	6922      	ldr	r2, [r4, #16]
 8009346:	f003 0306 	and.w	r3, r3, #6
 800934a:	2b04      	cmp	r3, #4
 800934c:	bf02      	ittt	eq
 800934e:	68e5      	ldreq	r5, [r4, #12]
 8009350:	6833      	ldreq	r3, [r6, #0]
 8009352:	1aed      	subeq	r5, r5, r3
 8009354:	68a3      	ldr	r3, [r4, #8]
 8009356:	bf0c      	ite	eq
 8009358:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800935c:	2500      	movne	r5, #0
 800935e:	4293      	cmp	r3, r2
 8009360:	bfc4      	itt	gt
 8009362:	1a9b      	subgt	r3, r3, r2
 8009364:	18ed      	addgt	r5, r5, r3
 8009366:	2600      	movs	r6, #0
 8009368:	341a      	adds	r4, #26
 800936a:	42b5      	cmp	r5, r6
 800936c:	d11a      	bne.n	80093a4 <_printf_common+0xc8>
 800936e:	2000      	movs	r0, #0
 8009370:	e008      	b.n	8009384 <_printf_common+0xa8>
 8009372:	2301      	movs	r3, #1
 8009374:	4652      	mov	r2, sl
 8009376:	4649      	mov	r1, r9
 8009378:	4638      	mov	r0, r7
 800937a:	47c0      	blx	r8
 800937c:	3001      	adds	r0, #1
 800937e:	d103      	bne.n	8009388 <_printf_common+0xac>
 8009380:	f04f 30ff 	mov.w	r0, #4294967295
 8009384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009388:	3501      	adds	r5, #1
 800938a:	e7c6      	b.n	800931a <_printf_common+0x3e>
 800938c:	18e1      	adds	r1, r4, r3
 800938e:	1c5a      	adds	r2, r3, #1
 8009390:	2030      	movs	r0, #48	; 0x30
 8009392:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009396:	4422      	add	r2, r4
 8009398:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800939c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80093a0:	3302      	adds	r3, #2
 80093a2:	e7c7      	b.n	8009334 <_printf_common+0x58>
 80093a4:	2301      	movs	r3, #1
 80093a6:	4622      	mov	r2, r4
 80093a8:	4649      	mov	r1, r9
 80093aa:	4638      	mov	r0, r7
 80093ac:	47c0      	blx	r8
 80093ae:	3001      	adds	r0, #1
 80093b0:	d0e6      	beq.n	8009380 <_printf_common+0xa4>
 80093b2:	3601      	adds	r6, #1
 80093b4:	e7d9      	b.n	800936a <_printf_common+0x8e>
	...

080093b8 <_printf_i>:
 80093b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093bc:	7e0f      	ldrb	r7, [r1, #24]
 80093be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80093c0:	2f78      	cmp	r7, #120	; 0x78
 80093c2:	4691      	mov	r9, r2
 80093c4:	4680      	mov	r8, r0
 80093c6:	460c      	mov	r4, r1
 80093c8:	469a      	mov	sl, r3
 80093ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80093ce:	d807      	bhi.n	80093e0 <_printf_i+0x28>
 80093d0:	2f62      	cmp	r7, #98	; 0x62
 80093d2:	d80a      	bhi.n	80093ea <_printf_i+0x32>
 80093d4:	2f00      	cmp	r7, #0
 80093d6:	f000 80d4 	beq.w	8009582 <_printf_i+0x1ca>
 80093da:	2f58      	cmp	r7, #88	; 0x58
 80093dc:	f000 80c0 	beq.w	8009560 <_printf_i+0x1a8>
 80093e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80093e8:	e03a      	b.n	8009460 <_printf_i+0xa8>
 80093ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80093ee:	2b15      	cmp	r3, #21
 80093f0:	d8f6      	bhi.n	80093e0 <_printf_i+0x28>
 80093f2:	a101      	add	r1, pc, #4	; (adr r1, 80093f8 <_printf_i+0x40>)
 80093f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80093f8:	08009451 	.word	0x08009451
 80093fc:	08009465 	.word	0x08009465
 8009400:	080093e1 	.word	0x080093e1
 8009404:	080093e1 	.word	0x080093e1
 8009408:	080093e1 	.word	0x080093e1
 800940c:	080093e1 	.word	0x080093e1
 8009410:	08009465 	.word	0x08009465
 8009414:	080093e1 	.word	0x080093e1
 8009418:	080093e1 	.word	0x080093e1
 800941c:	080093e1 	.word	0x080093e1
 8009420:	080093e1 	.word	0x080093e1
 8009424:	08009569 	.word	0x08009569
 8009428:	08009491 	.word	0x08009491
 800942c:	08009523 	.word	0x08009523
 8009430:	080093e1 	.word	0x080093e1
 8009434:	080093e1 	.word	0x080093e1
 8009438:	0800958b 	.word	0x0800958b
 800943c:	080093e1 	.word	0x080093e1
 8009440:	08009491 	.word	0x08009491
 8009444:	080093e1 	.word	0x080093e1
 8009448:	080093e1 	.word	0x080093e1
 800944c:	0800952b 	.word	0x0800952b
 8009450:	682b      	ldr	r3, [r5, #0]
 8009452:	1d1a      	adds	r2, r3, #4
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	602a      	str	r2, [r5, #0]
 8009458:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800945c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009460:	2301      	movs	r3, #1
 8009462:	e09f      	b.n	80095a4 <_printf_i+0x1ec>
 8009464:	6820      	ldr	r0, [r4, #0]
 8009466:	682b      	ldr	r3, [r5, #0]
 8009468:	0607      	lsls	r7, r0, #24
 800946a:	f103 0104 	add.w	r1, r3, #4
 800946e:	6029      	str	r1, [r5, #0]
 8009470:	d501      	bpl.n	8009476 <_printf_i+0xbe>
 8009472:	681e      	ldr	r6, [r3, #0]
 8009474:	e003      	b.n	800947e <_printf_i+0xc6>
 8009476:	0646      	lsls	r6, r0, #25
 8009478:	d5fb      	bpl.n	8009472 <_printf_i+0xba>
 800947a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800947e:	2e00      	cmp	r6, #0
 8009480:	da03      	bge.n	800948a <_printf_i+0xd2>
 8009482:	232d      	movs	r3, #45	; 0x2d
 8009484:	4276      	negs	r6, r6
 8009486:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800948a:	485a      	ldr	r0, [pc, #360]	; (80095f4 <_printf_i+0x23c>)
 800948c:	230a      	movs	r3, #10
 800948e:	e012      	b.n	80094b6 <_printf_i+0xfe>
 8009490:	682b      	ldr	r3, [r5, #0]
 8009492:	6820      	ldr	r0, [r4, #0]
 8009494:	1d19      	adds	r1, r3, #4
 8009496:	6029      	str	r1, [r5, #0]
 8009498:	0605      	lsls	r5, r0, #24
 800949a:	d501      	bpl.n	80094a0 <_printf_i+0xe8>
 800949c:	681e      	ldr	r6, [r3, #0]
 800949e:	e002      	b.n	80094a6 <_printf_i+0xee>
 80094a0:	0641      	lsls	r1, r0, #25
 80094a2:	d5fb      	bpl.n	800949c <_printf_i+0xe4>
 80094a4:	881e      	ldrh	r6, [r3, #0]
 80094a6:	4853      	ldr	r0, [pc, #332]	; (80095f4 <_printf_i+0x23c>)
 80094a8:	2f6f      	cmp	r7, #111	; 0x6f
 80094aa:	bf0c      	ite	eq
 80094ac:	2308      	moveq	r3, #8
 80094ae:	230a      	movne	r3, #10
 80094b0:	2100      	movs	r1, #0
 80094b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80094b6:	6865      	ldr	r5, [r4, #4]
 80094b8:	60a5      	str	r5, [r4, #8]
 80094ba:	2d00      	cmp	r5, #0
 80094bc:	bfa2      	ittt	ge
 80094be:	6821      	ldrge	r1, [r4, #0]
 80094c0:	f021 0104 	bicge.w	r1, r1, #4
 80094c4:	6021      	strge	r1, [r4, #0]
 80094c6:	b90e      	cbnz	r6, 80094cc <_printf_i+0x114>
 80094c8:	2d00      	cmp	r5, #0
 80094ca:	d04b      	beq.n	8009564 <_printf_i+0x1ac>
 80094cc:	4615      	mov	r5, r2
 80094ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80094d2:	fb03 6711 	mls	r7, r3, r1, r6
 80094d6:	5dc7      	ldrb	r7, [r0, r7]
 80094d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80094dc:	4637      	mov	r7, r6
 80094de:	42bb      	cmp	r3, r7
 80094e0:	460e      	mov	r6, r1
 80094e2:	d9f4      	bls.n	80094ce <_printf_i+0x116>
 80094e4:	2b08      	cmp	r3, #8
 80094e6:	d10b      	bne.n	8009500 <_printf_i+0x148>
 80094e8:	6823      	ldr	r3, [r4, #0]
 80094ea:	07de      	lsls	r6, r3, #31
 80094ec:	d508      	bpl.n	8009500 <_printf_i+0x148>
 80094ee:	6923      	ldr	r3, [r4, #16]
 80094f0:	6861      	ldr	r1, [r4, #4]
 80094f2:	4299      	cmp	r1, r3
 80094f4:	bfde      	ittt	le
 80094f6:	2330      	movle	r3, #48	; 0x30
 80094f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80094fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009500:	1b52      	subs	r2, r2, r5
 8009502:	6122      	str	r2, [r4, #16]
 8009504:	f8cd a000 	str.w	sl, [sp]
 8009508:	464b      	mov	r3, r9
 800950a:	aa03      	add	r2, sp, #12
 800950c:	4621      	mov	r1, r4
 800950e:	4640      	mov	r0, r8
 8009510:	f7ff fee4 	bl	80092dc <_printf_common>
 8009514:	3001      	adds	r0, #1
 8009516:	d14a      	bne.n	80095ae <_printf_i+0x1f6>
 8009518:	f04f 30ff 	mov.w	r0, #4294967295
 800951c:	b004      	add	sp, #16
 800951e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009522:	6823      	ldr	r3, [r4, #0]
 8009524:	f043 0320 	orr.w	r3, r3, #32
 8009528:	6023      	str	r3, [r4, #0]
 800952a:	4833      	ldr	r0, [pc, #204]	; (80095f8 <_printf_i+0x240>)
 800952c:	2778      	movs	r7, #120	; 0x78
 800952e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009532:	6823      	ldr	r3, [r4, #0]
 8009534:	6829      	ldr	r1, [r5, #0]
 8009536:	061f      	lsls	r7, r3, #24
 8009538:	f851 6b04 	ldr.w	r6, [r1], #4
 800953c:	d402      	bmi.n	8009544 <_printf_i+0x18c>
 800953e:	065f      	lsls	r7, r3, #25
 8009540:	bf48      	it	mi
 8009542:	b2b6      	uxthmi	r6, r6
 8009544:	07df      	lsls	r7, r3, #31
 8009546:	bf48      	it	mi
 8009548:	f043 0320 	orrmi.w	r3, r3, #32
 800954c:	6029      	str	r1, [r5, #0]
 800954e:	bf48      	it	mi
 8009550:	6023      	strmi	r3, [r4, #0]
 8009552:	b91e      	cbnz	r6, 800955c <_printf_i+0x1a4>
 8009554:	6823      	ldr	r3, [r4, #0]
 8009556:	f023 0320 	bic.w	r3, r3, #32
 800955a:	6023      	str	r3, [r4, #0]
 800955c:	2310      	movs	r3, #16
 800955e:	e7a7      	b.n	80094b0 <_printf_i+0xf8>
 8009560:	4824      	ldr	r0, [pc, #144]	; (80095f4 <_printf_i+0x23c>)
 8009562:	e7e4      	b.n	800952e <_printf_i+0x176>
 8009564:	4615      	mov	r5, r2
 8009566:	e7bd      	b.n	80094e4 <_printf_i+0x12c>
 8009568:	682b      	ldr	r3, [r5, #0]
 800956a:	6826      	ldr	r6, [r4, #0]
 800956c:	6961      	ldr	r1, [r4, #20]
 800956e:	1d18      	adds	r0, r3, #4
 8009570:	6028      	str	r0, [r5, #0]
 8009572:	0635      	lsls	r5, r6, #24
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	d501      	bpl.n	800957c <_printf_i+0x1c4>
 8009578:	6019      	str	r1, [r3, #0]
 800957a:	e002      	b.n	8009582 <_printf_i+0x1ca>
 800957c:	0670      	lsls	r0, r6, #25
 800957e:	d5fb      	bpl.n	8009578 <_printf_i+0x1c0>
 8009580:	8019      	strh	r1, [r3, #0]
 8009582:	2300      	movs	r3, #0
 8009584:	6123      	str	r3, [r4, #16]
 8009586:	4615      	mov	r5, r2
 8009588:	e7bc      	b.n	8009504 <_printf_i+0x14c>
 800958a:	682b      	ldr	r3, [r5, #0]
 800958c:	1d1a      	adds	r2, r3, #4
 800958e:	602a      	str	r2, [r5, #0]
 8009590:	681d      	ldr	r5, [r3, #0]
 8009592:	6862      	ldr	r2, [r4, #4]
 8009594:	2100      	movs	r1, #0
 8009596:	4628      	mov	r0, r5
 8009598:	f7f6 fe22 	bl	80001e0 <memchr>
 800959c:	b108      	cbz	r0, 80095a2 <_printf_i+0x1ea>
 800959e:	1b40      	subs	r0, r0, r5
 80095a0:	6060      	str	r0, [r4, #4]
 80095a2:	6863      	ldr	r3, [r4, #4]
 80095a4:	6123      	str	r3, [r4, #16]
 80095a6:	2300      	movs	r3, #0
 80095a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095ac:	e7aa      	b.n	8009504 <_printf_i+0x14c>
 80095ae:	6923      	ldr	r3, [r4, #16]
 80095b0:	462a      	mov	r2, r5
 80095b2:	4649      	mov	r1, r9
 80095b4:	4640      	mov	r0, r8
 80095b6:	47d0      	blx	sl
 80095b8:	3001      	adds	r0, #1
 80095ba:	d0ad      	beq.n	8009518 <_printf_i+0x160>
 80095bc:	6823      	ldr	r3, [r4, #0]
 80095be:	079b      	lsls	r3, r3, #30
 80095c0:	d413      	bmi.n	80095ea <_printf_i+0x232>
 80095c2:	68e0      	ldr	r0, [r4, #12]
 80095c4:	9b03      	ldr	r3, [sp, #12]
 80095c6:	4298      	cmp	r0, r3
 80095c8:	bfb8      	it	lt
 80095ca:	4618      	movlt	r0, r3
 80095cc:	e7a6      	b.n	800951c <_printf_i+0x164>
 80095ce:	2301      	movs	r3, #1
 80095d0:	4632      	mov	r2, r6
 80095d2:	4649      	mov	r1, r9
 80095d4:	4640      	mov	r0, r8
 80095d6:	47d0      	blx	sl
 80095d8:	3001      	adds	r0, #1
 80095da:	d09d      	beq.n	8009518 <_printf_i+0x160>
 80095dc:	3501      	adds	r5, #1
 80095de:	68e3      	ldr	r3, [r4, #12]
 80095e0:	9903      	ldr	r1, [sp, #12]
 80095e2:	1a5b      	subs	r3, r3, r1
 80095e4:	42ab      	cmp	r3, r5
 80095e6:	dcf2      	bgt.n	80095ce <_printf_i+0x216>
 80095e8:	e7eb      	b.n	80095c2 <_printf_i+0x20a>
 80095ea:	2500      	movs	r5, #0
 80095ec:	f104 0619 	add.w	r6, r4, #25
 80095f0:	e7f5      	b.n	80095de <_printf_i+0x226>
 80095f2:	bf00      	nop
 80095f4:	08009cfd 	.word	0x08009cfd
 80095f8:	08009d0e 	.word	0x08009d0e

080095fc <memmove>:
 80095fc:	4288      	cmp	r0, r1
 80095fe:	b510      	push	{r4, lr}
 8009600:	eb01 0402 	add.w	r4, r1, r2
 8009604:	d902      	bls.n	800960c <memmove+0x10>
 8009606:	4284      	cmp	r4, r0
 8009608:	4623      	mov	r3, r4
 800960a:	d807      	bhi.n	800961c <memmove+0x20>
 800960c:	1e43      	subs	r3, r0, #1
 800960e:	42a1      	cmp	r1, r4
 8009610:	d008      	beq.n	8009624 <memmove+0x28>
 8009612:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009616:	f803 2f01 	strb.w	r2, [r3, #1]!
 800961a:	e7f8      	b.n	800960e <memmove+0x12>
 800961c:	4402      	add	r2, r0
 800961e:	4601      	mov	r1, r0
 8009620:	428a      	cmp	r2, r1
 8009622:	d100      	bne.n	8009626 <memmove+0x2a>
 8009624:	bd10      	pop	{r4, pc}
 8009626:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800962a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800962e:	e7f7      	b.n	8009620 <memmove+0x24>

08009630 <_sbrk_r>:
 8009630:	b538      	push	{r3, r4, r5, lr}
 8009632:	4d06      	ldr	r5, [pc, #24]	; (800964c <_sbrk_r+0x1c>)
 8009634:	2300      	movs	r3, #0
 8009636:	4604      	mov	r4, r0
 8009638:	4608      	mov	r0, r1
 800963a:	602b      	str	r3, [r5, #0]
 800963c:	f7f8 fa76 	bl	8001b2c <_sbrk>
 8009640:	1c43      	adds	r3, r0, #1
 8009642:	d102      	bne.n	800964a <_sbrk_r+0x1a>
 8009644:	682b      	ldr	r3, [r5, #0]
 8009646:	b103      	cbz	r3, 800964a <_sbrk_r+0x1a>
 8009648:	6023      	str	r3, [r4, #0]
 800964a:	bd38      	pop	{r3, r4, r5, pc}
 800964c:	20001e10 	.word	0x20001e10

08009650 <_realloc_r>:
 8009650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009654:	4680      	mov	r8, r0
 8009656:	4614      	mov	r4, r2
 8009658:	460e      	mov	r6, r1
 800965a:	b921      	cbnz	r1, 8009666 <_realloc_r+0x16>
 800965c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009660:	4611      	mov	r1, r2
 8009662:	f7ff bc57 	b.w	8008f14 <_malloc_r>
 8009666:	b92a      	cbnz	r2, 8009674 <_realloc_r+0x24>
 8009668:	f7ff fbe8 	bl	8008e3c <_free_r>
 800966c:	4625      	mov	r5, r4
 800966e:	4628      	mov	r0, r5
 8009670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009674:	f000 f81b 	bl	80096ae <_malloc_usable_size_r>
 8009678:	4284      	cmp	r4, r0
 800967a:	4607      	mov	r7, r0
 800967c:	d802      	bhi.n	8009684 <_realloc_r+0x34>
 800967e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009682:	d812      	bhi.n	80096aa <_realloc_r+0x5a>
 8009684:	4621      	mov	r1, r4
 8009686:	4640      	mov	r0, r8
 8009688:	f7ff fc44 	bl	8008f14 <_malloc_r>
 800968c:	4605      	mov	r5, r0
 800968e:	2800      	cmp	r0, #0
 8009690:	d0ed      	beq.n	800966e <_realloc_r+0x1e>
 8009692:	42bc      	cmp	r4, r7
 8009694:	4622      	mov	r2, r4
 8009696:	4631      	mov	r1, r6
 8009698:	bf28      	it	cs
 800969a:	463a      	movcs	r2, r7
 800969c:	f7ff fbc0 	bl	8008e20 <memcpy>
 80096a0:	4631      	mov	r1, r6
 80096a2:	4640      	mov	r0, r8
 80096a4:	f7ff fbca 	bl	8008e3c <_free_r>
 80096a8:	e7e1      	b.n	800966e <_realloc_r+0x1e>
 80096aa:	4635      	mov	r5, r6
 80096ac:	e7df      	b.n	800966e <_realloc_r+0x1e>

080096ae <_malloc_usable_size_r>:
 80096ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096b2:	1f18      	subs	r0, r3, #4
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	bfbc      	itt	lt
 80096b8:	580b      	ldrlt	r3, [r1, r0]
 80096ba:	18c0      	addlt	r0, r0, r3
 80096bc:	4770      	bx	lr
	...

080096c0 <_init>:
 80096c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096c2:	bf00      	nop
 80096c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096c6:	bc08      	pop	{r3}
 80096c8:	469e      	mov	lr, r3
 80096ca:	4770      	bx	lr

080096cc <_fini>:
 80096cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ce:	bf00      	nop
 80096d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096d2:	bc08      	pop	{r3}
 80096d4:	469e      	mov	lr, r3
 80096d6:	4770      	bx	lr
